"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.referendumVotesFor = referendumVotesFor;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _drr = require("../util/drr");

var _votes = require("./votes");

var _votingBalances = require("../balances/votingBalances");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function referendumVotesFor(api) {
  return referendumId => api.query.democracy.votersFor(referendumId).pipe((0, _operators.switchMap)(votersFor => (0, _rxjs.combineLatest)([(0, _rxjs.of)(votersFor), (0, _votes.votes)(api)(referendumId, votersFor), (0, _votingBalances.votingBalances)(api)(votersFor)])), (0, _operators.map)((_ref) => {
    let [votersFor, votes, balances] = _ref;
    return new _types.VectorAny(...votersFor.map((accountId, index) => new _types.StructAny({
      accountId,
      balance: balances[index].votingBalance || new _types.Balance(0),
      vote: votes[index] || new _types.Vote(0)
    })));
  }), (0, _drr.drr)());
}