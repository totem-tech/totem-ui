#ifndef B2JS_HOOKS_H
#define B2JS_HOOKS_H

#include <cstdint> // uintN_t
#include <cstdio> // print

#include <nan.h>
#include <blake2.h>

namespace B2JS {

v8::Local<v8::Object> blake2s();
v8::Local<v8::Object> blake2sp();
v8::Local<v8::Object> blake2b();
v8::Local<v8::Object> blake2bp();

template<
	typename blake2_state,
	int (*blake2_init)(blake2_state*, const uint8_t),
	int OUTBYTES>
void init(const Nan::FunctionCallbackInfo<v8::Value>& info);

template<
	typename blake2_state,
	int (*blake2_init_key)(blake2_state*, const uint8_t, const void*, const uint8_t),
	int OUTBYTES,
	int KEYBYTES>
	void init_key(const Nan::FunctionCallbackInfo<v8::Value>& info);

template<
	typename blake2_state,
	int (*blake2_update)(blake2_state*, const uint8_t*, uint64_t)>
void update(const Nan::FunctionCallbackInfo<v8::Value>& info);

template<
	typename blake2_state,
	int (*blake2_final)(blake2_state*, uint8_t*, uint8_t),
	int OUTBYTES>
void final(const Nan::FunctionCallbackInfo<v8::Value>& info);

} // B2JS

#endif
