import Text from './Text';
/**
 * @name Type
 * @description
 * This is a extended version of String, specifically to handle types. Here we rely fully
 * on what string provides us, however we also adjust the types received from the runtime,
 * i.e. we remove the `T::` prefixes found in some types for consistency accross implementation.
 */
export default class Type extends Text {
    private _originalLength;
    constructor(value?: Text | Uint8Array | string);
    private static decodeType;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare?: boolean): Uint8Array;
    private static _findClosing;
    private static _alias;
    private static _cleanupCompact;
    private static _flattenSingleTuple;
    private static _removeGenerics;
    private static _removePairOf;
    private static _removeTraits;
    private static _removeWrap;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
}
