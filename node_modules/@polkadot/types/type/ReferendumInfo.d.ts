import { Codec } from '../types';
import Struct from '../codec/Struct';
import BlockNumber from './BlockNumber';
import Proposal from './Proposal';
import VoteThreshold from './VoteThreshold';
declare type ReferendumInfoValue = {
    end?: BlockNumber;
    proposal?: Proposal;
    threshold?: VoteThreshold;
    delay?: BlockNumber;
};
/**
 * @name ReferendumInfo
 * @description
 * Info regarding an ongoing referendum
 */
export default class ReferendumInfo extends Struct {
    constructor(value?: ReferendumInfoValue | Uint8Array | Map<string, Codec>);
    /**
     * @description When voting on this referendum will end
     */
    readonly end: BlockNumber;
    /**
     * @description The proposal being voted on
     */
    readonly proposal: Proposal;
    /**
     * @description The thresholding mechanism to determine whether it passed
     */
    readonly threshold: VoteThreshold;
    /**
     * @description The delay (in blocks) to wait after a successful referendum before deploying
     */
    readonly delay: BlockNumber;
}
export {};
