import { Struct, Option, Tuple } from '.';
import { Constructor, Codec } from '../types';
declare type TypeWithValues = [Constructor, Array<any>];
export default class Linkage<T extends Codec> extends Struct {
    constructor(Type: Constructor, value?: any);
    static withKey<O extends Codec>(Type: Constructor): Constructor<Linkage<O>>;
    readonly previous: Option<T>;
    readonly next: Option<T>;
}
export declare class LinkageResult extends Tuple {
    constructor([TypeKey, keys]: TypeWithValues, [TypeValue, values]: TypeWithValues);
}
export {};
