"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeRegistry = require("./typeRegistry");

var _Text = _interopRequireDefault(require("../primitive/Text"));

var _U = _interopRequireDefault(require("../primitive/U32"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('TypeRegistry', () => {
  let registry;
  beforeEach(() => {
    registry = new _typeRegistry.TypeRegistry();
  });
  it('handles non exist type', () => {
    expect(registry.get('non-exist')).toBeUndefined();
  });
  it('can register single type', () => {
    registry.register(_Text.default);
    expect(registry.get('Text')).toBe(_Text.default);
  });
  it('can register type with a different name', () => {
    registry.register('TextRenamed', _Text.default);
    expect(registry.get('TextRenamed')).toBe(_Text.default);
  });
  describe('object registration', () => {
    it('can register multiple types', () => {
      registry.register({
        Text: _Text.default,
        'U32Renamed': _U.default
      });
      expect(registry.get('Text')).toBe(_Text.default);
      expect(registry.get('U32Renamed')).toBe(_U.default);
    });
    it('can create types from string', () => {
      registry.register({
        'U32Renamed': 'u32'
      });
      expect(registry.get('U32Renamed')).toBe(_U.default);
    });
    it('can create structs via definition', () => {
      registry.register({
        'SomeStruct': {
          'foo': 'u32',
          'bar': 'Text'
        }
      });
      const SomeStruct = registry.get('SomeStruct');
      const struct = new SomeStruct({
        foo: 42,
        bar: 'testing'
      });
      expect(SomeStruct.name).toBe('Struct');
      expect(struct.get('foo').toNumber()).toEqual(42);
      expect(struct.get('bar').toString()).toEqual('testing');
    });
  });
});