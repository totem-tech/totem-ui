import { AnyNumber, AnyU8a } from '../types';
import Struct from '../codec/Struct';
import Tuple from '../codec/Tuple';
import Vector from '../codec/Vector';
import U64 from '../primitive/U64';
import BlockNumber from './BlockNumber';
import SessionKey from './SessionKey';
export declare type NextAuthorityValue = {
    index?: AnyNumber;
    sessionKey?: AnyU8a;
};
export declare type StoredPendingChangeValue = {
    scheduledAt: AnyNumber;
    delay: AnyNumber;
    nextAuthorities?: Array<Uint8Array | NextAuthorityValue>;
};
/**
 * @name NextAuthority
 * @description
 * The next authority available as [[SessionKey]]
 */
export declare class NextAuthority extends Tuple {
    constructor(value?: Uint8Array | NextAuthorityValue);
    readonly index: U64;
    readonly sessionKey: SessionKey;
}
/**
 * @name StoredPendingChange
 * @description
 * Stored pending change for a Grandpa events
 */
export default class StoredPendingChange extends Struct {
    constructor(value?: Uint8Array | StoredPendingChangeValue);
    readonly delay: BlockNumber;
    readonly nextAuthorities: Vector<NextAuthority>;
    readonly scheduledAt: BlockNumber;
}
