"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _Enum = _interopRequireDefault(require("../codec/Enum"));

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _MagicNumber = _interopRequireDefault(require("./MagicNumber"));

var _v = _interopRequireDefault(require("./v0"));

var _v2 = _interopRequireDefault(require("./v1"));

var _v3 = _interopRequireDefault(require("./v2"));

var _v4 = _interopRequireDefault(require("./v3"));

var _v5 = _interopRequireDefault(require("./v4"));

var _v6 = _interopRequireDefault(require("./v5"));

var _toV = _interopRequireDefault(require("./v0/toV1"));

var _toV2 = _interopRequireDefault(require("./v1/toV2"));

var _toV3 = _interopRequireDefault(require("./v2/toV3"));

var _toV4 = _interopRequireDefault(require("./v3/toV4"));

var _toV5 = _interopRequireDefault(require("./v4/toV5"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
class MetadataEnum extends _Enum.default {
  constructor(value) {
    super({
      MetadataV0: _v.default,
      // once rolled-out, can replace this with MetadataDeprecated
      MetadataV1: _v2.default,
      // once rolled-out, can replace this with MetadataDeprecated
      MetadataV2: _v3.default,
      // once rolled-out, can replace this with MetadataDeprecated
      MetadataV3: _v4.default,
      // once rolled-out, can replace this with MetadataDeprecated
      MetadataV4: _v5.default,
      // once rolled-out, can replace this with MetadataDeprecated
      MetadataV5: _v6.default
    }, value);
  }
  /**
   * @description Returns the wrapped values as a V0 object
   */


  get asV0() {
    (0, _util.assert)(this.isV0, "Cannot convert '".concat(this.type, "' via asV0"));
    return this.value;
  }
  /**
   * @description Returns the wrapped values as a V1 object
   */


  get asV1() {
    (0, _util.assert)(this.isV1, "Cannot convert '".concat(this.type, "' via asV1"));
    return this.value;
  }
  /**
   * @description Returns the wrapped values as a V2 object
   */


  get asV2() {
    (0, _util.assert)(this.isV2, "Cannot convert '".concat(this.type, "' via asV2"));
    return this.value;
  }
  /**
   * @description Returns the wrapped values as a V3 object
   */


  get asV3() {
    (0, _util.assert)(this.isV3, "Cannot convert '".concat(this.type, "' via asV3"));
    return this.value;
  }
  /**
   * @description Returns the wrapped values as a V4 object
   */


  get asV4() {
    (0, _util.assert)(this.isV4, "Cannot convert '".concat(this.type, "' via asV4"));
    return this.value;
  }
  /**
   * @description Returns the wrapped values as a V5 object
   */


  get asV5() {
    (0, _util.assert)(this.isV5, "Cannot convert '".concat(this.type, "' via asV5"));
    return this.value;
  }
  /**
   * @description `true` if Deprecated
   */


  get isDeprecated() {
    return this.type === 'MetadataDeprectated';
  }
  /**
   * @description `true` if V0
   */


  get isV0() {
    return this.type === 'MetadataV0';
  }
  /**
   * @description `true` if V1
   */


  get isV1() {
    return this.type === 'MetadataV1';
  }
  /**
   * @description `true` if V2
   */


  get isV2() {
    return this.type === 'MetadataV2';
  }
  /**
   * @description `true` if V3
   */


  get isV3() {
    return this.type === 'MetadataV3';
  }
  /**
   * @description `true` if V4
   */


  get isV4() {
    return this.type === 'MetadataV4';
  }
  /**
   * @description `true` if V5
   */


  get isV5() {
    return this.type === 'MetadataV5';
  }
  /**
   * @description The version this metadata represents
   */


  get version() {
    return this.index;
  }

}
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */


class MetadataVersioned extends _Struct.default {
  constructor(value) {
    super({
      magicNumber: _MagicNumber.default,
      metadata: MetadataEnum
    }, value);
    this._convertedV1 = void 0;
    this._convertedV2 = void 0;
    this._convertedV3 = void 0;
    this._convertedV4 = void 0;
    this._convertedV5 = void 0;
  }
  /**
   * @description
   */


  get magicNumber() {
    return this.get('magicNumber');
  }
  /**
   * @description the metadata wrapped
   */


  get metadata() {
    return this.get('metadata');
  }
  /**
   * @description the metadata version this structure represents
   */


  get version() {
    return this.metadata.index;
  }
  /**
   * @description Returns the wrapped metadata as a V0 object
   */


  get asV0() {
    (0, _util.assert)(this.metadata.version === 0, "Cannot convert metadata from v".concat(this.metadata.version, " to v0"));
    return this.metadata.asV0;
  }
  /**
   * @description Returns the wrapped values as a V1 object
   */


  get asV1() {
    (0, _util.assert)(this.metadata.version <= 1, "Cannot convert metadata from v".concat(this.metadata.version, " to v1"));

    if (this.metadata.version === 1) {
      return this.metadata.asV1;
    }

    if ((0, _util.isUndefined)(this._convertedV1)) {
      this._convertedV1 = (0, _toV.default)(this.asV0);
    }

    return this._convertedV1;
  }
  /**
   * @description Returns the wrapped values as a V2 object
   */


  get asV2() {
    (0, _util.assert)(this.metadata.version <= 2, "Cannot convert metadata from v".concat(this.metadata.version, " to v2"));

    if (this.metadata.version === 2) {
      return this.metadata.asV2;
    }

    if ((0, _util.isUndefined)(this._convertedV2)) {
      this._convertedV2 = (0, _toV2.default)(this.asV1);
    }

    return this._convertedV2;
  }
  /**
   * @description Returns the wrapped values as a V3 object
   */


  get asV3() {
    (0, _util.assert)(this.metadata.version <= 3, "Cannot convert metadata from v".concat(this.metadata.version, " to v3"));

    if (this.metadata.version === 3) {
      return this.metadata.asV3;
    }

    if ((0, _util.isUndefined)(this._convertedV3)) {
      this._convertedV3 = (0, _toV3.default)(this.asV2);
    }

    return this._convertedV3;
  }

  getUniqTypes(throwError) {
    return this.asV5.getUniqTypes(throwError);
  }
  /**
   * @description Returns the wrapped values as a V4 object
   */


  get asV4() {
    (0, _util.assert)(this.metadata.version <= 4, "Cannot convert metadata from v".concat(this.metadata.version, " to v4"));

    if (this.metadata.version === 4) {
      return this.metadata.asV4;
    }

    if ((0, _util.isUndefined)(this._convertedV4)) {
      this._convertedV4 = (0, _toV4.default)(this.asV3);
    }

    return this._convertedV4;
  }
  /**
   * @description Returns the wrapped values as a V5 object
   */


  get asV5() {
    (0, _util.assert)(this.metadata.version <= 5, "Cannot convert metadata from v".concat(this.metadata.version, " to v5"));

    if (this.metadata.version === 5) {
      return this.metadata.asV5;
    }

    if ((0, _util.isUndefined)(this._convertedV5)) {
      this._convertedV5 = (0, _toV5.default)(this.asV4);
    }

    return this._convertedV5;
  }

}

exports.default = MetadataVersioned;