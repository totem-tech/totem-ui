"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idAndIndex = idAndIndex;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _idToIndex = require("./idToIndex");

var _indexToId = require("./indexToId");

var _drr = require("../util/drr");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name idAndIndex
 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
 * });
 * ```
 */
function idAndIndex(api) {
  return address => {
    try {
      // yes, this can fail, don't care too much, catch will catch it
      const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());

      if (decoded.length === 32) {
        const accountId = new _types.AccountId(decoded);
        return (0, _idToIndex.idToIndex)(api)(accountId).pipe((0, _operators.startWith)(undefined), (0, _operators.map)(accountIndex => [accountId, accountIndex]), (0, _drr.drr)());
      }

      const accountIndex = new _types.AccountIndex(decoded);
      return (0, _indexToId.indexToId)(api)(accountIndex).pipe((0, _operators.startWith)(undefined), (0, _operators.map)(accountId => [accountId, accountIndex]), (0, _drr.drr)());
    } catch (error) {
      return (0, _rxjs.of)([undefined, undefined]).pipe((0, _drr.drr)());
    }
  };
}