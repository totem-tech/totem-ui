"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tombstone = exports.TombstoneContractInfo = exports.Alive = exports.AliveContractInfo = exports.TrieId = void 0;

var _util = require("@polkadot/util");

var _Option = _interopRequireDefault(require("../codec/Option"));

var _Bytes = _interopRequireDefault(require("../primitive/Bytes"));

var _Enum = _interopRequireDefault(require("../codec/Enum"));

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _U = _interopRequireDefault(require("../primitive/U32"));

var _Balance = _interopRequireDefault(require("./Balance"));

var _BlockNumber = _interopRequireDefault(require("./BlockNumber"));

var _CodeHash = _interopRequireDefault(require("./CodeHash"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
class TrieId extends _Bytes.default {}

exports.TrieId = TrieId;

class AliveContractInfo extends _Struct.default {
  constructor(value) {
    super({
      trieId: TrieId,
      storageSize: _U.default,
      codeHash: _CodeHash.default,
      rentAllowance: _Balance.default,
      deductBlock: _BlockNumber.default,
      lastWrite: _Option.default.with(_BlockNumber.default)
    }, value);
  }

  get codeHash() {
    return this.get('codeHash');
  }

  get deductBlock() {
    return this.get('deductBlock');
  }

  get lastWrite() {
    return this.get('lastWrite');
  }

  get rentAllowance() {
    return this.get('rentAllowance');
  }

  get storageSize() {
    return this.get('storageSize');
  }

  get trieId() {
    return this.get('trieId');
  }

}

exports.AliveContractInfo = AliveContractInfo;

class Alive extends AliveContractInfo {}

exports.Alive = Alive;

class TombstoneContractInfo extends _Hash.default {}

exports.TombstoneContractInfo = TombstoneContractInfo;

class Tombstone extends TombstoneContractInfo {}
/**
 * @name ContractInfo
 * @description
 * The contract information for a given contract
 */


exports.Tombstone = Tombstone;

class ContractInfo extends _Enum.default {
  constructor(value) {
    super({
      Alive,
      Tombstone
    }, value);
  }
  /**
   * @description Returns the item as an [[Alive]]
   */


  get asAlive() {
    (0, _util.assert)(this.isAlive, "Cannot convert '".concat(this.type, "' via asAlive"));
    return this.value;
  }
  /**
   * @description Returns the item as an [[Tombstone]]
   */


  get asTombstone() {
    (0, _util.assert)(this.isTombstone, "Cannot convert '".concat(this.type, "' via asTombstone"));
    return this.value;
  }
  /**
   * @description value is an [[Alive]]
   */


  get isAlive() {
    return this.toNumber() === 0;
  }
  /**
   * @description value is an [[Tombstone]]
   */


  get isTombstone() {
    return this.toNumber() === 1;
  }

}

exports.default = ContractInfo;