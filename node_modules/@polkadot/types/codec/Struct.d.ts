import { Codec, Constructor, ConstructorDef } from '../types';
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */
export default class Struct<S extends ConstructorDef = ConstructorDef, T extends {
    [K in keyof S]: Codec;
} = {
    [K in keyof S]: Codec;
}, V extends {
    [K in keyof S]: any;
} = {
    [K in keyof S]: any;
}, E extends {
    [K in keyof S]: string;
} = {
    [K in keyof S]: string;
}> extends Map<keyof S, Codec> implements Codec {
    protected _jsonMap: Map<keyof S, string>;
    protected _Types: S;
    constructor(Types: S, value?: V | Map<any, any> | Array<any>, jsonMap?: Map<keyof S, string>);
    /**
     * Decode input to pass into constructor.
     *
     * @param Types - Types definition.
     * @param value - Value to decode, one of:
     * - null
     * - undefined
     * - hex
     * - Uint8Array
     * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`
     * are also keys in `Types`
     * - array with `[value1, value2]` assuming the array has the same length as
     * `Object.keys(Types)`
     * @param jsonMap
     */
    private static decodeStruct;
    private static decodeStructFromObject;
    static with<S extends ConstructorDef>(Types: S): Constructor<Struct<S>>;
    /**
     * @description Checks if the value is an empty value
     */
    readonly isEmpty: boolean;
    /**
     * @description Returns the Type description to sthe structure
     */
    readonly Type: E;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other?: any): boolean;
    /**
     * @description Returns a specific names entry in the structure
     * @param name The name of the entry to retrieve
     */
    get(name: keyof S): Codec | undefined;
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */
    getAtIndex(index: number): Codec;
    /**
     * @description Converts the Object to an standard JavaScript Array
     */
    toArray(): Array<Codec>;
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(): string;
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(): any;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
    /**
     * @description Returns the string representation of the value
     */
    toString(): string;
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare?: boolean): Uint8Array;
}
