"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignaturePayloadRaw = exports.default = void 0;

var _utilCrypto = require("@polkadot/util-crypto");

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _U8a = _interopRequireDefault(require("../codec/U8a"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _Method = _interopRequireDefault(require("../primitive/Method"));

var _ExtrinsicEra = _interopRequireDefault(require("./ExtrinsicEra"));

var _NonceCompact = _interopRequireDefault(require("./NonceCompact"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// a helper function for both types of payloads, Raw and metadata-known
function sign(signerPair, u8a) {
  const encoded = u8a.length > 256 ? (0, _utilCrypto.blake2AsU8a)(u8a) : u8a;
  return signerPair.sign(encoded);
}
/**
 * @name SignaturePayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 *
 *   8 bytes: The Transaction Index/Nonce as provided in the transaction itself.
 *   2+ bytes: The Function Descriptor as provided in the transaction itself.
 *   2 bytes: The Transaction Era as provided in the transaction itself.
 *   32 bytes: The hash of the authoring block implied by the Transaction Era and the current block.
 */


class SignaturePayload extends _Struct.default {
  constructor(value) {
    super({
      nonce: _NonceCompact.default,
      method: _Method.default,
      era: _ExtrinsicEra.default,
      blockHash: _Hash.default
    }, value);
    this._signature = void 0;
  }
  /**
   * @description `true` if the payload refers to a valid signature
   */


  get isSigned() {
    return !!(this._signature && this._signature.length === 64);
  }
  /**
   * @description The block [[Hash]] the signature applies to (mortal/immortal)
   */


  get blockHash() {
    return this.get('blockHash');
  }
  /**
   * @description The [[Method]] contained in the payload
   */


  get method() {
    return this.get('method');
  }
  /**
   * @description The [[ExtrinsicEra]]
   */


  get era() {
    return this.get('era');
  }
  /**
   * @description The [[Nonce]]
   */


  get nonce() {
    return this.get('nonce');
  }
  /**
   * @description The raw signature as a `Uint8Array`
   */


  get signature() {
    if (!this.isSigned) {
      throw new Error('Transaction is not signed');
    }

    return this._signature;
  }
  /**
   * @description Sign the payload with the keypair
   */


  sign(signerPair, version) {
    this._signature = sign(signerPair, this.toU8a());
    return this._signature;
  }

}
/**
 * @name SignaturePayloadRaw
 * @description
 * A version of [[SignaturePayload]] where it does not rely on [[Method]] being initalized with metadata. When constructing, it treats the [[Method]] as a raw stream of bytes, so will always apply the signature over this without any additional checking. Unlike the [[SignaturePayload]], it assumed that you will only construct and sign, thereby providing no insigt into constructed values
 */


exports.default = SignaturePayload;

class SignaturePayloadRaw extends _Struct.default {
  constructor(value) {
    super({
      nonce: _NonceCompact.default,
      method: _U8a.default,
      era: _ExtrinsicEra.default,
      blockHash: _Hash.default
    }, value);
  }
  /**
   * @description Sign the payload with the keypair
   */


  sign(signerPair) {
    return sign(signerPair, this.toU8a());
  }

}

exports.SignaturePayloadRaw = SignaturePayloadRaw;