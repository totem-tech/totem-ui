import Option from '../codec/Option';
import Bytes from '../primitive/Bytes';
import Enum from '../codec/Enum';
import Struct from '../codec/Struct';
import Hash from '../primitive/Hash';
import U32 from '../primitive/U32';
import Balance from './Balance';
import BlockNumber from './BlockNumber';
import CodeHash from './CodeHash';
export declare class TrieId extends Bytes {
}
export declare class AliveContractInfo extends Struct {
    constructor(value?: any);
    readonly codeHash: CodeHash;
    readonly deductBlock: BlockNumber;
    readonly lastWrite: Option<BlockNumber>;
    readonly rentAllowance: Balance;
    readonly storageSize: U32;
    readonly trieId: TrieId;
}
export declare class Alive extends AliveContractInfo {
}
export declare class TombstoneContractInfo extends Hash {
}
export declare class Tombstone extends TombstoneContractInfo {
}
/**
 * @name ContractInfo
 * @description
 * The contract information for a given contract
 */
export default class ContractInfo extends Enum {
    constructor(value?: any);
    /**
     * @description Returns the item as an [[Alive]]
     */
    readonly asAlive: Alive;
    /**
     * @description Returns the item as an [[Tombstone]]
     */
    readonly asTombstone: Tombstone;
    /**
     * @description value is an [[Alive]]
     */
    readonly isAlive: boolean;
    /**
     * @description value is an [[Tombstone]]
     */
    readonly isTombstone: boolean;
}
