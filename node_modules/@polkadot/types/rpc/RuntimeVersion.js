"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RuntimeVersionApi = exports.ApiId = void 0;

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Tuple = _interopRequireDefault(require("../codec/Tuple"));

var _U8aFixed = _interopRequireDefault(require("../codec/U8aFixed"));

var _Vector = _interopRequireDefault(require("../codec/Vector"));

var _Text = _interopRequireDefault(require("../primitive/Text"));

var _U = _interopRequireDefault(require("../primitive/U32"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name ApiId
 * @description
 * An identifier for the runtime API
 */
class ApiId extends _U8aFixed.default {
  constructor(value) {
    super(value, 64);
  }

}

exports.ApiId = ApiId;

/**
 * @name RuntimeVersionApi
 * @description
 * A [[Tuple]] that conatins the [[ApiId]] and [[U32]] version
 */
class RuntimeVersionApi extends _Tuple.default {
  constructor(value) {
    super({
      ApiId,
      U32: _U.default
    }, value);
  }
  /**
   * @description The [[ApiId]]
   */


  get id() {
    return this[0];
  }
  /**
   * @description The specific version as [[U32]]
   */


  get version() {
    return this[1];
  }

}

exports.RuntimeVersionApi = RuntimeVersionApi;

/**
 * @name RuntimeVersion
 * @description
 * A defintion of the runtime and the associated versions thereof
 */
class RuntimeVersion extends _Struct.default {
  constructor(value) {
    super({
      specName: _Text.default,
      implName: _Text.default,
      authoringVersion: _U.default,
      specVersion: _U.default,
      implVersion: _U.default,
      apis: _Vector.default.with(RuntimeVersionApi)
    }, value);
  }
  /**
   * @description The available APIs as [[RuntimeVersionApi]]
   */


  get apis() {
    return this.get('apis');
  }
  /**
   * @description The authoring version as [[U32]]
   */


  get authoringVersion() {
    return this.get('authoringVersion');
  }
  /**
   * @description The implementation name
   */


  get implName() {
    return this.get('implName');
  }
  /**
   * @description The implementation version
   */


  get implVersion() {
    return this.get('implVersion');
  }
  /**
   * @description The specification name
   */


  get specName() {
    return this.get('specName');
  }
  /**
   * @description The specification version
   */


  get specVersion() {
    return this.get('specVersion');
  }

}

exports.default = RuntimeVersion;