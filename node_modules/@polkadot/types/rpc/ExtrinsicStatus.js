"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Usurped = exports.Invalid = exports.Ready = exports.Future = exports.Finalized = exports.Dropped = exports.Broadcast = void 0;

var _util = require("@polkadot/util");

var _Enum = _interopRequireDefault(require("../codec/Enum"));

var _Vector = _interopRequireDefault(require("../codec/Vector"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _Null = _interopRequireDefault(require("../primitive/Null"));

var _Text = _interopRequireDefault(require("../primitive/Text"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Broadcast
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been boradcast to peers
 */
class Broadcast extends _Vector.default.with(_Text.default) {}
/**
 * @name Dropped
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been dropped
 */


exports.Broadcast = Broadcast;

class Dropped extends _Null.default {}
/**
 * @name Finalized
 * @description
 * An [[ExtrinsicStatus] indicating that the [[Extrinsic]]] has been finalized and included
 */


exports.Dropped = Dropped;

class Finalized extends _Hash.default {}
/**
 * @name Future
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been added to the future queue
 */


exports.Finalized = Finalized;

class Future extends _Null.default {}
/**
 * @name Ready
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been added to the ready queue
 */


exports.Future = Future;

class Ready extends _Null.default {}
/**
 * @name Invalid
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] is invalid
 */


exports.Ready = Ready;

class Invalid extends _Null.default {}
/**
 * @name Usurped
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been usurped
 */


exports.Invalid = Invalid;

class Usurped extends _Hash.default {}
/**
 * @name ExtrinsicStatus
 * @description
 * An [[Enum]] that indicates the status of the [[Extrinsic]] as been submitted
 */


exports.Usurped = Usurped;

class ExtrinsicStatus extends _Enum.default {
  constructor(value, index) {
    super({
      Future,
      Ready,
      Finalized,
      Usurped,
      Broadcast,
      Dropped,
      Invalid
    }, value, index);
  }
  /**
   * @description Returns the item as a [[Broadcast]]
   */


  get asBroadcast() {
    (0, _util.assert)(this.isBroadcast, "Cannot convert '".concat(this.type, "' via asBroadcast"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[Dropped]]
   */


  get asDropped() {
    (0, _util.assert)(this.isDropped, "Cannot convert '".concat(this.type, "' via asDropped"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[Finalized]]
   */


  get asFinalized() {
    (0, _util.assert)(this.isFinalized, "Cannot convert '".concat(this.type, "' via asFinalized"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[Future]]
   */


  get asFuture() {
    (0, _util.assert)(this.isFuture, "Cannot convert '".concat(this.type, "' via asFuture"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[Invalid]]
   */


  get asInvalid() {
    (0, _util.assert)(this.isInvalid, "Cannot convert '".concat(this.type, "' via asInvalid"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[Ready]]
   */


  get asReady() {
    (0, _util.assert)(this.isReady, "Cannot convert '".concat(this.type, "' via asReady"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[Usurped]]
   */


  get asUsurped() {
    (0, _util.assert)(this.isUsurped, "Cannot convert '".concat(this.type, "' via asUsurped"));
    return this.value;
  }
  /**
   * @description Returns true if the status is boadcast
   */


  get isBroadcast() {
    return this.type === 'Broadcast';
  }
  /**
   * @description Returns true if the status is dropped
   */


  get isDropped() {
    return this.type === 'Dropped';
  }
  /**
   * @description Returns true if the status is finalized
   */


  get isFinalized() {
    return this.type === 'Finalized';
  }
  /**
   * @description Returns true if the status is future
   */


  get isFuture() {
    return this.type === 'Future';
  }
  /**
   * @description Returns true if the status is invalid
   */


  get isInvalid() {
    return this.type === 'Invalid';
  }
  /**
   * @description Returns true if the status is eady
   */


  get isReady() {
    return this.type === 'Ready';
  }
  /**
   * @description Returns true if the status is usurped
   */


  get isUsurped() {
    return this.type === 'Usurped';
  }

}

exports.default = ExtrinsicStatus;