"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _fromMetadata = _interopRequireDefault(require("@polkadot/storage/fromMetadata"));

var _Metadata = _interopRequireDefault(require("@polkadot/types/Metadata"));

var _static = _interopRequireDefault(require("@polkadot/types/Metadata/v3/static"));

var _static2 = _interopRequireDefault(require("@polkadot/types/Metadata/v4/static"));

var _static3 = _interopRequireDefault(require("@polkadot/types/Metadata/v5/static"));

var _ = _interopRequireDefault(require("."));

// Copyright 2017-2019 @polkadot/rpc-core authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const ADDR_ONE = '5DkQbYAExs3M2sZgT1Ec3mKfZnAQCL4Dt9beTCknkCUn5jzo';
const ADDR_TWO = '5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF';
const BALANCE_KEYS = [
/* v3- */
'0x4af2c53fce3ec33c6ccccf22e926f1a7',
/* v4+ */
'0xec8f96437274a883afcac82d01a9defeb68209cd4f2c084632813692aa5e65ad'];

function formattingTests(version, storage, encodedValues) {
  const [ENC_ONE, ENC_TWO] = encodedValues;
  describe("formatting with Metadata ".concat(version), () => {
    let api;
    let provider;
    beforeEach(() => {
      provider = {
        send: jest.fn((method, _ref) => {
          let [key] = _ref;
          return Promise.resolve(BALANCE_KEYS.includes(key) ? '0x01020000000000000000000000000000' : null);
        }),
        subscribe: jest.fn((type, method, params, subscription) => subscription(null, {
          block: '0x1234',
          changes: [[ENC_ONE, '0x01020000000000000000000000000000'], [ENC_TWO, '0x02010000000000000000000000000000']]
        }))
      };
      api = new _.default(provider);
    });
    it('encodes key (with params), decoding response', () => {
      return api.state.getStorage([storage.balances.freeBalance, ADDR_ONE]).then(value => {
        expect(provider.send).toHaveBeenCalledWith('state_getStorage', [ENC_ONE]);
        expect(value.toNumber()).toEqual(513);
      });
    });
    it('returns the fallback result on not-found values', () => {
      return api.state.getStorage([storage.system.accountNonce, ADDR_ONE]).then(value => {
        expect(value.toHex()).toEqual('0x0000000000000000');
      });
    });
    it('encodes multiple keys, decoding multiple results', done => {
      return api.state.subscribeStorage([[storage.balances.freeBalance, ADDR_ONE], [storage.balances.freeBalance, ADDR_TWO]], value => {
        console.error(value);
        expect(provider.subscribe).toHaveBeenCalledWith('state_storage', 'state_subscribeStorage', [[ENC_ONE, ENC_TWO]], expect.anything());
        expect(value.map(balance => balance.toNumber())).toEqual([513, 258]);
        done();
      });
    });
  });
}

formattingTests('v3', (0, _fromMetadata.default)(new _Metadata.default(_static.default)), ['0x4af2c53fce3ec33c6ccccf22e926f1a7', '0x3e62f7ed6e788e1337bce2a97b68a12a']);
formattingTests('v4', (0, _fromMetadata.default)(new _Metadata.default(_static2.default)), ['0xec8f96437274a883afcac82d01a9defeb68209cd4f2c084632813692aa5e65ad', '0x1dbb0224910f42a14e7f1406b24c6fe8157296691b02a78756e01946038fffab']);
formattingTests('v5', (0, _fromMetadata.default)(new _Metadata.default(_static3.default)), ['0xec8f96437274a883afcac82d01a9defeb68209cd4f2c084632813692aa5e65ad', '0x1dbb0224910f42a14e7f1406b24c6fe8157296691b02a78756e01946038fffab']);