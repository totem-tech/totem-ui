import { AnyU8a } from '../types';
import Struct from '../codec/Struct';
import Hash from '../primitive/Hash';
import Justification from '../type/Justification';
import Block, { BlockValue } from './Block';
declare type SignedBlockValue = {
    block?: BlockValue;
    justification?: AnyU8a;
};
/**
 * @name SignedBlock
 * @description
 * A [[Block]] that has been signed and contains a [[Justification]]
 */
export default class SignedBlock extends Struct {
    constructor(value?: SignedBlockValue | Uint8Array);
    /**
     * @description The wrapped [[Block]]
     */
    readonly block: Block;
    /**
     * @description Block/header [[Hash]]
     */
    readonly hash: Hash;
    /**
     * @description The wrapped [[Justification]]
     */
    readonly justification: Justification;
}
export {};
