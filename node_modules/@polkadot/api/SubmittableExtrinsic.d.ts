import { AccountId, Address, ExtrinsicStatus, EventRecord, Hash, Method, Struct } from '@polkadot/types';
import { IExtrinsic, IKeyringPair, SignatureOptions } from '@polkadot/types/types';
import { ApiInterface$Rx, ApiType, OnCallDefinition } from './types';
import { Observable } from 'rxjs';
declare type StatusCb = (result: SubmittableResult) => any;
declare type SumbitableResultResult<CodecResult, SubscriptionResult> = CodecResult extends Observable<any> ? Observable<SubmittableResult> : Promise<Hash>;
declare type SumbitableResultSubscription<CodecResult, SubscriptionResult> = SubscriptionResult extends Observable<any> ? Observable<SubmittableResult> : Promise<() => void>;
export declare class SubmittableResult extends Struct {
    constructor(value?: any);
    /**
     * @description the contained events
     */
    readonly events: Array<EventRecord>;
    /**
     * @description the status
     */
    readonly status: ExtrinsicStatus;
    /**
     * @description Finds an EventRecord for the specified method & section
     */
    findRecord(section: string, method: string): EventRecord | undefined;
}
export interface SubmittableExtrinsic<CodecResult, SubscriptionResult> extends IExtrinsic {
    send(): SumbitableResultResult<CodecResult, SubscriptionResult>;
    send(statusCb: (result: SubmittableResult) => any): SumbitableResultSubscription<CodecResult, SubscriptionResult>;
    sign(account: IKeyringPair, _options: Partial<SignatureOptions>): this;
    signAndSend(account: IKeyringPair | string | AccountId | Address, options?: Partial<Partial<SignatureOptions>>): SumbitableResultResult<CodecResult, SubscriptionResult>;
    signAndSend(account: IKeyringPair | string | AccountId | Address, statusCb: StatusCb): SumbitableResultSubscription<CodecResult, SubscriptionResult>;
}
export default function createSubmittableExtrinsic<CodecResult, SubscriptionResult>(type: ApiType, api: ApiInterface$Rx, onCall: OnCallDefinition<CodecResult, SubscriptionResult>, extrinsic: Method | Uint8Array | string, trackingCb?: (result: SubmittableResult) => any): SubmittableExtrinsic<CodecResult, SubscriptionResult>;
export {};
