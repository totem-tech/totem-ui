"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _types = require("@polkadot/types");

var _bn = _interopRequireDefault(require("bn.js"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _bestNumber = require("../chain/bestNumber");

var _drr = require("../util/drr");

var _eraLength = require("../session/eraLength");

var _util = require("@polkadot/util");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function calculateUnlocking(stakingLedger, eraLength, bestNumber) {
  if ((0, _util.isUndefined)(stakingLedger)) {
    return undefined;
  } // select the Unlockchunks that can't be redeemed yet.


  const unlockingChunks = stakingLedger.unlocking.filter(chunk => remainingBlocks(chunk.era, eraLength, bestNumber).gtn(0));

  if (!unlockingChunks.length) {
    return undefined;
  } // group the Unlockchunks that have the same era and sum their values


  const groupedResult = groupByEra(unlockingChunks);
  const results = Object.entries(groupedResult).map((_ref) => {
    let [eraString, value] = _ref;
    return {
      value,
      remainingBlocks: remainingBlocks(new _types.BlockNumber(eraString), eraLength, bestNumber)
    };
  });
  return results.length ? results : undefined;
}

function groupByEra(list) {
  return list.reduce((map, _ref2) => {
    let {
      era,
      value
    } = _ref2;
    const key = era.toString();

    if (!map[key]) {
      map[key] = value;
    } else {
      map[key] = map[key].add(value);
    }

    return map;
  }, {});
}

function redeemableSum(stakingLedger, eraLength, bestNumber) {
  if ((0, _util.isUndefined)(stakingLedger)) {
    return new _bn.default(0);
  }

  return stakingLedger.unlocking.filter(chunk => remainingBlocks(chunk.era, eraLength, bestNumber).eqn(0)).reduce((curr, prev) => {
    return curr.add(prev.value);
  }, new _bn.default(0));
}

function remainingBlocks(era, eraLength, bestNumber) {
  const remaining = eraLength.mul(era).sub(bestNumber);
  return remaining.lten(0) ? new _bn.default(0) : remaining;
}

function withStashController(api, accountId, controllerId) {
  const stashId = accountId;
  return (0, _rxjs.combineLatest)([(0, _eraLength.eraLength)(api)(), (0, _bestNumber.bestNumber)(api)(), api.queryMulti([[api.query.session.nextKeyFor, controllerId], [api.query.staking.ledger, controllerId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.stakers, stashId], [api.query.staking.validators, stashId]])]).pipe((0, _operators.map)((_ref3) => {
    let [eraLength, bestNumber, [nextKeyFor, _stakingLedger, [nominators], rewardDestination, stakers, [validatorPrefs]]] = _ref3;
    const stakingLedger = _stakingLedger.isSome ? _stakingLedger.unwrap() : undefined;
    return new _types.StructAny({
      accountId,
      controllerId,
      nextSessionId: nextKeyFor.unwrapOr(null) || undefined,
      nominators,
      redeemable: redeemableSum(stakingLedger, eraLength, bestNumber),
      rewardDestination,
      stakers,
      stakingLedger,
      stashId,
      unlocking: calculateUnlocking(stakingLedger, eraLength, bestNumber),
      validatorPrefs
    });
  }), (0, _drr.drr)());
}

function withControllerLedger(api, accountId, stakingLedger) {
  const controllerId = accountId;
  const stashId = stakingLedger.stash;
  return api.queryMulti([[api.query.session.nextKeyFor, controllerId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.stakers, stashId], [api.query.staking.validators, stashId]]).pipe((0, _operators.map)((_ref4) => {
    let [nextKeyFor, [nominators], rewardDestination, stakers, [validatorPrefs]] = _ref4;
    return new _types.StructAny({
      accountId,
      controllerId,
      nextSessionId: nextKeyFor.unwrapOr(null) || undefined,
      nominators,
      rewardDestination,
      stakers,
      stakingLedger,
      stashId,
      validatorPrefs
    });
  }), (0, _drr.drr)());
}
/**
 * @description From either a stash or controller id, retrieve the controllerId, stashId, nextSessionId, stakingLedger and preferences
 */


function info(api) {
  return _accountId => {
    const accountId = new _types.AccountId(_accountId);
    return api.queryMulti([[api.query.staking.bonded, accountId], // try to map to controller
    [api.query.staking.ledger, accountId] // try to map to stash
    ]).pipe((0, _operators.switchMap)((_ref5) => {
      let [controllerId, stakingLedger] = _ref5;
      return controllerId.isSome // we have a controller, so input was a stash, great
      ? withStashController(api, accountId, controllerId.unwrap()) : stakingLedger.isSome ? withControllerLedger(api, accountId, stakingLedger.unwrap()) // dangit, this is something else, ok, we are done
      : (0, _rxjs.of)(new _types.StructAny({
        accountId
      }));
    }), (0, _drr.drr)());
  };
}