"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDefaultRegistry;
exports.TypeRegistry = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _util = require("@polkadot/util");

var _createType = require("./createType");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
class TypeRegistry {
  constructor() {
    this._registry = new Map();
  }

  register(arg1, arg2) {
    if ((0, _util.isString)(arg1)) {
      const name = arg1;
      const type = arg2;

      this._registry.set(name, type);
    } else if ((0, _util.isFunction)(arg1)) {
      const name = arg1.name;
      const type = arg1;

      this._registry.set(name, type);
    } else {
      this.registerObject(arg1);
    }
  }

  registerObject(obj) {
    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    Object.entries(obj).forEach((_ref) => {
      let [name, type] = _ref;

      if (overwrite || !this.get(name)) {
        if ((0, _util.isString)(type)) {
          this._registry.set(name, (0, _createType.createClass)(type));
        } else if ((0, _util.isFunction)(type)) {
          // This _looks_ a bit funny, but `typeof Clazz === 'function'
          this._registry.set(name, type);
        } else {
          this._registry.set(name, (0, _createType.createClass)(JSON.stringify(type)));
        }
      }
    });
  }

  get(name) {
    return this._registry.get(name);
  }

  getOrThrow(name, msg) {
    const type = this.get(name);

    if ((0, _util.isUndefined)(type)) {
      throw new Error(msg || "type ".concat(name, " not found"));
    }

    return type;
  }

}

exports.TypeRegistry = TypeRegistry;
TypeRegistry.defaultRegistry = new TypeRegistry();
let defaultRegistry;

function getDefaultRegistry() {
  if (!defaultRegistry) {
    const defaultTypes = require('../index.types');

    defaultRegistry = new TypeRegistry();
    defaultRegistry.register((0, _objectSpread2.default)({}, defaultTypes));
  }

  return defaultRegistry;
}