#ifndef B2JS_UTILS_H
#define B2JS_UTILS_H

#include <cstdint>
#include <nan.h>

namespace B2JS {
namespace Utils {

using Nan::New;
using Nan::PropertyCallbackInfo;

using v8::Local;
using v8::Number;
using v8::Object;
using v8::String;
using v8::Value;

template<typename blake2_state>
blake2_state* GetState(const Local<Value>& obj) {
	if (!node::Buffer::HasInstance(obj)) {
		Nan::ThrowTypeError("State must be a Buffer!");
	}

	if (node::Buffer::Length(obj) != sizeof(blake2_state)) {
		Nan::ThrowError("Corrupted state! (invalid size)");
	}

	return reinterpret_cast<blake2_state*>(node::Buffer::Data(obj));
}

uint8_t Uint8Value(const Local<Value>& obj, uint32_t max = UINT8_MAX) {
	if (!obj->IsNumber() || !obj->IsUint32()) {
		Nan::ThrowTypeError("Expected a number!");
	}

	uint32_t value = obj->Uint32Value();
	if (value > max) {
		Nan::ThrowRangeError("Number out of range!");
	}

	return value & 0xFF;
}

template<
	typename blake2_state,

	// methods
	int (*blake2_init)(blake2_state*, const uint8_t),
	int (*blake2_init_key)(blake2_state*, const uint8_t, const void*, const uint8_t),
	// TODO: init_param
	int (*blake2_update)(blake2_state*, const uint8_t*, uint64_t),
	int (*blake2_final)(blake2_state*, uint8_t*, uint8_t),

	// constants
	int BLOCKBYTES,
	int OUTBYTES,
	int KEYBYTES,
	int SALTBYTES,
	int PERSONALBYTES>
Local<Object> Wrap() {
	Local<Object> obj = New<Object>();

	// constants  TODO: readonly
	obj->Set(New<String>("BUFFER_SIZE").ToLocalChecked(), New<Number>(sizeof(blake2_state)));
	obj->Set(New<String>("BLOCKBYTES").ToLocalChecked(), New<Number>(BLOCKBYTES));
	obj->Set(New<String>("OUTBYTES").ToLocalChecked(), New<Number>(OUTBYTES));
	obj->Set(New<String>("KEYBYTES").ToLocalChecked(), New<Number>(KEYBYTES));
	obj->Set(New<String>("PERSONALBYTES").ToLocalChecked(), New<Number>(PERSONALBYTES));

	// methods
	Nan::SetMethod(obj, "init", init<blake2_state, blake2_init, OUTBYTES>);
	Nan::SetMethod(obj, "init_key", init_key<blake2_state, blake2_init_key, OUTBYTES, KEYBYTES>);
	Nan::SetMethod(obj, "update", update<blake2_state, blake2_update>);
	Nan::SetMethod(obj, "final", final<blake2_state, blake2_final, OUTBYTES>);

	return obj;
}

}
}

#endif
