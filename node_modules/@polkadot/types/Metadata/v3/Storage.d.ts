import { AnyNumber } from '../../types';
import Enum from '../../codec/Enum';
import Struct from '../../codec/Struct';
import Vector from '../../codec/Vector';
import Bytes from '../../primitive/Bytes';
import Text from '../../primitive/Text';
import Type from '../../primitive/Type';
import { MapType, PlainType, StorageFunctionModifier } from '../v2/Storage';
export { MapType, PlainType, StorageFunctionModifier };
export declare class DoubleMapType extends Struct {
    constructor(value?: any);
    /**
     * @description The mapped key as [[Type]]
     */
    readonly key1: Type;
    /**
     * @description The mapped key as [[Type]]
     */
    readonly key2: Type;
    /**
     * @description The hashing algorithm used to hash key2, as [[Text]]
     */
    readonly key2Hasher: Text;
    /**
     * @description The mapped key as [[Type]]
     */
    readonly value: Type;
}
export declare class StorageFunctionType extends Enum {
    constructor(value?: any, index?: number);
    /**
     * @description The value as a mapped value
     */
    readonly asDoubleMap: DoubleMapType;
    /**
     * @description The value as a mapped value
     */
    readonly asMap: MapType;
    /**
     * @description The value as a [[Type]] value
     */
    readonly asType: PlainType;
    /**
     * @description `true` if the storage entry is a doublemap
     */
    readonly isDoubleMap: boolean;
    /**
     * @description `true` if the storage entry is a map
     */
    readonly isMap: boolean;
    /**
     * @description `true` if the storage entry is a plain type
     */
    readonly isPlainType: boolean;
    /**
     * @description Returns the string representation of the value
     */
    toString(): string;
}
export declare type StorageFunctionMetadataValue = {
    name: string | Text;
    modifier: StorageFunctionModifier | AnyNumber;
    type: StorageFunctionType;
    fallback: Bytes;
    documentation: Vector<Text> | Array<string>;
};
/**
 * @name StorageFunctionMetadata
 * @description
 * The definition of a storage function
 */
export declare class StorageFunctionMetadata extends Struct {
    constructor(value?: StorageFunctionMetadataValue | Uint8Array);
    /**
     * @description The default value of the storage function
     * @deprecated Use `.fallback` instead.
     */
    readonly default: Bytes;
    /**
     * @description The [[Text]] documentation
     */
    readonly documentation: Vector<Text>;
    /**
     * @description The [[Text]] documentation
     * @deprecated Use `.documentation` instead.
     */
    readonly docs: Vector<Text>;
    /**
     * @description The [[Bytes]] fallback default
     */
    readonly fallback: Bytes;
    /**
     * @description The [[MetadataArgument]] for arguments
     */
    readonly modifier: StorageFunctionModifier;
    /**
     * @description The call name
     */
    readonly name: Text;
    /**
     * @description The [[StorageFunctionType]]
     */
    readonly type: StorageFunctionType;
}
