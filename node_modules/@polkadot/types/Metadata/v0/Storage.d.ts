import { AnyNumber } from '../../types';
import Enum from '../../codec/Enum';
import Struct from '../../codec/Struct';
import Vector from '../../codec/Vector';
import Bytes from '../../primitive/Bytes';
import Text from '../../primitive/Text';
import Type from '../../primitive/Type';
export declare class StorageFunctionModifier extends Enum {
    constructor(value?: any);
    /**
     * @description `true` if the storage entry is optional
     */
    readonly isOptional: boolean;
    toJSON(): any;
}
export declare class MapType extends Struct {
    private _isLinked;
    constructor(value?: any);
    /**
     * @description The mapped key as [[Type]]
     */
    readonly key: Type;
    /**
     * @description The mapped value as [[Type]]
     */
    readonly value: Type;
    /**
     * @description Is this an enumerable linked map
     */
    readonly isLinked: boolean;
}
export declare class PlainType extends Type {
}
export declare class StorageFunctionType extends Enum {
    constructor(value?: any, index?: number);
    /**
     * @description The value as a mapped value
     */
    readonly asMap: MapType;
    /**
     * @description The value as a [[Type]] value
     */
    readonly asType: PlainType;
    /**
     * @description `true` if the storage entry is a map
     */
    readonly isMap: boolean;
    /**
     * @description `true` if the storage entry is a plain type
     */
    readonly isPlainType: boolean;
    /**
     * @description Returns the string representation of the value
     */
    toString(): string;
}
export declare type StorageFunctionMetadataValue = {
    name: string | Text;
    modifier: StorageFunctionModifier | AnyNumber;
    type: StorageFunctionType;
    fallback: Bytes;
    documentation: Vector<Text> | Array<string>;
};
export declare class StorageFunctionMetadata extends Struct {
    constructor(value?: StorageFunctionMetadataValue | Uint8Array);
    /**
     * @description The default value of the storage function
     * @deprecated Use `.fallback` instead.
     */
    readonly default: Bytes;
    /**
     * @description The default value of the storage function
     */
    readonly fallback: Bytes;
    /**
     * @description The [[Text]] documentation
     */
    readonly documentation: Vector<Text>;
    /**
     * @description The [[Text]] documentation
     * @deprecated Use `.documentation` instead.
     */
    readonly docs: Vector<Text>;
    /**
     * @description The key name
     */
    readonly name: Text;
    /**
     * @description The modifier
     */
    readonly modifier: StorageFunctionModifier;
    /**
     * @description The [[StorageFunctionType]]
     */
    readonly type: StorageFunctionType;
}
export declare class StorageMetadata extends Struct {
    constructor(value?: any);
    /**
     * @description The [[StorageFunctionMetadata]] for the section
     */
    readonly functions: Vector<StorageFunctionMetadata>;
    /**
     * @description The section prefix
     */
    readonly prefix: Text;
}
