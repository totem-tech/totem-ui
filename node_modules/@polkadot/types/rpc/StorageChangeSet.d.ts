import { AnyU8a } from '../types';
import Struct from '../codec/Struct';
import Vector from '../codec/Vector';
import Hash from '../primitive/Hash';
import { KeyValueOption, KeyValueOptionValue } from '../type/KeyValue';
declare type StorageChangeSetValue = {
    block?: AnyU8a;
    changes?: Array<KeyValueOptionValue>;
};
/**
 * @name StorageChangeSet
 * @description
 * A set of storage changes. It contains the [[Block]] hash and
 * a list of the actual changes that took place as an array of
 * [[KeyValueOption]]
 */
export default class StorageChangeSet extends Struct {
    constructor(value?: StorageChangeSetValue | Uint8Array);
    /**
     * @description The applicable changes as [[KeyValueOption]]
     */
    readonly changes: Vector<KeyValueOption>;
    /**
     * @description The block [[Hash]]
     */
    readonly block: Hash;
}
export {};
