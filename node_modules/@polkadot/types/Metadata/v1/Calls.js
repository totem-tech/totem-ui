"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionMetadata = exports.FunctionArgumentMetadata = void 0;

var _Struct = _interopRequireDefault(require("../../codec/Struct"));

var _Vector = _interopRequireDefault(require("../../codec/Vector"));

var _Text = _interopRequireDefault(require("../../primitive/Text"));

var _Type = _interopRequireDefault(require("../../primitive/Type"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
class FunctionArgumentMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      type: _Type.default
    }, value);
  }
  /**
   * @description The argument name
   */


  get name() {
    return this.get('name');
  }
  /**
   * @description The [[Type]]
   */


  get type() {
    return this.get('type');
  }

}
/**
 * @name FunctionMetadata
 * @description
 * The definition of a call
 */


exports.FunctionArgumentMetadata = FunctionArgumentMetadata;

class FunctionMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      args: _Vector.default.with(FunctionArgumentMetadata),
      documentation: _Vector.default.with(_Text.default)
    }, value);
  }
  /**
   * @description The [[FunctionArgumentMetadata]] for arguments
   */


  get args() {
    return this.get('args');
  }
  /**
   * @description The [[Text]] documentation
   */


  get documentation() {
    return this.get('documentation');
  }
  /**
   * @description The [[Text]] documentation
   * @deprecated Use `.documentation` instead.
   */


  get docs() {
    return this.documentation;
  }
  /**
   * @description The call name
   */


  get name() {
    return this.get('name');
  }

}

exports.FunctionMetadata = FunctionMetadata;