"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _Compact = _interopRequireDefault(require("./Compact"));

var _utils = require("./utils");

var _AbstractArray = _interopRequireDefault(require("./AbstractArray"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const MAX_LENGTH = 32768;
/**
 * @name Vector
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */

class Vector extends _AbstractArray.default {
  constructor(Type) {
    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(...Vector.decodeVector(Type, value));
    this._Type = void 0;
    this._Type = Type;
  }

  static decodeVector(Type, value) {
    if (Array.isArray(value)) {
      return value.map((entry, index) => {
        try {
          return entry instanceof Type ? entry : new Type(entry);
        } catch (error) {
          console.error("Unable to decode Vector on index ".concat(index), error.message);
          throw error;
        }
      });
    }

    const u8a = (0, _util.u8aToU8a)(value);

    const [offset, length] = _Compact.default.decodeU8a(u8a);

    (0, _util.assert)(length.lten(MAX_LENGTH), "Vector length ".concat(length.toString(), " exceeds ").concat(MAX_LENGTH));
    return (0, _utils.decodeU8a)(u8a.subarray(offset), new Array(length.toNumber()).fill(Type));
  }

  static with(Type) {
    var _class, _temp;

    return _temp = _class = class extends Vector {
      constructor(value) {
        super(Type, value);
      }

    }, _class.Fallback = Type.Fallback ? Vector.with(Type.Fallback) : undefined, _temp;
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return this._Type.name;
  }
  /**
   * @description Finds the index of the value in the array
   */


  indexOf(_other) {
    // convert type first, this removes overhead from the eq
    const other = _other instanceof this._Type ? _other : new this._Type(_other);

    for (let i = 0; i < this.length; i++) {
      if (other.eq(this[i])) {
        return i;
      }
    }

    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return "Vec<".concat(new this._Type().toRawType(), ">");
  }

}

exports.default = Vector;