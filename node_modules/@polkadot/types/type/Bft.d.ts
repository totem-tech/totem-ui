import { AnyU8a } from '../types';
import Tuple from '../codec/Tuple';
import Hash from '../primitive/Hash';
import AuthorityId from './AuthorityId';
import Signature from './Signature';
export declare type BftAuthoritySignatureValue = [AnyU8a, AnyU8a];
/**
 * @name BftAuthoritySignature
 * @description
 * Represents a Bft Hash and Signature pairing, typically used in reporting
 * network behaviour.
 */
export declare class BftAuthoritySignature extends Tuple {
    constructor(value?: BftAuthoritySignatureValue | Uint8Array);
    /**
     * @description The wrapped [[AuthoriyId]]
     */
    readonly authorityId: AuthorityId;
    /**
     * @description The wrapped [[Signature]] value
     */
    readonly signature: Signature;
}
export declare type BftHashSignatureValue = [AnyU8a, AnyU8a];
/**
 * @name BftHashSignature
 * @description
 * Represents a Bft Hash and Signature pairing, typically used in reporting
 * network behaviour.
 */
export declare class BftHashSignature extends Tuple {
    constructor(value?: BftHashSignatureValue | Uint8Array);
    /**
     * @description The wrapped [[Hash]]
     */
    readonly hash: Hash;
    /**
     * @description The wrapped [[Signature]]
     */
    readonly signature: Signature;
}
