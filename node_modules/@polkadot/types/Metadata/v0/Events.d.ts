import Struct from '../../codec/Struct';
import Tuple from '../../codec/Tuple';
import Vector from '../../codec/Vector';
import Text from '../../primitive/Text';
import Type from '../../primitive/Type';
export declare class EventMetadata extends Struct {
    constructor(value?: any);
    /**
     * @description The arguments of [[Type]]
     */
    readonly args: Vector<Type>;
    /**
     * @description The arguments of [[Type]]
     * @deprecated Use `.args` instead
     */
    readonly arguments: Vector<Type>;
    /**
     * @description The [[Text]] documentation
     */
    readonly documentation: Vector<Text>;
    /**
     * @description The [[Text]] documentation
     * @deprecated Use `.documentation` instead.
     */
    readonly docs: Vector<Text>;
    /**
     * @description The name for the event
     */
    readonly name: Text;
}
export declare class OuterEventEventMetadata extends Tuple {
    constructor(value?: any);
    /**
     * @description The [[EventMetadata]]
     */
    readonly events: Vector<EventMetadata>;
    /**
     * @description The name of the section
     */
    readonly name: Text;
}
export declare class OuterEventMetadata extends Struct {
    constructor(value?: any);
    /**
     * @description The [[OuterEventEventMetadata]]
     */
    readonly events: Vector<OuterEventEventMetadata>;
    /**
     * @description The name of the event
     */
    readonly name: Text;
}
