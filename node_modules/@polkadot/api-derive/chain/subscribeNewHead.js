"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribeNewHead = subscribeNewHead;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _type = require("../type");

var _drr = require("../util/drr");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name subscribeNewHead
 * @returns An array containing the block header and the block author
 * @description An observable of the current block header and it's author
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.subscribeNewHead(({ author, blockNumber }) => {
 *   console.log(`block #${blockNumber} was authored by ${author}`);
 * });
 * ```
 */
function subscribeNewHead(api) {
  return () => api.rpc.chain.subscribeNewHead().pipe((0, _operators.filter)(header => header && !!header.blockNumber), (0, _operators.switchMap)(header => (0, _rxjs.combineLatest)([(0, _rxjs.of)(header), // theoretically we could combine at the first call with session.validators(), however
  // we make 100% sure we actually get the validators at a specific block so when these
  // change at an era boundary, we have the previous values to ensure our indexes are correct
  api.query.session ? api.query.session.validators.at(header.hash) : (0, _rxjs.of)([])])), (0, _operators.map)((_ref) => {
    let [header, validators] = _ref;
    return new _type.HeaderExtended(header, validators);
  }), (0, _drr.drr)());
}