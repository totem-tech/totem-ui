"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Bool = _interopRequireDefault(require("../primitive/Bool"));

var _U = _interopRequireDefault(require("../primitive/U32"));

var _Gas = _interopRequireDefault(require("./Gas"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Schedule
 * @description
 * Definition of the cost schedule and other parameterizations for wasm vm
 */
class Schedule extends _Struct.default {
  constructor(value) {
    super({
      version: _U.default,
      putCodePerByteCost: _Gas.default,
      growMemCost: _Gas.default,
      regularOpCost: _Gas.default,
      returnDataPerByteCost: _Gas.default,
      eventDataPerByteCost: _Gas.default,
      eventPerTopicCost: _Gas.default,
      eventBaseCost: _Gas.default,
      sandboxDataReadCost: _Gas.default,
      sandboxDataWriteCost: _Gas.default,
      maxEventTopics: _U.default,
      maxStackHeight: _U.default,
      maxMemoryPages: _U.default,
      enablePrintln: _Bool.default,
      maxSubjectLen: _U.default
    }, value);
  }
  /**
   * @description Whether the `ext_println` function is allowed to be used contracts. MUST only be enabled for `dev` chains, NOT for production chains
   */


  get enablePrintln() {
    return this.get('enablePrintln');
  }
  /**
   * @description Gas cost to deposit an event; the base.
   */


  get eventBaseCost() {
    return this.get('eventBaseCost');
  }
  /**
   * @description Gas cost to deposit an event; the per-byte portion.
   */


  get eventDataPerByteCost() {
    return this.get('eventDataPerByteCost');
  }
  /**
   * @description Gas cost to deposit an event; the cost per topic.
   */


  get eventPerTopicCost() {
    return this.get('eventPerTopicCost');
  }
  /**
   * @description Gas cost of a growing memory by single page.
   */


  get growMemCost() {
    return this.get('growMemCost');
  }
  /**
   * @description The maximum number of topics supported by an event.
   */


  get maxEventTopics() {
    return this.get('maxEventTopics');
  }
  /**
   * @description What is the maximal memory pages amount is allowed to have for a contract.
   */


  get maxMemoryPages() {
    return this.get('maxMemoryPages');
  }
  /**
   * @description How tall the stack is allowed to grow?
   */


  get maxStackHeight() {
    return this.get('maxStackHeight');
  }
  /**
   * @description The maximum length of a subject used for PRNG generation.
   */


  get maxSubjectLen() {
    return this.get('maxSubjectLen');
  }
  /**
   * @description Cost of putting a byte of code into the storage.
   */


  get putCodePerByteCost() {
    return this.get('putCodePerByteCost');
  }
  /**
   * @description Gas cost of a regular operation.
   */


  get regularOpCost() {
    return this.get('regularOpCost');
  }
  /**
   * @description Gas cost per one byte returned.
   */


  get returnDataPerByteCost() {
    return this.get('returnDataPerByteCost');
  }
  /**
   * @description Gas cost per one byte read from the sandbox memory.
   */


  get sandboxDataReadCost() {
    return this.get('sandboxDataReadCost');
  }
  /**
   * @description Gas cost per one byte written to the sandbox memory.
   */


  get sandboxDataWriteCost() {
    return this.get('sandboxDataWriteCost');
  }
  /**
   * @description Version of the schedule.
   */


  get version() {
    return this.get('version');
  }

}

exports.default = Schedule;