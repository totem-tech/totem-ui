"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = decorateDerive;

var accounts = _interopRequireWildcard(require("./accounts"));

var balances = _interopRequireWildcard(require("./balances"));

var chain = _interopRequireWildcard(require("./chain"));

var democracy = _interopRequireWildcard(require("./democracy"));

var session = _interopRequireWildcard(require("./session"));

var staking = _interopRequireWildcard(require("./staking"));

var _type = require("./type");

Object.keys(_type).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _type[key];
    }
  });
});
// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Put all derived functions in an object, for easier Object.keys()-ing.
const functions = {
  accounts,
  balances,
  chain,
  democracy,
  session,
  staking
};
/**
 * T represents the section here (chain, balances...), and P represents
 * the function name (bestNumber, sessionProgress...).
 */

function injectFunctions(api, derive, functions) {
  Object.entries(functions).forEach((_ref) => {
    let [sectionName, section] = _ref;
    const sectionKey = sectionName;

    if (!derive[sectionKey]) {
      derive[sectionKey] = {};
    }

    const result = derive[sectionKey];
    Object.entries(section).forEach((_ref2) => {
      let [methodName, method] = _ref2;
      // @ts-ignore No idea how to make this work...
      result[methodName] = method(api);
    });
  });
  return derive;
}

function decorateDerive(api) {
  let custom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const derive = {};
  injectFunctions(api, derive, functions);
  injectFunctions(api, derive, custom);
  return derive;
}