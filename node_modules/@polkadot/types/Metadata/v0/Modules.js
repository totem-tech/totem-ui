"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RuntimeModuleMetadata = exports.ModuleMetadata = exports.CallMetadata = exports.FunctionMetadata = exports.FunctionArgumentMetadata = void 0;

var _Option = _interopRequireDefault(require("../../codec/Option"));

var _Struct = _interopRequireDefault(require("../../codec/Struct"));

var _Vector = _interopRequireDefault(require("../../codec/Vector"));

var _Text = _interopRequireDefault(require("../../primitive/Text"));

var _Type = _interopRequireDefault(require("../../primitive/Type"));

var _U = _interopRequireDefault(require("../../primitive/U16"));

var _Storage = require("./Storage");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
class FunctionArgumentMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      type: _Type.default
    }, value);
  }
  /**
   * @description The argument name
   */


  get name() {
    return this.get('name');
  }
  /**
   * @description The [[Type]]
   */


  get type() {
    return this.get('type');
  }

}

exports.FunctionArgumentMetadata = FunctionArgumentMetadata;

class FunctionMetadata extends _Struct.default {
  constructor(value) {
    super({
      id: _U.default,
      name: _Text.default,
      args: _Vector.default.with(FunctionArgumentMetadata),
      documentation: _Vector.default.with(_Text.default)
    }, value);
  }
  /**
   * @description The arguments of [[Type]]
   */


  get args() {
    return this.get('args');
  }
  /**
   * @description The [[FunctionArgumentMetadata]] for arguments
   * @deprecated Use `.args` instead
   */


  get arguments() {
    return this.get('arguments');
  }
  /**
   * @description The [[Text]] documentation
   */


  get documentation() {
    return this.get('documentation');
  }
  /**
   * @description The [[Text]] documentation
   * @deprecated Use `.documentation` instead.
   */


  get docs() {
    return this.documentation;
  }
  /**
   * @description The `[sectionIndex, methodIndex]` call id
   */


  get id() {
    return this.get('id');
  }
  /**
   * @description The call name
   */


  get name() {
    return this.get('name');
  }

}

exports.FunctionMetadata = FunctionMetadata;

class CallMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      functions: _Vector.default.with(FunctionMetadata)
    }, value);
  }
  /**
   * @description The functions available as [[FunctionMetadata]]
   */


  get functions() {
    return this.get('functions');
  }
  /**
   * @description The section name
   */


  get name() {
    return this.get('name');
  }

}

exports.CallMetadata = CallMetadata;

class ModuleMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      call: CallMetadata
    }, value);
  }
  /**
   * @description The calls as [[FunctionMetadata]]
   */


  get call() {
    return this.get('call');
  }
  /**
   * @description The name
   */


  get name() {
    return this.get('name');
  }

}

exports.ModuleMetadata = ModuleMetadata;

class RuntimeModuleMetadata extends _Struct.default {
  constructor(value) {
    super({
      prefix: _Text.default,
      module: ModuleMetadata,
      storage: _Option.default.with(_Storage.StorageMetadata)
    }, value);
  }
  /**
   * @description The [[ModuleMetadata]]
   */


  get module() {
    return this.get('module');
  }
  /**
   * @description The prefix
   */


  get prefix() {
    return this.get('prefix');
  }
  /**
   * @description The optional [[StorageMetadata]]
   */


  get storage() {
    return this.get('storage');
  }

}

exports.RuntimeModuleMetadata = RuntimeModuleMetadata;