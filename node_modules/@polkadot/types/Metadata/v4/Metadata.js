"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModuleMetadata = void 0;

var _Option = _interopRequireDefault(require("../../codec/Option"));

var _Struct = _interopRequireDefault(require("../../codec/Struct"));

var _Vector = _interopRequireDefault(require("../../codec/Vector"));

var _Text = _interopRequireDefault(require("../../primitive/Text"));

var _util = require("../util");

var _Calls = require("./Calls");

var _Events = require("./Events");

var _Storage = require("./Storage");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name ModuleMetadata
 * @description
 * The definition of a module in the system
 */
class ModuleMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      prefix: _Text.default,
      storage: _Option.default.with(_Vector.default.with(_Storage.StorageFunctionMetadata)),
      calls: _Option.default.with(_Vector.default.with(_Calls.FunctionMetadata)),
      events: _Option.default.with(_Vector.default.with(_Events.EventMetadata))
    }, value);
  }
  /**
   * @description the module calls
   */


  get calls() {
    return this.get('calls');
  }
  /**
   * @description the module events
   */


  get events() {
    return this.get('events');
  }
  /**
   * @description the module name
   */


  get name() {
    return this.get('name');
  }
  /**
   * @description the module prefix
   */


  get prefix() {
    return this.get('prefix');
  }
  /**
   * @description the associated module storage
   */


  get storage() {
    return this.get('storage');
  }

}
/**
 * @name MetadataV4
 * @description
 * The runtime metadata as a decoded structure
 */


exports.ModuleMetadata = ModuleMetadata;

class MetadataV4 extends _Struct.default {
  constructor(value) {
    super({
      modules: _Vector.default.with(ModuleMetadata)
    }, value);
  }
  /**
   * @description The associated modules for this structure
   */


  get modules() {
    return this.get('modules');
  }

  get callNames() {
    return this.modules.map(mod => mod.calls.isNone ? [] : mod.calls.unwrap().map(fn => fn.args.map(arg => arg.type.toString())));
  }

  get eventNames() {
    return this.modules.map(mod => mod.events.isNone ? [] : mod.events.unwrap().map(event => event.args.map(arg => arg.toString())));
  }

  get storageNames() {
    return this.modules.map(mod => mod.storage.isNone ? [] : mod.storage.unwrap().map(fn => {
      if (fn.type.isMap) {
        return [fn.type.asMap.key.toString(), fn.type.asMap.value.toString()];
      } else if (fn.type.isDoubleMap) {
        return [fn.type.asDoubleMap.key1.toString(), fn.type.asDoubleMap.key2.toString(), fn.type.asDoubleMap.value.toString()];
      } else {
        return [fn.type.asType.toString()];
      }
    }));
  }
  /**
   * @description Helper to retrieve a list of all type that are found, sorted and de-deuplicated
   */


  getUniqTypes(throwError) {
    const types = (0, _util.flattenUniq)([this.callNames, this.eventNames, this.storageNames]);
    (0, _util.validateTypes)(types, throwError);
    return types;
  }

}

exports.default = MetadataV4;