import { MetadataInterface } from '../types';
import Option from '../../codec/Option';
import Struct from '../../codec/Struct';
import Vector from '../../codec/Vector';
import Text from '../../primitive/Text';
import { FunctionMetadata } from './Calls';
import { EventMetadata } from './Events';
import { StorageFunctionMetadata } from './Storage';
/**
 * @name ModuleMetadata
 * @description
 * The definition of a module in the system
 */
export declare class ModuleMetadata extends Struct {
    constructor(value?: any);
    /**
     * @description the module calls
     */
    readonly calls: Option<Vector<FunctionMetadata>>;
    /**
     * @description the module events
     */
    readonly events: Option<Vector<EventMetadata>>;
    /**
     * @description the module name
     */
    readonly name: Text;
    /**
     * @description the module prefix
     */
    readonly prefix: Text;
    /**
     * @description the associated module storage
     */
    readonly storage: Option<Vector<StorageFunctionMetadata>>;
}
/**
 * @name MetadataV3
 * @description
 * The runtime metadata as a decoded structure
 */
export default class MetadataV3 extends Struct implements MetadataInterface<ModuleMetadata> {
    constructor(value?: any);
    /**
     * @description The associated modules for this structure
     */
    readonly modules: Vector<ModuleMetadata>;
    private readonly callNames;
    private readonly eventNames;
    private readonly storageNames;
    /**
     * @description Helper to retrieve a list of all type that are found, sorted and de-deuplicated
     */
    getUniqTypes(throwError: boolean): Array<string>;
}
