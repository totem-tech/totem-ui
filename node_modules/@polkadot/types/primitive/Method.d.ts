import { AnyU8a, ArgsDef, Codec, IMethod } from '../types';
import Struct from '../codec/Struct';
import U8aFixed from '../codec/U8aFixed';
import { FunctionMetadata as FunctionMetadataV5, FunctionArgumentMetadata } from '../Metadata/v5/Calls';
export interface MethodFunction {
    (...args: any[]): Method;
    callIndex: Uint8Array;
    meta: FunctionMetadataV5;
    method: string;
    section: string;
    toJSON: () => any;
}
export interface Methods {
    [key: string]: MethodFunction;
}
export interface ModulesWithMethods {
    [key: string]: Methods;
}
/**
 * @name MethodIndex
 * @description
 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
 */
export declare class MethodIndex extends U8aFixed {
    constructor(value?: AnyU8a);
}
/**
 * @name Method
 * @description
 * Extrinsic function descriptor, as defined in
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 */
export default class Method extends Struct implements IMethod {
    protected _meta: FunctionMetadataV5;
    constructor(value: any, meta?: FunctionMetadataV5);
    /**
     * Decode input to pass into constructor.
     *
     * @param value - Value to decode, one of:
     * - hex
     * - Uint8Array
     * - {@see DecodeMethodInput}
     * @param _meta - Metadata to use, so that `injectMethods` lookup is not
     * necessary.
     */
    private static decodeMethod;
    static filterOrigin(meta?: FunctionMetadataV5): Array<FunctionArgumentMetadata>;
    static findFunction(callIndex: Uint8Array): MethodFunction;
    /**
     * Get a mapping of `argument name -> argument type` for the function, from
     * its metadata.
     *
     * @param meta - The function metadata used to get the definition.
     */
    private static getArgsDef;
    static injectMethods(moduleMethods: ModulesWithMethods): void;
    /**
     * @description The arguments for the function call
     */
    readonly args: Array<Codec>;
    /**
     * @description Thge argument defintions
     */
    readonly argsDef: ArgsDef;
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */
    readonly callIndex: Uint8Array;
    /**
     * @description The encoded data
     */
    readonly data: Uint8Array;
    /**
     * @description `true` if the `Origin` type is on the method (extrinsic method)
     */
    readonly hasOrigin: boolean;
    /**
     * @description The [[FunctionMetadata]]
     */
    readonly meta: FunctionMetadataV5;
    /**
     * @description Returns the name of the method
     */
    readonly methodName: string;
    /**
     * @description Returns the module containing the method
     */
    readonly sectionName: string;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
}
