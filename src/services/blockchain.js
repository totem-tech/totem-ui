import { Bond } from 'oo7'
import { addCodecTransform, hexToBytes, calls, post, runtime, ss58Decode } from 'oo7-substrate'
import { isBond, isStr } from '../components/utils'

addCodecTransform('ProjectHash', 'Hash')

// addNewProject registers a hash against a wallet into the blockchain
//
// Params:
// @address string/Bond
// @hash    string: an unique hash generated by using project name, owner address and description
//
// Returns Bond : expected values from returned bond =>
//              1. {signing: true/false}
//              2. {sending: true/false}
//              3. 'ready'
//              4. {finalized: 'TXID'}
//              5. {failed: {code: xxx, message: 'error message'}}
export const addNewProject = (address, hash) => {
    address = isBond(address) ? address : new Bond().defaultTo(address)
    hash = isBond(hash) ? hash : new Bond().defaultTo(hash)
    return post({
        sender: address,
        call: calls.projects.addNewProject(hash),
        compact: false,
        longevity: true
    })
}

// ownerProjectsList retrieves a list of project hashes owned by @address
//
// Returns Bond
export const ownerProjectsList = address => runtime.projects.ownerProjectsList(ss58Decode(address))


export default {
    addNewProject,
    ownerProjectsList
}