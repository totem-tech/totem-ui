"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _createType = _interopRequireDefault(require("../codec/createType"));

var _EventRecord = _interopRequireDefault(require("../json/EventRecord.001.json"));

var _EventRecord2 = _interopRequireDefault(require("../json/EventRecord.002.json"));

var _EventRecord3 = _interopRequireDefault(require("../json/EventRecord.003.json"));

var _Metadata = _interopRequireDefault(require("../Metadata"));

var _static = _interopRequireDefault(require("../Metadata/v0/static"));

var _static2 = _interopRequireDefault(require("../Metadata/static"));

var _AccountId = _interopRequireDefault(require("./AccountId"));

var _Event = _interopRequireDefault(require("./Event"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('EventRecord', () => {
  describe('v0', () => {
    beforeEach(() => {
      _Event.default.injectMetadata(new _Metadata.default(_static.default));
    });
    it('decodes correctly', () => {
      const records = (0, _createType.default)('Vec<EventRecord>', _EventRecord.default.params.result.changes[0][1]);
      const er = records[0];
      expect(er.phase.type).toEqual('ApplyExtrinsic');
    }); // FIXME skipping this one, need an actual updated sample for the actual new types

    it.skip('decodes more complex events', () => {
      const records = (0, _createType.default)('Vec<EventRecord>', _EventRecord2.default.params.result.changes[0][1]);
      expect(records).toHaveLength(4);
      const er = records[2];
      expect(er.event.data.toArray().map(v => v.toString())).toEqual([new _AccountId.default('0xd2de7394ae047a5502ad9adb9cc69ff6fe484033bfce874d775da947487cd832').toString(), new _AccountId.default('0x37e027d776cd005c12bcf6722421374a9037167a0ceaf918f341c4ad68d54e59').toString(), '1000', '0']);
    });
  });
  describe.skip('v1', () => {
    beforeEach(() => {
      _Event.default.injectMetadata(new _Metadata.default(_static2.default));
    });
    it('decodes correctly', () => {
      const records = (0, _createType.default)('Vec<EventRecord>', _EventRecord3.default.params.result.changes[0][1]);
      const er = records[0];
      expect(er.phase.type).toEqual('ApplyExtrinsic');
    });
  });
});