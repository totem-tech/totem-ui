import { AnyU8a } from '../types';
import Struct from '../codec/Struct';
import Hash from '../primitive/Hash';
import Extrinsics from '../type/Extrinsics';
import Header, { HeaderValue } from './Header';
export declare type BlockValue = {
    extrinsics?: Array<AnyU8a>;
    header?: HeaderValue;
};
/**
 * @name Block
 * @description
 * A block encoded with header and extrinsics
 */
export default class Block extends Struct {
    constructor(value?: BlockValue | Uint8Array);
    /**
     * @description Encodes a content [[Hash]] for the block
     */
    readonly contentHash: Hash;
    /**
     * @description The [[Extrinsics]] contained in the block
     */
    readonly extrinsics: Extrinsics;
    /**
     * @description Block/header [[Hash]]
     */
    readonly hash: Hash;
    /**
     * @description The [[Header]] of the block
     */
    readonly header: Header;
}
