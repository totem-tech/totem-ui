"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Compact = _interopRequireDefault(require("../codec/Compact"));

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Method = _interopRequireDefault(require("../primitive/Method"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _ExtrinsicSignature = _interopRequireDefault(require("./ExtrinsicSignature"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Extrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
class Extrinsic extends _Struct.default {
  constructor(value) {
    super({
      signature: _ExtrinsicSignature.default,
      method: _Method.default
    }, Extrinsic.decodeExtrinsic(value));
  }

  static decodeExtrinsic() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();

    if (Array.isArray(value) || (0, _util.isHex)(value)) {
      // Instead of the block below, it should simply be:
      // return Extrinsic.decodeExtrinsic(hexToU8a(value as string));
      const u8a = (0, _util.u8aToU8a)(value); // HACK 11 Jan 2019 - before https://github.com/paritytech/substrate/pull/1388
      // extrinsics didn't have the length, cater for both approaches

      const [offset, length] = _Compact.default.decodeU8a(u8a);

      const withPrefix = u8a.length === offset + length.toNumber();
      return Extrinsic.decodeExtrinsic(withPrefix ? u8a : _Compact.default.addLengthPrefix(u8a));
    } else if ((0, _util.isU8a)(value)) {
      if (!value.length) {
        return new Uint8Array();
      }

      const [offset, length] = _Compact.default.decodeU8a(value);

      const total = offset + length.toNumber();
      (0, _util.assert)(total <= value.length, "Extrinsic: required length less than remainder, expected at least ".concat(total, ", found ").concat(value.length));
      return value.subarray(offset, total);
    } else if (value instanceof _Method.default) {
      return {
        method: value
      };
    }

    return value;
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Method]]
   */


  get args() {
    return this.method.args;
  }
  /**
   * @description Thge argument defintions, compatible with [[Method]]
   */


  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Method
   */


  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Method
   */


  get data() {
    return this.method.data;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    const length = this.length;
    return length + _Compact.default.encodeU8a(length).length;
  }
  /**
   * @description Convernience function, encodes the extrinsic and returns the actual hash
   */


  get hash() {
    return new _Hash.default((0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));
  }
  /**
   * @description `true` is method has `Origin` argument (compatibility with [[Method]])
   */


  get hasOrigin() {
    return this.method.hasOrigin;
  }
  /**
   * @description `true` id the extrinsic is signed
   */


  get isSigned() {
    return this.signature.isSigned;
  }
  /**
   * @description The length of the encoded value
   */


  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadata]] that describes the extrinsic
   */


  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Method]] this extrinsic wraps
   */


  get method() {
    return this.get('method');
  }
  /**
   * @description The [[ExtrinsicSignature]]
   */


  get signature() {
    return this.get('signature');
  }
  /**
   * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)
   */


  addSignature(signer, signature, nonce, era) {
    this.signature.addSignature(signer, signature, nonce, era);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this.signature.sign(this.method, account, options);
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    // We are treating this in the same way we do a primitive, this is known
    return 'Extrinsic';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = super.toU8a();
    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);
  }

}

exports.default = Extrinsic;