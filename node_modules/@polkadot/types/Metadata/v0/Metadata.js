"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _Compact = _interopRequireDefault(require("../../codec/Compact"));

var _Struct = _interopRequireDefault(require("../../codec/Struct"));

var _Vector = _interopRequireDefault(require("../../codec/Vector"));

var _util2 = require("../util");

var _Calls = require("./Calls");

var _Events = require("./Events");

var _Modules = require("./Modules");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Decodes the runtime metadata as passed through from the `state_getMetadata` call.

/**
 * @name MetadataV0
 * @description
 * The runtime metadata as a decoded structure
 */
class MetadataV0 extends _Struct.default {
  constructor(value) {
    super({
      outerEvent: _Events.OuterEventMetadata,
      modules: _Vector.default.with(_Modules.RuntimeModuleMetadata),
      outerDispatch: _Calls.OuterDispatchMetadata
    }, MetadataV0.decodeMetadata(value));
  }

  static decodeMetadata(value) {
    if ((0, _util.isHex)(value)) {
      // We receive this as an hex in the JSON output from the Node.
      // Convert to u8a and use the U8a version to do the actual parsing.
      return MetadataV0.decodeMetadata((0, _util.hexToU8a)(value));
    } else if ((0, _util.isU8a)(value)) {
      // HACK 13 Oct 2018 - For current running BBQ nodes, Metadata is not properly
      // encoded, it does not have a length prefix. For latest substrate master, it
      // is properly encoded. Here we pull the prefix, check it agianst the length -
      // if matches, then we have the length, otherwise we assume it is an older node
      // and use the whole buffer
      const [offset, length] = _Compact.default.decodeU8a(value);

      return value.length === offset + length.toNumber() ? value.subarray(offset) : value;
    } // Decode as normal struct


    return value;
  }
  /**
   * @description Wrapped [[OuterDispatchCall]]
   */


  get calls() {
    return this.get('outerDispatch').calls;
  }
  /**
   * @description Wrapped [[OuterEventEventMetadata]]
   */


  get events() {
    return this.get('outerEvent').events;
  }
  /**
   * @description Wrapped [[RuntimeModuleMetadata]]
   */


  get modules() {
    return this.get('modules');
  }

  get argNames() {
    return this.modules.map(modul => modul.module.call.functions.map(fn => fn.args.map(argument => argument.type.toString())));
  }

  get eventNames() {
    return this.events.map(modul => modul.events.map(event => event.args.map(argument => argument.toString())));
  }

  get storageNames() {
    return this.modules.map(modul => modul.storage.isSome ? modul.storage.unwrap().functions.map(fn => fn.type.isMap ? [fn.type.asMap.key.toString(), fn.type.asMap.value.toString()] : [fn.type.asType.toString()]) : []);
  }
  /**
   * @description Helper to retrieve a list of all type that are found, sorted and de-deuplicated
   */


  getUniqTypes(throwError) {
    const types = (0, _util2.flattenUniq)([this.argNames, this.eventNames, this.storageNames]);
    (0, _util2.validateTypes)(types, throwError);
    return types;
  }

}

exports.default = MetadataV0;