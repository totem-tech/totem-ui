import { Observable } from 'rxjs';
import { ApiInterface$Rx } from '@polkadot/api/types';
import * as accounts from './accounts';
import * as balances from './balances';
import * as chain from './chain';
import * as contract from './contract';
import * as democracy from './democracy';
import * as session from './session';
import * as staking from './staking';
export * from './type';
/**
 * T represents the section here (chain, balances...), and P represents
 * the function name (bestNumber, sessionProgress...).
 */
declare type ReturnTypes<T extends Record<keyof T, (...args: any[]) => any>> = {
    [P in keyof T]: ReturnType<T[P]>;
};
export interface DeriveCustomMethod {
    (api: ApiInterface$Rx): (...args: Array<any>) => Observable<any>;
}
export interface DeriveCustom {
    [index: string]: {
        [index: string]: DeriveCustomMethod;
    };
}
export interface Derive {
    accounts: ReturnTypes<typeof accounts>;
    balances: ReturnTypes<typeof balances>;
    chain: ReturnTypes<typeof chain>;
    contract: ReturnTypes<typeof contract>;
    democracy: ReturnTypes<typeof democracy>;
    session: ReturnTypes<typeof session>;
    staking: ReturnTypes<typeof staking>;
}
export default function decorateDerive(api: ApiInterface$Rx, custom?: DeriveCustom): Derive;
