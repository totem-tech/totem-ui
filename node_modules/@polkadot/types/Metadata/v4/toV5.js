"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toV5;

var _codec = require("../../codec");

var _StorageHasher = _interopRequireDefault(require("../../primitive/StorageHasher"));

var _v = _interopRequireDefault(require("../v5"));

var _Storage = require("../v5/Storage");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * Convert V4 StorageFunction to V5 StorageFunction
 */
function toV5StorageFunction(storageFn) {
  const {
    documentation,
    fallback,
    modifier,
    name,
    type
  } = storageFn;

  function toStorageHasher(text) {
    switch (text.toString()) {
      case 'blake2_128':
        return new _StorageHasher.default('Blake2_128');

      case 'blake2_256':
        return new _StorageHasher.default('Blake2_256');

      case 'twox_128':
        return new _StorageHasher.default('Twox128');

      case 'twox_256':
        return new _StorageHasher.default('Twox256');

      case 'twox_64_concat':
        return new _StorageHasher.default('Twox64Concat');

      default:
        throw new Error("Invalid Storage hasher: ".concat(text.toString()));
    }
  }

  const [newType, index] = type.isPlainType ? [type, 0] : type.isMap ? [type.asMap, 1] : [new _Storage.DoubleMapType({
    hasher: type.asDoubleMap.hasher,
    key1: type.asDoubleMap.key1,
    key2: type.asDoubleMap.key2,
    value: type.asDoubleMap.value,
    key2Hasher: toStorageHasher(type.asDoubleMap.key2Hasher)
  }), 2];
  return new _Storage.StorageFunctionMetadata({
    name: name,
    modifier: modifier,
    type: new _Storage.StorageFunctionType(newType, index),
    fallback: fallback,
    documentation: documentation
  });
}
/**
 * Convert from MetadataV4 to MetadataV5
 * See https://github.com/paritytech/substrate/pull/2836/files for details
 */


function toV5(metadataV4) {
  return new _v.default({
    modules: metadataV4.modules.map(modul => {
      return {
        name: modul.name,
        prefix: modul.prefix,
        storage: modul.storage.isSome ? new _codec.Option(_codec.Vector.with(_Storage.StorageFunctionMetadata), modul.storage.unwrap().map(toV5StorageFunction)) : undefined,
        calls: modul.calls,
        events: modul.events
      };
    })
  });
}