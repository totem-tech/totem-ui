import Enum from '../codec/Enum';
import Vector from '../codec/Vector';
import Hash from '../primitive/Hash';
import Null from '../primitive/Null';
import Text from '../primitive/Text';
declare const Broadcast_base: import("../types").Constructor<Vector<Text>>;
/**
 * @name Broadcast
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been boradcast to peers
 */
export declare class Broadcast extends Broadcast_base {
}
/**
 * @name Dropped
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been dropped
 */
export declare class Dropped extends Null {
}
/**
 * @name Finalized
 * @description
 * An [[ExtrinsicStatus] indicating that the [[Extrinsic]]] has been finalized and included
 */
export declare class Finalized extends Hash {
}
/**
 * @name Future
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been added to the future queue
 */
export declare class Future extends Null {
}
/**
 * @name Ready
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been added to the ready queue
 */
export declare class Ready extends Null {
}
/**
 * @name Invalid
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] is invalid
 */
export declare class Invalid extends Null {
}
/**
 * @name Usurped
 * @description
 * An [[ExtrinsicStatus]] indicating that the [[Extrinsic]] has been usurped
 */
export declare class Usurped extends Hash {
}
/**
 * @name ExtrinsicStatus
 * @description
 * An [[Enum]] that indicates the status of the [[Extrinsic]] as been submitted
 */
export default class ExtrinsicStatus extends Enum {
    constructor(value: any, index?: number);
    /**
     * @description Returns the item as a [[Broadcast]]
     */
    readonly asBroadcast: Broadcast;
    /**
     * @description Returns the item as a [[Dropped]]
     */
    readonly asDropped: Dropped;
    /**
     * @description Returns the item as a [[Finalized]]
     */
    readonly asFinalized: Finalized;
    /**
     * @description Returns the item as a [[Future]]
     */
    readonly asFuture: Future;
    /**
     * @description Returns the item as a [[Invalid]]
     */
    readonly asInvalid: Invalid;
    /**
     * @description Returns the item as a [[Ready]]
     */
    readonly asReady: Ready;
    /**
     * @description Returns the item as a [[Usurped]]
     */
    readonly asUsurped: Usurped;
    /**
     * @description Returns true if the status is boadcast
     */
    readonly isBroadcast: boolean;
    /**
     * @description Returns true if the status is dropped
     */
    readonly isDropped: boolean;
    /**
     * @description Returns true if the status is finalized
     */
    readonly isFinalized: boolean;
    /**
     * @description Returns true if the status is future
     */
    readonly isFuture: boolean;
    /**
     * @description Returns true if the status is invalid
     */
    readonly isInvalid: boolean;
    /**
     * @description Returns true if the status is eady
     */
    readonly isReady: boolean;
    /**
     * @description Returns true if the status is usurped
     */
    readonly isUsurped: boolean;
}
export {};
