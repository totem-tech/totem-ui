import { AnyNumber, IExtrinsicSignature, IKeyringPair, SignatureOptions } from '../types';
import Struct from '../codec/Struct';
import Address from '../primitive/Address';
import Method from '../primitive/Method';
import ExtrinsicEra from './ExtrinsicEra';
import Nonce from './NonceCompact';
import Signature from './Signature';
export declare const IMMORTAL_ERA: Uint8Array;
/**
 * @name ExtrinsicSignature
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */
export default class ExtrinsicSignature extends Struct implements IExtrinsicSignature {
    constructor(value?: Uint8Array);
    static decodeExtrinsicSignature(value?: Uint8Array): object | Uint8Array;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description `true` if the signature is valid
     */
    readonly isSigned: boolean;
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */
    /**
    * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
    */
    era: ExtrinsicEra;
    /**
     * @description The [[Nonce]] for the signature
     */
    readonly nonce: Nonce;
    /**
     * @description The actuall [[Signature]] hash
     */
    readonly signature: Signature;
    /**
     * @description The [[Address]] that signed
     */
    readonly signer: Address;
    /**
     * @description The encoded version for the signature
     */
    readonly version: number;
    private injectSignature;
    /**
     * @description Adds a raw signature
     */
    addSignature(_signer: Address | Uint8Array | string, _signature: Uint8Array | string, _nonce: AnyNumber, _era?: Uint8Array | ExtrinsicEra): ExtrinsicSignature;
    /**
     * @description Generate a payload and pplies the signature from a keypair
     */
    sign(method: Method, account: IKeyringPair, { blockHash, era, nonce, version }: SignatureOptions): ExtrinsicSignature;
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare?: boolean): Uint8Array;
}
