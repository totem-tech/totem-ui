"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PlainType", {
  enumerable: true,
  get: function get() {
    return _Storage.PlainType;
  }
});
Object.defineProperty(exports, "StorageFunctionModifier", {
  enumerable: true,
  get: function get() {
    return _Storage.StorageFunctionModifier;
  }
});
exports.StorageFunctionMetadata = exports.StorageFunctionType = exports.MapType = void 0;

var _util = require("@polkadot/util");

var _Enum = _interopRequireDefault(require("../../codec/Enum"));

var _Struct = _interopRequireDefault(require("../../codec/Struct"));

var _Vector = _interopRequireDefault(require("../../codec/Vector"));

var _Bool = _interopRequireDefault(require("../../primitive/Bool"));

var _Bytes = _interopRequireDefault(require("../../primitive/Bytes"));

var _Text = _interopRequireDefault(require("../../primitive/Text"));

var _Type = _interopRequireDefault(require("../../primitive/Type"));

var _Storage = require("../v1/Storage");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Re-export classes that haven't changed between V1 and V2
class MapType extends _Struct.default {
  constructor(value) {
    super({
      key: _Type.default,
      value: _Type.default,
      isLinked: _Bool.default
    }, value);
  }
  /**
   * @description The mapped key as [[Type]]
   */


  get key() {
    return this.get('key');
  }
  /**
   * @description The mapped value as [[Type]]
   */


  get value() {
    return this.get('value');
  }
  /**
   * @description Is this an enumerable linked map
   */


  get isLinked() {
    return this.get('isLinked').valueOf();
  }

}

exports.MapType = MapType;

class StorageFunctionType extends _Enum.default {
  constructor(value, index) {
    super({
      PlainType: _Storage.PlainType,
      MapType
    }, value, index);
  }
  /**
   * @description The value as a mapped value
   */


  get asMap() {
    (0, _util.assert)(this.isMap, "Cannot convert '".concat(this.type, "' via asMap"));
    return this.value;
  }
  /**
   * @description The value as a [[Type]] value
   */


  get asType() {
    (0, _util.assert)(this.isPlainType, "Cannot convert '".concat(this.type, "' via asType"));
    return this.value;
  }
  /**
   * @description `true` if the storage entry is a map
   */


  get isMap() {
    return this.toNumber() === 1;
  }
  /**
   * @description `true` if the storage entry is a plain type
   */


  get isPlainType() {
    return this.toNumber() === 0;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    if (this.isMap) {
      if (this.asMap.isLinked) {
        return "(".concat(this.asMap.value.toString(), ", Linkage<").concat(this.asMap.key.toString(), ">)");
      }

      return this.asMap.value.toString();
    }

    return this.asType.toString();
  }

}

exports.StorageFunctionType = StorageFunctionType;

/**
 * @name ModuleMetadata
 * @description
 * The definition of a storage function
 */
class StorageFunctionMetadata extends _Struct.default {
  constructor(value) {
    super({
      name: _Text.default,
      modifier: _Storage.StorageFunctionModifier,
      type: StorageFunctionType,
      fallback: _Bytes.default,
      documentation: _Vector.default.with(_Text.default)
    }, value);
  }
  /**
   * @description The default value of the storage function
   * @deprecated Use `.fallback` instead.
   */


  get default() {
    return this.fallback;
  }
  /**
   * @description The [[Text]] documentation
   */


  get documentation() {
    return this.get('documentation');
  }
  /**
   * @description The [[Text]] documentation
   * @deprecated Use `.documentation` instead.
   */


  get docs() {
    return this.documentation;
  }
  /**
   * @description The [[Bytes]] fallback default
   */


  get fallback() {
    return this.get('fallback');
  }
  /**
   * @description The [[MetadataArgument]] for arguments
   */


  get modifier() {
    return this.get('modifier');
  }
  /**
   * @description The call name
   */


  get name() {
    return this.get('name');
  }
  /**
   * @description The [[StorageFunctionType]]
   */


  get type() {
    return this.get('type');
  }

}

exports.StorageFunctionMetadata = StorageFunctionMetadata;