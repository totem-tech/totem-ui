import { AnyNumber } from '../types';
import Enum from '../codec/Enum';
import Struct from '../codec/Struct';
import Hash from '../primitive/Hash';
import U32 from '../primitive/U32';
import AuthorityId from './AuthorityId';
import { BftHashSignature, BftHashSignatureValue } from './Bft';
import BlockNumber from './BlockNumber';
declare type BftAtReportValueSingle = {
    round?: AnyNumber;
    a?: BftHashSignatureValue;
};
declare type BftAtReportValue = BftAtReportValueSingle & {
    b?: BftHashSignatureValue;
};
/**
 * @name BftAtReport
 * @description
 * A report of a/b hash-signature pairs for a specific index. This is the same
 * structure as is used in BftDoublePrepare & BftDoubleCommit
 */
export declare class BftAtReport extends Struct {
    constructor(value?: BftAtReportValue | Uint8Array);
    /**
     * @description The first report [[BftHashSignature]]
     */
    readonly a: BftHashSignature;
    /**
     * @description The second report [[BftHashSignature]]
     */
    readonly b: BftHashSignature;
    /**
     * @description The round this report applies to as [[U32]]
     */
    readonly round: U32;
}
/**
 * @name BftProposeOutOfTurn
 * @description
 * A report for out-of-turn proposals
 */
export declare class BftProposeOutOfTurn extends Struct {
    constructor(value?: BftAtReportValue | Uint8Array);
    /**
     * @description The [[BftHashSignature]] the report applies to
     */
    readonly a: BftHashSignature;
    /**
     * @description The round as [[u32]]
     */
    readonly round: U32;
}
/**
 * @name BftDoublePropose
 * @description
 * Report of a double-propose
 */
export declare class BftDoublePropose extends BftAtReport {
}
/**
 * @name BftDoublePrepare
 * @description
 * Report of a double-prepare
 */
export declare class BftDoublePrepare extends BftAtReport {
}
/**
 * @name BftDoubleCommit
 * @description
 * Report of a double-commit
 */
export declare class BftDoubleCommit extends BftAtReport {
}
/**
 * @name MisbehaviorKind
 * @description
 * An [[Enum]] containing a Bft misbehaviour
 */
export declare class MisbehaviorKind extends Enum {
    constructor(value?: BftAtReportValue | Uint8Array, index?: number);
    /**
     * @description Returns the item as a [[BftDoubleCommit]]
     */
    readonly asBftDoubleCommit: BftDoubleCommit;
    /**
     * @description Returns the item as a [[BftDoublePrepare]]
     */
    readonly asBftDoublePrepare: BftDoublePrepare;
    /**
     * @description Returns the item as a [[BftDoublePropose]]
     */
    readonly asBftDoublePropose: BftDoublePropose;
    /**
     * @description Returns the item as a [[BftProposeOutOfTurn]]
     */
    readonly asBftProposeOutOfTurn: BftProposeOutOfTurn;
    /**
     * @description true when this is a BftDoubleCommit
     */
    readonly isBftDoubleCommit: boolean;
    /**
     * @description true when this is a BftDoublePrepare
     */
    readonly isBftDoublePrepare: boolean;
    /**
     * @description true when this is a BftDoublePropose
     */
    readonly isBftDoublePropose: boolean;
    /**
     * @description true when this is a BftProposeOutOfTurn
     */
    readonly isBftProposeOutOfTurn: boolean;
}
declare type MisbehaviorReportValue = {
    misbehavior?: MisbehaviorKind | number;
    parentHash?: Hash | Uint8Array | string;
    parentNumber?: AnyNumber;
    target?: AuthorityId | string;
};
/**
 * @name MisbehaviorReport
 * @description
 * A Misbehaviour report of [[MisbehavioirKind]] against a specific [[AuthorityId]]
 */
export default class MisbehaviorReport extends Struct {
    constructor(value?: MisbehaviorReportValue | Uint8Array);
    /**
     * @description The [[MisbehaviorKind]]
     */
    readonly misbehavior: MisbehaviorKind;
    /**
     * @description The [[Hash]] of the parent block
     */
    readonly parentHash: Hash;
    /**
     * @description The [[BlockNumber]] of the parent
     */
    readonly parentNumber: BlockNumber;
    /**
     * @description The [[authorityId]] the report applies to
     */
    readonly target: AuthorityId;
}
export {};
