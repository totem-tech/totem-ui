"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _bn = _interopRequireDefault(require("bn.js"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _types = require("@polkadot/types");

var _drr = require("../util/drr");

var _chain = require("../chain");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const ZERO = new _bn.default(0); // internal helper to just split the logic - take all inputs, do the calculations and combine

function createDerived(_ref) {
  let [bestNumber, [currentIndex, _lastLengthChange, sessionLength, lastEraLengthChange, sessionsPerEra]] = _ref;
  const eraLength = sessionLength.mul(sessionsPerEra);
  const lastLengthChange = _lastLengthChange ? _lastLengthChange.unwrapOr(ZERO) : ZERO;
  const sessionProgress = bestNumber.sub(lastLengthChange).add(sessionLength).mod(sessionLength);
  const eraProgress = currentIndex.sub(lastEraLengthChange).mod(sessionsPerEra).mul(sessionLength).add(sessionProgress);
  return new _types.StructAny({
    currentIndex,
    eraLength,
    eraProgress,
    lastEraLengthChange,
    lastLengthChange,
    sessionLength,
    sessionsPerEra,
    sessionProgress
  });
}
/**
 * @description Retrieves all the session and era info and calculates specific valus on it sunh as the length of the session and eras
 */


function info(api) {
  return () => // This is a much more optimal way to calculate since we only make a single call to the RPC backend
  // instead of making a subscription for each of the params (this means all others in session use)
  (0, _rxjs.combineLatest)([(0, _chain.bestNumber)(api)(), api.queryMulti([api.query.session.currentIndex, api.query.session.lastLengthChange, api.query.session.sessionLength, api.query.staking.lastEraLengthChange, api.query.staking.sessionsPerEra])]).pipe((0, _operators.map)(createDerived), (0, _drr.drr)());
}