"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changesTrieConfig = exports.extrinsicIndex = exports.authorityPrefix = exports.authorityCount = exports.heapPages = exports.code = void 0;

var _Storage = require("@polkadot/types/Metadata/v5/Storage");

var _types = require("@polkadot/types");

var _createFunction = _interopRequireDefault(require("./createFunction"));

// Copyright 2017-2019 @polkadot/storage authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
// Small helper function to factorize code on this page.
const createRuntimeFunction = (method, key, _ref) => {
  let {
    documentation,
    type
  } = _ref;
  return (0, _createFunction.default)(new _types.Text('Substrate'), new _types.Text(method), {
    documentation: new _types.Vector(_types.Text, [documentation]),
    modifier: new _Storage.StorageFunctionModifier(1),
    // default
    type: new _Storage.StorageFunctionType(type, 0),
    toJSON: () => key
  }, {
    key,
    skipHashing: true
  });
};

const code = createRuntimeFunction('code', ':code', {
  documentation: 'Wasm code of the runtime.',
  type: 'Bytes'
});
exports.code = code;
const heapPages = createRuntimeFunction('heapPages', ':heappages', {
  documentation: 'Number of wasm linear memory pages required for execution of the runtime.',
  type: 'u64'
});
exports.heapPages = heapPages;
const authorityCount = createRuntimeFunction('authorityCount', ':auth:len', {
  documentation: 'Number of authorities.',
  type: 'u32'
});
exports.authorityCount = authorityCount;
const authorityPrefix = createRuntimeFunction('authorityPrefix', ':auth:', {
  documentation: 'Prefix under which authorities are stored.',
  type: 'u32'
});
exports.authorityPrefix = authorityPrefix;
const extrinsicIndex = createRuntimeFunction('extrinsicIndex', ':extrinsic_index', {
  documentation: 'Current extrinsic index (u32) is stored under this key.',
  type: 'u32'
});
exports.extrinsicIndex = extrinsicIndex;
const changesTrieConfig = createRuntimeFunction('changesTrieConfig', ':changes_trie', {
  documentation: 'Changes trie configuration is stored under this key.',
  type: 'u32'
});
exports.changesTrieConfig = changesTrieConfig;