import { AnyNumber, AnyU8a, ArgsDef, Codec, IExtrinsic, IKeyringPair, SignatureOptions } from '../types';
import Struct from '../codec/Struct';
import { FunctionMetadata } from '../Metadata/v5/Calls';
import Method from '../primitive/Method';
import Address from '../primitive/Address';
import Hash from '../primitive/Hash';
import ExtrinsicSignature from './ExtrinsicSignature';
declare type ExtrinsicValue = {
    method?: Method;
    signature?: ExtrinsicSignature;
};
/**
 * @name Extrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */
export default class Extrinsic extends Struct implements IExtrinsic {
    constructor(value?: ExtrinsicValue | AnyU8a | Method);
    static decodeExtrinsic(value?: ExtrinsicValue | AnyU8a | Method): ExtrinsicValue | Array<number> | Uint8Array;
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Method]]
     */
    readonly args: Array<Codec>;
    /**
     * @description Thge argument defintions, compatible with [[Method]]
     */
    readonly argsDef: ArgsDef;
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Method
     */
    readonly callIndex: Uint8Array;
    /**
     * @description The actual data for the Method
     */
    readonly data: Uint8Array;
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    readonly encodedLength: number;
    /**
     * @description Convernience function, encodes the extrinsic and returns the actual hash
     */
    readonly hash: Hash;
    /**
     * @description `true` is method has `Origin` argument (compatibility with [[Method]])
     */
    readonly hasOrigin: boolean;
    /**
     * @description `true` id the extrinsic is signed
     */
    readonly isSigned: boolean;
    /**
     * @description The length of the encoded value
     */
    readonly length: number;
    /**
     * @description The [[FunctionMetadata]] that describes the extrinsic
     */
    readonly meta: FunctionMetadata;
    /**
     * @description The [[Method]] this extrinsic wraps
     */
    readonly method: Method;
    /**
     * @description The [[ExtrinsicSignature]]
     */
    readonly signature: ExtrinsicSignature;
    /**
     * @description Add an [[ExtrinsicSignature]] to the extrinsic (already generated)
     */
    addSignature(signer: Address | Uint8Array | string, signature: Uint8Array | string, nonce: AnyNumber, era?: Uint8Array): Extrinsic;
    /**
     * @description Sign the extrinsic with a specific keypair
     */
    sign(account: IKeyringPair, options: SignatureOptions): Extrinsic;
    /**
     * @description Returns a hex string representation of the value
     */
    toHex(): string;
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(): any;
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType(): string;
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare?: boolean): Uint8Array;
}
export {};
