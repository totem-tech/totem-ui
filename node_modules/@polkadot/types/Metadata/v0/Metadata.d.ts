import { MetadataInterface } from '../types';
import Struct from '../../codec/Struct';
import Vector from '../../codec/Vector';
import { OuterDispatchCall } from './Calls';
import { OuterEventEventMetadata } from './Events';
import { RuntimeModuleMetadata } from './Modules';
/**
 * @name MetadataV0
 * @description
 * The runtime metadata as a decoded structure
 */
export default class MetadataV0 extends Struct implements MetadataInterface<RuntimeModuleMetadata> {
    constructor(value?: any);
    static decodeMetadata(value: string | Uint8Array | object): object | Uint8Array;
    /**
     * @description Wrapped [[OuterDispatchCall]]
     */
    readonly calls: Vector<OuterDispatchCall>;
    /**
     * @description Wrapped [[OuterEventEventMetadata]]
     */
    readonly events: Vector<OuterEventEventMetadata>;
    /**
     * @description Wrapped [[RuntimeModuleMetadata]]
     */
    readonly modules: Vector<RuntimeModuleMetadata>;
    private readonly argNames;
    private readonly eventNames;
    private readonly storageNames;
    /**
     * @description Helper to retrieve a list of all type that are found, sorted and de-deuplicated
     */
    getUniqTypes(throwError: boolean): Array<string>;
}
