"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Compact = _interopRequireDefault(require("../codec/Compact"));

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Vector = _interopRequireDefault(require("../codec/Vector"));

var _AccountId = _interopRequireDefault(require("../primitive/AccountId"));

var _Balance = _interopRequireDefault(require("./Balance"));

var _UnlockChunk = _interopRequireDefault(require("./UnlockChunk"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name StakingLedger
 * @description
 * The ledger of a (bonded) stash
 */
class StakingLedger extends _Struct.default {
  constructor(value) {
    super({
      stash: _AccountId.default,
      total: _Compact.default.with(_Balance.default),
      active: _Compact.default.with(_Balance.default),
      unlocking: _Vector.default.with(_UnlockChunk.default)
    }, value);
  }
  /**
   * @description The total amount of the stash's balance that will be at stake in any forthcoming rounds
   */


  get active() {
    return this.get('active').toBn();
  }
  /**
   * @description The stash account whose balance is actually locked and at stake
   */


  get stash() {
    return this.get('stash');
  }
  /**
   * @description The total amount of the stash's balance that we are currently accounting for. It's just `active` plus all the `unlocking` balances
   */


  get total() {
    return this.get('total').toBn();
  }
  /**
   * @description Any balance that is becoming free, which may eventually be transferred out of the stash (assuming it doesn't get slashed first)
   */


  get unlocking() {
    return this.get('unlocking');
  }

}

exports.default = StakingLedger;