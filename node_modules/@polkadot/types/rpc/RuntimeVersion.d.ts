import { AnyNumber, AnyU8a, RuntimeVersionInterface } from '../types';
import Struct from '../codec/Struct';
import Tuple from '../codec/Tuple';
import U8aFixed from '../codec/U8aFixed';
import Vector from '../codec/Vector';
import Text from '../primitive/Text';
import U32 from '../primitive/U32';
/**
 * @name ApiId
 * @description
 * An identifier for the runtime API
 */
export declare class ApiId extends U8aFixed {
    constructor(value?: AnyU8a);
}
declare type RuntimeVersionApiValue = {
    id?: AnyU8a;
    version?: AnyNumber;
};
/**
 * @name RuntimeVersionApi
 * @description
 * A [[Tuple]] that conatins the [[ApiId]] and [[U32]] version
 */
export declare class RuntimeVersionApi extends Tuple {
    constructor(value?: RuntimeVersionApiValue | Uint8Array);
    /**
     * @description The [[ApiId]]
     */
    readonly id: ApiId;
    /**
     * @description The specific version as [[U32]]
     */
    readonly version: U32;
}
declare type RuntimeVersionValue = {
    specName?: string;
    implName?: string;
    authoringVersion?: AnyNumber;
    specVersion?: AnyNumber;
    implVersion?: AnyNumber;
    apis?: Array<RuntimeVersionApiValue>;
};
/**
 * @name RuntimeVersion
 * @description
 * A defintion of the runtime and the associated versions thereof
 */
export default class RuntimeVersion extends Struct implements RuntimeVersionInterface {
    constructor(value?: RuntimeVersionValue | Uint8Array);
    /**
     * @description The available APIs as [[RuntimeVersionApi]]
     */
    readonly apis: Vector<RuntimeVersionApi>;
    /**
     * @description The authoring version as [[U32]]
     */
    readonly authoringVersion: U32;
    /**
     * @description The implementation name
     */
    readonly implName: Text;
    /**
     * @description The implementation version
     */
    readonly implVersion: U32;
    /**
     * @description The specification name
     */
    readonly specName: Text;
    /**
     * @description The specification version
     */
    readonly specVersion: U32;
}
export {};
