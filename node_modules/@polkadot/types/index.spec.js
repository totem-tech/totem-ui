"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _static = _interopRequireDefault(require("@polkadot/extrinsics/static"));

var Classes = _interopRequireWildcard(require("./index.types"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const Types = Classes;
describe('types', () => {
  describe('default creation', () => {
    Object.keys(Types).forEach(name => {
      it("creates an empty ".concat(name), () => {
        const constructFn = () => new Types[name]();

        if (name === 'Origin') {
          expect(constructFn).toThrow();
        } else {
          expect(constructFn).not.toThrow();
        }
      });
    });
  });
  describe('default creation (empty bytes)', () => {
    Types.Method.injectMethods(_static.default);
    Object.keys(Types).forEach(name => {
      it("creates an empty ".concat(name, " (from empty bytes)"), () => {
        const constructFn = () => new Types[name](new Types.Bytes());

        if (name === 'Origin') {
          expect(constructFn).toThrow();
        } else {
          expect(constructFn).not.toThrow();
        }
      });
    });
  });
});