"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _createType = _interopRequireWildcard(require("./createType"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('typeSplit', () => {
  it('splits simple types into an array', () => {
    expect((0, _createType.typeSplit)('Text, u32, u64')).toEqual(['Text', 'u32', 'u64']);
  });
  it('splits nested combinations', () => {
    expect((0, _createType.typeSplit)('Text, (u32), Vec<u64>')).toEqual(['Text', '(u32)', 'Vec<u64>']);
  });
  it('keeps nested tuples together', () => {
    expect((0, _createType.typeSplit)('Text, (u32, u128), Vec<u64>')).toEqual(['Text', '(u32, u128)', 'Vec<u64>']);
  });
  it('keeps nested vector tuples together', () => {
    expect((0, _createType.typeSplit)('Text, (u32, u128), Vec<(u64, u32)>')).toEqual(['Text', '(u32, u128)', 'Vec<(u64, u32)>']);
  });
  it('allows for deep nesting', () => {
    expect((0, _createType.typeSplit)('Text, (u32, (u128, u8)), Vec<(u64, (u32, u32))>')).toEqual(['Text', '(u32, (u128, u8))', 'Vec<(u64, (u32, u32))>']);
  });
  it('checks for unclosed vec', () => {
    expect(() => (0, _createType.typeSplit)('Text, Vec<u64')).toThrow(/Invalid defintion/);
  });
  it('checks for unclosed tuple', () => {
    expect(() => (0, _createType.typeSplit)('Text, (u64, u32')).toThrow(/Invalid defintion/);
  });
});
describe('getTypeValue', () => {
  it('does not allow invalid tuples, end )', () => {
    expect(() => (0, _createType.getTypeDef)('(u64, u32')).toThrow(/Expected '\(' closing with '\)'/);
  });
  it('does not allow invalid vectors, end >', () => {
    expect(() => (0, _createType.getTypeDef)('Vec<u64')).toThrow(/Expected 'Vec<' closing with '>'/);
  });
  it('returns a type structure', () => {
    expect((0, _createType.getTypeDef)('(u32, Compact<u32>, Vec<u64>, Option<u128>, DoubleMap<u128>, (Text, Vec<(Bool, u128)>))')).toEqual({
      info: _createType.TypeDefInfo.Tuple,
      type: '(u32, Compact<u32>, Vec<u64>, Option<u128>, DoubleMap<u128>, (Text, Vec<(Bool, u128)>))',
      sub: [{
        info: _createType.TypeDefInfo.Plain,
        type: 'u32'
      }, {
        info: _createType.TypeDefInfo.Compact,
        type: 'Compact<u32>',
        sub: {
          info: _createType.TypeDefInfo.Plain,
          type: 'u32'
        }
      }, {
        info: _createType.TypeDefInfo.Vector,
        type: 'Vec<u64>',
        sub: {
          info: _createType.TypeDefInfo.Plain,
          type: 'u64'
        }
      }, {
        info: _createType.TypeDefInfo.Option,
        type: 'Option<u128>',
        sub: {
          info: _createType.TypeDefInfo.Plain,
          type: 'u128'
        }
      }, {
        info: _createType.TypeDefInfo.DoubleMap,
        type: 'DoubleMap<u128>',
        sub: {
          info: _createType.TypeDefInfo.Plain,
          type: 'u128'
        }
      }, {
        info: _createType.TypeDefInfo.Tuple,
        type: '(Text, Vec<(Bool, u128)>)',
        sub: [{
          info: _createType.TypeDefInfo.Plain,
          type: 'Text'
        }, {
          info: _createType.TypeDefInfo.Vector,
          type: 'Vec<(Bool, u128)>',
          sub: {
            info: _createType.TypeDefInfo.Tuple,
            type: '(Bool, u128)',
            sub: [{
              info: _createType.TypeDefInfo.Plain,
              type: 'Bool'
            }, {
              info: _createType.TypeDefInfo.Plain,
              type: 'u128'
            }]
          }
        }]
      }]
    });
  });
  it('returns a type structure (actual)', () => {
    expect((0, _createType.getTypeDef)('Vec<(PropIndex, Proposal, AccountId)>')).toEqual({
      info: _createType.TypeDefInfo.Vector,
      type: 'Vec<(PropIndex, Proposal, AccountId)>',
      sub: {
        info: _createType.TypeDefInfo.Tuple,
        type: '(PropIndex, Proposal, AccountId)',
        sub: [{
          info: _createType.TypeDefInfo.Plain,
          type: 'PropIndex'
        }, {
          info: _createType.TypeDefInfo.Plain,
          type: 'Proposal'
        }, {
          info: _createType.TypeDefInfo.Plain,
          type: 'AccountId'
        }]
      }
    });
  });
  it('returns an actual Struct', () => {
    expect((0, _createType.getTypeDef)('{"balance":"Balance","account_id":"AccountId","log":"(u64, Signature)"}')).toEqual({
      info: _createType.TypeDefInfo.Struct,
      type: '{"balance":"Balance","account_id":"AccountId","log":"(u64, Signature)"}',
      sub: [{
        info: _createType.TypeDefInfo.Plain,
        name: 'balance',
        type: 'Balance'
      }, {
        info: _createType.TypeDefInfo.Plain,
        name: 'account_id',
        type: 'AccountId'
      }, {
        info: _createType.TypeDefInfo.Tuple,
        name: 'log',
        type: '(u64, Signature)',
        sub: [{
          info: _createType.TypeDefInfo.Plain,
          type: 'u64'
        }, {
          info: _createType.TypeDefInfo.Plain,
          type: 'Signature'
        }]
      }]
    });
  });
});
describe('getTypeClass', () => {
  it('does not allow invalid types', () => {
    expect(() => (0, _createType.getTypeClass)('SomethingInvalid')).toThrow(/determine type/);
  });
});
describe('createType', () => {
  it('allows creation of a Struct', () => {
    expect((0, _createType.default)('{"balance":"Balance","index":"u32"}', {
      balance: 1234,
      index: '0x10'
    }).toJSON()).toEqual({
      balance: 1234,
      index: 16
    });
  });
  it('allows creation of a Enum (simple)', () => {
    expect((0, _createType.default)('{"_enum": ["A", "B", "C"]}', 1).toJSON()).toEqual({
      B: null
    });
  });
  it('allows creation of a Enum (parametrised)', () => {
    expect((0, _createType.default)('{"_enum": {"A": null, "B": "u32", "C": null} }', 1).toJSON()).toEqual({
      B: 0
    });
  });
  it('allows creation of a [u8; 8]', () => {
    expect((0, _createType.default)('[u8; 8]', [0x12, 0x00, 0x23, 0x00, 0x45, 0x00, 0x67, 0x00]).toHex()).toEqual('0x1200230045006700');
  });
  it('throw error when create base is a StorageData with null value and isPedantic is true', () => {
    const base = (0, _createType.default)('StorageData', null);
    expect(() => (0, _createType.default)('DoubleMap<Vec<(BlockNumber,EventIndex)>>', base, true)).toThrow(/Encoding for input doesn't match output, created 0x00 from 0x/);
  });
  it('throw error when create base is a StorageData with null value and isPedantic is true', () => {
    const base = (0, _createType.default)('StorageData', null);
    expect(() => (0, _createType.default)('Vec<(BlockNumber,EventIndex)>', base, true)).toThrow(/Encoding for input doesn't match output, created 0x00 from 0x/);
  });
});