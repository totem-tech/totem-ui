// import { Bond } from 'oo7'
import { addCodecTransform, calls, hexToBytes, post, runtime, ss58Decode } from 'oo7-substrate'
import { isBond } from '../components/utils'

const validatedAddress = address => runtime.indices.tryIndex(
    new Bond().defaultTo(ss58Decode(isBond(address) ? address._value : address)
))
// addNewProject registers a hash against a wallet into the blockchain
//
// Params:
// @address string/Bond
// @hash    string: an unique hash generated by using project name, owner address and description
//
// Returns Bond : expected values from returned bond =>
//              1. {signing: true/false}
//              2. {sending: true/false}
//              3. 'ready'
//              4. {finalized: 'TXID'}
//              5. {failed: {code: xxx, message: 'error message'}}
export const addNewProject = (ownerAddress, hash) => {
    addCodecTransform('ProjectHash', 'Hash')

    return post({
        sender: validatedAddress(ownerAddress),
        call: calls.projects.addNewProject(hexToBytes(hash)),
        compact: false,
        longevity: true
    })
}

// ownerProjectsList retrieves a list of project hashes owned by @address
//
// Returns Bond
export const ownerProjectsList = address => {
    addCodecTransform('ProjectHash', 'Hash')
    return runtime.projects.ownerProjectsList(ss58Decode(address))
}

export const reassignProject = (ownerAddress, newOwnerAddress, hash) => {
    addCodecTransform('ProjectHash', 'Hash')
    return post({
        sender: validatedAddress(ownerAddress),
        call: calls.projects.reassignProject(newOwnerAddress, hexToBytes(hash)),
        compact: false,
        longevity: true
    })
}


export default {
    addNewProject,
    ownerProjectsList,
    reassignProject
}