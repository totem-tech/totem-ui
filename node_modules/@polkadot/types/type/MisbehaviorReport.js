"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MisbehaviorKind = exports.BftDoubleCommit = exports.BftDoublePrepare = exports.BftDoublePropose = exports.BftProposeOutOfTurn = exports.BftAtReport = void 0;

var _util = require("@polkadot/util");

var _Enum = _interopRequireDefault(require("../codec/Enum"));

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _U = _interopRequireDefault(require("../primitive/U32"));

var _AuthorityId = _interopRequireDefault(require("./AuthorityId"));

var _Bft = require("./Bft");

var _BlockNumber = _interopRequireDefault(require("./BlockNumber"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name BftAtReport
 * @description
 * A report of a/b hash-signature pairs for a specific index. This is the same
 * structure as is used in BftDoublePrepare & BftDoubleCommit
 */
// FIXME It is not entirely obvious from the actual Rust code what the specific
// items in the structure is called, except a & b (one should be expected, the
// other actual)
class BftAtReport extends _Struct.default {
  constructor(value) {
    super({
      round: _U.default,
      a: _Bft.BftHashSignature,
      b: _Bft.BftHashSignature
    }, value);
  }
  /**
   * @description The first report [[BftHashSignature]]
   */


  get a() {
    return this.get('a');
  }
  /**
   * @description The second report [[BftHashSignature]]
   */


  get b() {
    return this.get('b');
  }
  /**
   * @description The round this report applies to as [[U32]]
   */


  get round() {
    return this.get('round');
  }

}
/**
 * @name BftProposeOutOfTurn
 * @description
 * A report for out-of-turn proposals
 */


exports.BftAtReport = BftAtReport;

class BftProposeOutOfTurn extends _Struct.default {
  constructor(value) {
    super({
      round: _U.default,
      a: _Bft.BftHashSignature
    }, value);
  }
  /**
   * @description The [[BftHashSignature]] the report applies to
   */


  get a() {
    return this.get('a');
  }
  /**
   * @description The round as [[u32]]
   */


  get round() {
    return this.get('round');
  }

}
/**
 * @name BftDoublePropose
 * @description
 * Report of a double-propose
 */


exports.BftProposeOutOfTurn = BftProposeOutOfTurn;

class BftDoublePropose extends BftAtReport {}
/**
 * @name BftDoublePrepare
 * @description
 * Report of a double-prepare
 */


exports.BftDoublePropose = BftDoublePropose;

class BftDoublePrepare extends BftAtReport {}
/**
 * @name BftDoubleCommit
 * @description
 * Report of a double-commit
 */


exports.BftDoublePrepare = BftDoublePrepare;

class BftDoubleCommit extends BftAtReport {}
/**
 * @name MisbehaviorKind
 * @description
 * An [[Enum]] containing a Bft misbehaviour
 */


exports.BftDoubleCommit = BftDoubleCommit;

class MisbehaviorKind extends _Enum.default {
  constructor(value, index) {
    super({
      BftProposeOutOfTurn,
      BftDoublePropose,
      BftDoublePrepare,
      BftDoubleCommit
    }, value, index);
  }
  /**
   * @description Returns the item as a [[BftDoubleCommit]]
   */


  get asBftDoubleCommit() {
    (0, _util.assert)(this.isBftDoubleCommit, "Cannot convert '".concat(this.type, "' via asBftDoubleCommit"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[BftDoublePrepare]]
   */


  get asBftDoublePrepare() {
    (0, _util.assert)(this.isBftDoublePrepare, "Cannot convert '".concat(this.type, "' via asBftDoublePrepare"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[BftDoublePropose]]
   */


  get asBftDoublePropose() {
    (0, _util.assert)(this.isBftDoublePropose, "Cannot convert '".concat(this.type, "' via asBftDoublePropose"));
    return this.value;
  }
  /**
   * @description Returns the item as a [[BftProposeOutOfTurn]]
   */


  get asBftProposeOutOfTurn() {
    (0, _util.assert)(this.isBftProposeOutOfTurn, "Cannot convert '".concat(this.type, "' via asBftProposeOutOfTurn"));
    return this.value;
  }
  /**
   * @description true when this is a BftDoubleCommit
   */


  get isBftDoubleCommit() {
    return this.type === 'BftDoubleCommit';
  }
  /**
   * @description true when this is a BftDoublePrepare
   */


  get isBftDoublePrepare() {
    return this.type === 'BftDoublePrepare';
  }
  /**
   * @description true when this is a BftDoublePropose
   */


  get isBftDoublePropose() {
    return this.type === 'BftDoublePropose';
  }
  /**
   * @description true when this is a BftProposeOutOfTurn
   */


  get isBftProposeOutOfTurn() {
    return this.type === 'BftProposeOutOfTurn';
  }

}

exports.MisbehaviorKind = MisbehaviorKind;

/**
 * @name MisbehaviorReport
 * @description
 * A Misbehaviour report of [[MisbehavioirKind]] against a specific [[AuthorityId]]
 */
class MisbehaviorReport extends _Struct.default {
  constructor(value) {
    super({
      parentHash: _Hash.default,
      parentNumber: _BlockNumber.default,
      target: _AuthorityId.default,
      misbehavior: MisbehaviorKind
    }, value);
  }
  /**
   * @description The [[MisbehaviorKind]]
   */


  get misbehavior() {
    return this.get('misbehavior');
  }
  /**
   * @description The [[Hash]] of the parent block
   */


  get parentHash() {
    return this.get('parentHash');
  }
  /**
   * @description The [[BlockNumber]] of the parent
   */


  get parentNumber() {
    return this.get('parentNumber');
  }
  /**
   * @description The [[authorityId]] the report applies to
   */


  get target() {
    return this.get('target');
  }

}

exports.default = MisbehaviorReport;