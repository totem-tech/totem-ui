"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyValueOption = exports.default = void 0;

var _Option = _interopRequireDefault(require("../codec/Option"));

var _Tuple = _interopRequireDefault(require("../codec/Tuple"));

var _StorageData = _interopRequireDefault(require("../primitive/StorageData"));

var _StorageKey = _interopRequireDefault(require("../primitive/StorageKey"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name KeyValue
 * @description
 * KeyValue structure. Since most of the keys and resultant values in Subtrate are
 * hashed and/or encoded, this does not wrap [[Text]], but rather a [[Bytes]]
 * for the keys and values. (Not to be confused with the KeyValue in [[Metadata]], that
 * is actually for Maps, whereas this is a representation of actual storage values)
 */
class KeyValue extends _Tuple.default {
  constructor(value) {
    super({
      key: _StorageKey.default,
      value: _StorageData.default
    }, value);
  }
  /**
   * @description The [[StorageKey]]
   */


  get key() {
    return this[0];
  }
  /**
   * @description The [[StorageData]]
   */


  get value() {
    return this[1];
  }

}

exports.default = KeyValue;

/**
 * @name KeyValueOption
 * @description
 * A key/value change. This is similar to the [[KeyValue]] structure,
 * however in this case the value could be optional. Here it extends
 * from a [[Tuple]], indicating the use inside areas such as [[StorageChangeSet]]
 */
class KeyValueOption extends _Tuple.default {
  constructor(value) {
    super({
      StorageKey: _StorageKey.default,
      'Option<StorageData>': _Option.default.with(_StorageData.default)
    }, value);
  }
  /**
   * @description The [[StorageKey]]
   */


  get key() {
    return this[0];
  }
  /**
   * @description The [[Option]] [[StorageData]]
   */


  get value() {
    return this[1];
  }

}

exports.KeyValueOption = KeyValueOption;