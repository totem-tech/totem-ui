export declare type JsonRpcObject = {
    id: number;
    jsonrpc: '2.0';
};
export declare type JsonRpcRequest = JsonRpcObject & {
    method: string;
    params: Array<any>;
};
export declare type JsonRpcResponseBase$Error = {
    code: number;
    data?: number | string;
    message: string;
};
declare type JsonRpcResponse$Single = {
    error?: JsonRpcResponseBase$Error;
    result?: any;
};
declare type JsonRpcResponse$Subscription = {
    method?: string;
    params: {
        error?: JsonRpcResponseBase$Error;
        result: any;
        subscription: number;
    };
};
export declare type JsonRpcResponseBase = JsonRpcResponse$Single & JsonRpcResponse$Subscription;
export declare type JsonRpcResponse = JsonRpcObject & JsonRpcResponseBase;
export declare type ProviderInterface$Callback = (result: any) => void;
export declare type ProviderInterface$Emitted = 'connected' | 'disconnected' | 'error';
export declare type ProviderInterface$EmitCb = (value?: any) => any;
export interface ProviderInterface {
    readonly hasSubscriptions: boolean;
    clone(): ProviderInterface;
    disconnect(): void;
    isConnected(): boolean;
    on(type: ProviderInterface$Emitted, sub: ProviderInterface$EmitCb): void;
    send(method: string, params: Array<any>): Promise<any>;
    subscribe(type: string, method: string, params: Array<any>, cb: ProviderInterface$Callback): Promise<number>;
    unsubscribe(type: string, method: string, id: number): Promise<boolean>;
}
export {};
