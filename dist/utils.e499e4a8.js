(self.webpackChunktotem_meccano_ui=self.webpackChunktotem_meccano_ui||[]).push([[493],{"./src/utils/BlockchairClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ BlockchairClient),\n/* harmony export */   "getBalance_chains": () => (/* binding */ getBalance_chains),\n/* harmony export */   "setErrorMessages": () => (/* binding */ setErrorMessages)\n/* harmony export */ });\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar messages = {\n  invalidEthereumAddress: \'Invalid Ethereum address\',\n  invalidRequest: \'invalid request\'\n};\n// chains supported by client.getBalance()\nvar getBalance_chains = {\n  bitcoin: \'bitcoin\',\n  bitcoinCash: \'bitcoin-cash\',\n  bitcoinSV: \'bitcoin-sv\',\n  bitcoinTestnet: \'bitcoin/testnet\',\n  dash: \'dash\',\n  dogecoin: \'dogecoin\',\n  groestlcoin: \'groestlcoin\',\n  litecoin: \'litecoin\',\n  zcash: \'zcash\'\n};\nvar BlockchairClient = /*#__PURE__*/function () {\n  function BlockchairClient(apiKey) {\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n    var baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'https://api.blockchair.com\';\n    _classCallCheck(this, BlockchairClient);\n    this.baseUrl = baseUrl;\n    this.apiKey = apiKey;\n    this.timeout = timeout;\n  }\n\n  /**\n   * @name    getAPIKeyStats\n   * @summary get API key related data\n   * \n   * @returns {Object}\n   */\n  _createClass(BlockchairClient, [{\n    key: "getAPIKeyStats",\n    value: function () {\n      var _getAPIKeyStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var params, url;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              params = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objToUrlParams)({\n                key: this.apiKey\n              });\n              url = "".concat(this.baseUrl, "/premium/stats?").concat(params);\n              _context.next = 4;\n              return blockchairFetch(url, {\n                method: \'get\'\n              }, this.timeout);\n            case 4:\n              return _context.abrupt("return", _context.sent);\n            case 5:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getAPIKeyStats() {\n        return _getAPIKeyStats.apply(this, arguments);\n      }\n      return getAPIKeyStats;\n    }()\n    /**\n     * @name        getBalance\n     * @summary     retrieve balances in a single batch request\n     * @description See https://blockchair.com/api/docs#link_390 for list of supported chains and expected result.\n     * \n     * @param   {Array}     addresses   list of string addresses\n     * @param   {String}    chain       (optional) Default: bitcoin\n     * \n     * \n     * @returns {Object}\n     * \n     * @example\n     * ```javascript\n     *  const client = new BlockchairClient()\n     *  client.getBalance(\n     *      [\'35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP\', \'34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo\'],\n     *      \'bitcoin\',\n     *  ).then(console.log)\n     *  // Example result:\n     *  // {\n     *  //      "35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP": 25550215769897,\n     *  //      "34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo": 4053399981517\n     *  // }\n     * ```\n     */\n  }, {\n    key: "getBalance",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var addresses,\n          chain,\n          options,\n          url,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              addresses = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];\n              chain = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : \'bitcoin\';\n              options = {\n                body: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objToFormData)({\n                  addresses: addresses,\n                  key: this.apiKey\n                }),\n                method: \'post\'\n              };\n              url = "".concat(this.baseUrl, "/").concat(chain, "/addresses/balances");\n              _context2.next = 6;\n              return blockchairFetch(url, options, this.timeout);\n            case 6:\n              return _context2.abrupt("return", _context2.sent);\n            case 7:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getBalance() {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * @name        getERC20HolderInfo\n     * @summary     get Ethereum ERC20 token balance, transaction history etc information for account holder\n     * @description See https://blockchair.com/api/docs#link_504\n     * \n     * @param {Array|String} addresses    token holder address\n     * @param {String}       tokenAddress token contract address\n     * @param {Number}       limit        (optional) maximum number of recent transactions to retrieve. \n     *                                        Default: 100\n     * @param {Number}       offset       (optional) number of recent transactions to skip.\n     *                                        Default: 0\n     * @param {Boolean}      mainnet      (optional) whether to make the request on mainnet or testnet.\n     *                                        Default: true\n     * @param {Boolean}      combine      (optional) whether to combine multi-query results into a single object.\n     *                                        Default: true\n     * \n     * @returns {Object}\n     * \n     * @example\n     * ```javascript\n     *  const client = new BlockchairClient()\n     *  client.getERC20HolderInfo(\n     *      [\'0x3282791d6fd713f1e94f4bfd565eaa78b3a0599d\'],\n     *      \'0x68e14bb5a45b9681327e16e528084b9d962c1a39\',\n     *  ).then(console.log)\n     *  // Example result: (for both single and multi-query)\n     *  // {\n     *  //   "0x3282791d6fd713f1e94f4bfd565eaa78b3a0599d": {\n     *  //     "address": {\n     *  //       "balance": "5000000000000000000",\n     *  //       "balance_approximate": 5,\n     *  //       "received": "5000000000000000000",\n     *  //       "received_approximate": 5,\n     *  //       "spent": "0",\n     *  //       "spent_approximate": 0,\n     *  //       "receiving_transaction_count": 1,\n     *  //       "spending_transaction_count": 0,\n     *  //       "transaction_count": 1,\n     *  //       "first_seen_receiving": "2017-11-26 23:17:02",\n     *  //       "last_seen_receiving": "2017-11-26 23:17:02",\n     *  //       "first_seen_spending": null,\n     *  //       "last_seen_spending": null\n     *  //     },\n     *  //     "transactions": [\n     *  //       {\n     *  //         "block_id": 4628318,\n     *  //         "id": 17166097,\n     *  //         "transaction_hash": "0xd3aeac286c429f581f056388e523726e7b42caeba1d6a8df591ea2ec30daad48",\n     *  //         "time": "2017-11-26 23:17:02",\n     *  //         "token_address": "0x68e14bb5a45b9681327e16e528084b9d962c1a39",\n     *  //         "token_name": "en",\n     *  //         "token_symbol": "CAT",\n     *  //         "token_decimals": 18,\n     *  //         "sender": "0x9f89388141c632c4c6f36d1060d5f50604ee3abc",\n     *  //         "recipient": "0x3282791d6fd713f1e94f4bfd565eaa78b3a0599d",\n     *  //         "value": "5000000000000000000",\n     *  //         "value_approximate": 5\n     *  //       }\n     *  //     ]\n     *  //   },\n     *  // }\n     * ```\n     */\n  }, {\n    key: "getERC20HolderInfo",\n    value: function () {\n      var _getERC20HolderInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(addresses, tokenAddress) {\n        var _this = this;\n        var limit,\n          offset,\n          mainnet,\n          combine,\n          isMultiQuery,\n          isAddressesValid,\n          options,\n          params,\n          network,\n          url,\n          results,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              limit = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 100;\n              offset = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : 0;\n              mainnet = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : true;\n              combine = _args3.length > 5 && _args3[5] !== undefined ? _args3[5] : true;\n              isMultiQuery = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(addresses);\n              addresses = !isMultiQuery ? [addresses] : addresses;\n              isAddressesValid = addresses.every(function (address) {\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isAddress)(address, _utils__WEBPACK_IMPORTED_MODULE_1__.isAddress.validTypes.ethereum);\n              });\n              if (isAddressesValid) {\n                _context3.next = 9;\n                break;\n              }\n              throw messages.invalidEthereumAddress;\n            case 9:\n              options = {\n                method: \'get\'\n              };\n              params = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objToUrlParams)({\n                key: this.apiKey,\n                limit: limit,\n                offset: offset\n              });\n              network = mainnet ? \'\' : \'testnet/\';\n              url = "".concat(this.baseUrl, "/ethereum/erc-20/").concat(network).concat(tokenAddress, "/dashboards/address");\n              _context3.next = 15;\n              return Promise.all(addresses.map(function (address) {\n                return blockchairFetch("".concat(url, "/").concat(address, "?").concat(params), options, _this.timeout);\n              }));\n            case 15:\n              results = _context3.sent;\n              if (isMultiQuery) {\n                _context3.next = 18;\n                break;\n              }\n              return _context3.abrupt("return", results[0]);\n            case 18:\n              if (combine) {\n                _context3.next = 20;\n                break;\n              }\n              return _context3.abrupt("return", results);\n            case 20:\n              return _context3.abrupt("return", results.reduce(function (obj, next) {\n                return _objectSpread(_objectSpread({}, obj), next && next.data);\n              }, {}));\n            case 21:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getERC20HolderInfo(_x, _x2) {\n        return _getERC20HolderInfo.apply(this, arguments);\n      }\n      return getERC20HolderInfo;\n    }()\n  }]);\n  return BlockchairClient;\n}();\n/**\n * @name    blockchairFetch\n * @summary simplifies `Blockchair` requests and  catches `context.error` if available\n * \n * @param   {...}   args arguments supported by `PromisE.fetch`\n * \n * @returns {*}\n */\n\nvar blockchairFetch = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var result,\n      context,\n      _context4,\n      hasContextError,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _PromisE__WEBPACK_IMPORTED_MODULE_0__["default"].fetch.apply(_PromisE__WEBPACK_IMPORTED_MODULE_0__["default"], _args4);\n        case 3:\n          result = _context5.sent;\n          context = result.context;\n          if (!(context && context.error)) {\n            _context5.next = 7;\n            break;\n          }\n          throw result;\n        case 7:\n          return _context5.abrupt("return", result);\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5["catch"](0);\n          // capture Blockchair error message if available\n          _context4 = _context5.t0.context;\n          hasContextError = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(_context4) && _context4 && _context4.error;\n          if (!hasContextError) {\n            _context5.next = 16;\n            break;\n          }\n          throw _context4.error;\n        case 16:\n          throw _context5.t0;\n        case 17:\n        case "end":\n          return _context5.stop();\n      }\n    }, _callee4, null, [[0, 10]]);\n  }));\n  return function blockchairFetch() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * @name    setErrorMessages\n * @summary allows to override default error messages. ie: for translation.\n * \n * @param   {Object} obj \n * \n * @returns {Object} all error messages after merge\n */\nvar setErrorMessages = function setErrorMessages() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return messages = _objectSpread(_objectSpread({}, messages), {}, {\n    obj: obj\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/BlockchairClient.js\n')},"./src/utils/CouchDBStorage.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ CouchDBStorage),\n/* harmony export */   "getConnection": () => (/* binding */ getConnection),\n/* harmony export */   "isCouchDBStorage": () => (/* binding */ isCouchDBStorage)\n/* harmony export */ });\nObject(function webpackMissingModule() { var e = new Error("Cannot find module \'nano\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }());\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/uuid/index.js");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n// globab connection for use with multiple databases\nvar connection;\n// all individual connections\nvar connections = {};\nvar debugTag = \'[CouchDBStorage]\';\n\n/**\n * @name    getConnection\n * @summary getConnection returns existing connection, if available.\n *          Otherwise, creates a new connection using the supplied URL.\n * \n * @param   {String}    url \n * @param   {Boolean}   global whether to use global connection\n * \n * @returns {Objecct}   CouchDB connection\n */\nvar getConnection = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var global,\n      con,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          global = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n          if (!(global && connection)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt("return", connection);\n        case 3:\n          _context.t0 = connections[url];\n          if (_context.t0) {\n            _context.next = 8;\n            break;\n          }\n          _context.next = 7;\n          return Object(function webpackMissingModule() { var e = new Error("Cannot find module \'nano\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }())(url);\n        case 7:\n          _context.t0 = _context.sent;\n        case 8:\n          con = _context.t0;\n          // set as global connection\n          if (global) connection = con;\n          connections[url] = con;\n          return _context.abrupt("return", con);\n        case 12:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getConnection(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * @name    isCouchDBStorage\n * @summary checks if all arguments are instance of CouchDBStorage class\n * \n * @param   {...} args  values to check\n * \n * @returns {Boolean} \n */\nvar isCouchDBStorage = function isCouchDBStorage() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.flat().flat().every(function (instance) {\n    return instance instanceof CouchDBStorage;\n  });\n};\n\n/**\n * @name    setTs\n * @summary set created and updated timestamps to document\n * \n * @param   {Object}    doc \n * @param   {Object}    existingDoc (optional)\n * \n * @returns {Object}    doc\n */\nvar setTs = function setTs(doc, existingDoc) {\n  // add/update creation and update time\n  doc.tsCreated = (existingDoc || doc).tsCreated || new Date();\n  if (!!existingDoc || doc.tsUpdated) {\n    doc.tsUpdated = new Date();\n  }\n  return doc;\n};\nvar CouchDBStorage = /*#__PURE__*/function () {\n  /**\n   * @name        CouchDBStorage\n   * @summary     a wrapper for `nano` NPM module for reading from and writing to CouchDB\n   * @description connection is only initialized only when first request is made or `getDB()` method is called.\n   *\n   * @param   {String|Object|Null}    connectionOrUrl Possible values:\n   *                                      1. string: CouchDB connection URL including username and password\n   *                                      2. object: existing connection\n   *                                      3. null:   will use global `connection` if available.\n   *                                  Alternatively, use a specific environment variable for individual database.\n   *                                  The name of the environement variable must be in the following format:\n   *                                      `CouchDB_URL_$DBNAME`\n   *                                  Replace `$DBNAME` with database name. The same to be provide in param `dbName`\n   * @param   {String}                dbName          database name\n   * @param   {Array}                 fields (optional) fields to retreive whenever retrieving documents.\n   *                                  This can be overridden in the `extraProps` argument wherever applicable.\n   *                                  Default: `[]` (all fields)\n   *\n   * @returns {CouchDBStorage}\n   */\n  function CouchDBStorage(connectionOrUrl, dbName) {\n    var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, CouchDBStorage);\n    // Global DB name prefix and suffix applied to all databases excluding \n    var prefix = "MISSING_ENV_VAR".CouchDB_DBName_Prefix || \'\';\n    var suffix = "MISSING_ENV_VAR".CouchDB_DBName_Suffix || \'\';\n    dbName = "MISSING_ENV_VAR"["CouchDB_DBName_Override_".concat(dbName)] || "".concat(prefix).concat(dbName).concat(suffix);\n\n    // Connection/URL/DBName override for individual databases\n    var url = ("MISSING_ENV_VAR"["CouchDB_URL_".concat(dbName)] || \'\').trim();\n    if (!!url && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(url)) {\n      url = new URL(url);\n      if (url.pathname !== \'/\') {\n        // URL includes a DBName override \n        dbName = url.pathname.replace(\'/\', \'\');\n      }\n      var _url = url,\n        host = _url.host,\n        password = _url.password,\n        protocol = _url.protocol,\n        username = _url.username;\n      url = "".concat(protocol, "//").concat(username, ":").concat(password, "@").concat(host);\n      // re-use existing connection to the same URL if available\n      url = connections[url] || url;\n    }\n    this.connectionOrUrl = url || connectionOrUrl;\n    // whether to use the global connection or database specific\n    this.useGlobalCon = !this.connectionOrUrl;\n    this.db = null;\n    this.dbName = dbName;\n    this.fields = fields;\n\n    // Forces the application to immediately attempt to connect.\n    // This is required because "nano" (CouchDB\'s official NPM module) does not handle connection error properly \n    // and the entire application crashes. Neither try-catch nor async - await can catch this freakish error!\n    // Doing this will make sure database connection error is thrown on application startup and not later.\n    if (!this.useGlobalCon) this.getDB();\n  }\n\n  /**\n   * @name    delete\n   * @summary delete documents\n   * \n   * @param   {String|Object|Map|Array} ids   Possible values:\n   *                        1. String: document `_id`\n   *                        2. Object: document with `_id` property. Will be ignored if does not include `_id`.\n   *                        3. Map: collection of (2) with `_id` as key \n   *                        4. Array: collection of (1) or (2) or both.\n   * @returns {*}\n   */\n  _createClass(CouchDBStorage, [{\n    key: "delete",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var ids,\n          documents,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              ids = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];\n              ids = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr)(ids) ? ids : !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isMap)(ids) ? [ids]\n              // convert documents Map to array\n              : Array.from(ids).map(function (_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 2),\n                  _id = _ref3[0],\n                  doc = _ref3[1];\n                return _objectSpread(_objectSpread({}, doc), {}, {\n                  _id: _id\n                });\n              });\n              documents = ids.filter(function (x) {\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(x) && !!x._id && x._rev;\n              });\n              ids = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.arrUnique)(ids.filter(function (id) {\n                return !!id && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(id);\n              }));\n              // nothing do to!\n              if (!(!ids.length && !documents.length)) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt("return");\n            case 6:\n              _context2.t0 = [];\n              _context2.t1 = _toConsumableArray(documents);\n              _context2.t2 = _toConsumableArray;\n              if (!ids.length) {\n                _context2.next = 15;\n                break;\n              }\n              _context2.next = 12;\n              return this.getAll(ids, false);\n            case 12:\n              _context2.t3 = _context2.sent;\n              _context2.next = 16;\n              break;\n            case 15:\n              _context2.t3 = [];\n            case 16:\n              _context2.t4 = _context2.t3;\n              _context2.t5 = (0, _context2.t2)(_context2.t4);\n              documents = _context2.t0.concat.call(_context2.t0, _context2.t1, _context2.t5).filter(function (x) {\n                return x && !x._deleted;\n              }).map(function (d) {\n                return _objectSpread(_objectSpread({}, d), {}, {\n                  _deleted: true\n                });\n              });\n              if (documents.length) {\n                _context2.next = 21;\n                break;\n              }\n              return _context2.abrupt("return", []);\n            case 21:\n              _context2.next = 23;\n              return this.setAll(documents);\n            case 23:\n              return _context2.abrupt("return", _context2.sent);\n            case 24:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * @name    find\n     * @summary find the first item matching criteria\n     * \n     * @param   {Object} selector   CouchDB selector for mango query\n     * @param   {Object} extraProps (optional) extra properties to be supplied to mango query. Eg: for sorting.\n     * \n     * @returns {Object} document if available otherwise, undefined\n     */\n  }, {\n    key: "find",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(selector, extraProps, timeout) {\n        var docs;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.search(selector, 1, 0, false, extraProps, timeout);\n            case 2:\n              docs = _context3.sent;\n              return _context3.abrupt("return", docs[0]);\n            case 4:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function find(_x2, _x3, _x4) {\n        return _find.apply(this, arguments);\n      }\n      return find;\n    }()\n    /**\n     * @name    get\n     * @summary get document with specified fields. This method cannot retrieve any design documents.\n     * \n     * @param   {String} id     document ID. (the `_id` property)\n     * @param   {Array}  fields list of properties to retrieve. \n     * \n     * @returns {Object} document if available otherwise, undefined\n     */\n  }, {\n    key: "get",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id) {\n        var fields,\n          timeout,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              fields = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : this.fields;\n              timeout = _args4.length > 2 ? _args4[2] : undefined;\n              _context4.next = 4;\n              return this.find({\n                _id: id\n              }, (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr)(fields) ? {\n                fields: fields\n              } : undefined, timeout);\n            case 4:\n              return _context4.abrupt("return", _context4.sent);\n            case 5:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function get(_x5) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n    /**\n     * @name    getDoc\n     * @summary retrieve a document with all properties. This method can retrieve design documents.\n     * \n     * @param   {String} id document ID. (the `_id` property)\n     * \n     * @returns {Object}\n     */\n  }, {\n    key: "getDoc",\n    value: function () {\n      var _getDoc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(id) {\n        var db;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.getDB();\n            case 2:\n              db = _context5.sent;\n              _context5.prev = 3;\n              _context5.next = 6;\n              return db.get(id);\n            case 6:\n              return _context5.abrupt("return", _context5.sent);\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5["catch"](3);\n            case 11:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[3, 9]]);\n      }));\n      function getDoc(_x6) {\n        return _getDoc.apply(this, arguments);\n      }\n      return getDoc;\n    }()\n    /**\n     * @name    getAll\n     * @summary get all or specific documents from a database.\n     * \n     * @param   {Array|Null} ids    (optional) If document IDs supplied will retrieve all relevant documents in one go.\n     *                              Otherwise, will retrieve paginated documents by using `skip` and `limit`. \n     * @param   {Boolean}    asMap  whether to return result as an `Array` or `Map`.\n     *                              Default: true\n     * @param   {Number}     limit  (optional) maximum number of items to retrieve in one go.\n     *                              Ignored if `ids` supplied.\n     *                              Default: 25\n     * @param   {Number}     skip   (optional) for pagination, number of items to skip.\n     *                              Ignored if `ids` supplied.\n     *                              Default: 0\n     * @param   {Object}     extraProps extra properties to be supplied to `searchRaw()`.\n     *                              Can be used for sorting, limiting which fields to retrieve etc.\n     *                              Only used when no IDs supplied.\n     * @param   {Number}    timeout timeout duration in milliseconds (only when no IDs supplied).\n     *                              Default: `15000`\n     * @returns {Map|Array}\n     */\n  }, {\n    key: "getAll",\n    value: function () {\n      var _getAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var ids,\n          asMap,\n          limit,\n          skip,\n          extraProps,\n          timeout,\n          db,\n          paginate,\n          rows,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              ids = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : [];\n              asMap = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : true;\n              limit = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : 25;\n              skip = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : 0;\n              extraProps = _args6.length > 4 && _args6[4] !== undefined ? _args6[4] : {};\n              timeout = _args6.length > 5 ? _args6[5] : undefined;\n              _context6.next = 8;\n              return this.getDB();\n            case 8:\n              db = _context6.sent;\n              // if ids supplied only retrieve only those otherwise, retrieve all (paginated)\n              paginate = !ids || ids.length === 0;\n              if (!paginate) {\n                _context6.next = 16;\n                break;\n              }\n              _context6.next = 13;\n              return this.searchRaw({}, limit, skip, extraProps);\n            case 13:\n              _context6.t0 = _context6.sent.docs;\n              _context6.next = 19;\n              break;\n            case 16:\n              _context6.next = 18;\n              return db.fetch({\n                keys: ids\n              });\n            case 18:\n              _context6.t0 = _context6.sent.rows.map(function (x) {\n                return x.doc;\n              }).filter(Boolean);\n            case 19:\n              rows = _context6.t0;\n              return _context6.abrupt("return", asMap ? new Map(rows.map(function (x) {\n                return [x._id, x];\n              })) : rows);\n            case 21:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getAll() {\n        return _getAll.apply(this, arguments);\n      }\n      return getAll;\n    }()\n    /**\n     * @name        getDB\n     * @summary     Connect to CouchDB and then create new or re-use existing `db` instance\n     * @description Will create new database, if does not exist.\n     */\n  }, {\n    key: "getDB",\n    value: function () {\n      var _getDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _this = this;\n        var dbName, con;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!this.db) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt("return", this.db);\n            case 2:\n              if (!this.dbPromise) {\n                _context8.next = 6;\n                break;\n              }\n              _context8.next = 5;\n              return this.dbPromise;\n            case 5:\n              return _context8.abrupt("return", _context8.sent);\n            case 6:\n              dbName = this.dbName;\n              if (dbName) {\n                _context8.next = 9;\n                break;\n              }\n              throw new Error(\'CouchDB: missing database name\');\n            case 9:\n              if (!(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(this.connectionOrUrl)) {\n                _context8.next = 15;\n                break;\n              }\n              _context8.next = 12;\n              return this.connectionOrUrl;\n            case 12:\n              _context8.t0 = _context8.sent;\n              _context8.next = 18;\n              break;\n            case 15:\n              _context8.next = 17;\n              return getConnection(this.connectionOrUrl, this.useGlobalCon);\n            case 17:\n              _context8.t0 = _context8.sent;\n            case 18:\n              con = _context8.t0;\n              if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(con)) {\n                _context8.next = 21;\n                break;\n              }\n              throw new Error(\'CouchDB: invalid connection\');\n            case 21:\n              this.dbPromise = this.dbPromise || new _PromisE__WEBPACK_IMPORTED_MODULE_2__["default"](function (resolve, reject) {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n                  var dbNames;\n                  return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                    while (1) switch (_context7.prev = _context7.next) {\n                      case 0:\n                        _context7.prev = 0;\n                        _context7.next = 3;\n                        return con.db.list();\n                      case 3:\n                        dbNames = _context7.sent;\n                        if (dbNames.includes(dbName)) {\n                          _context7.next = 8;\n                          break;\n                        }\n                        // database doesn\'t exist, create it\n                        console.log("".concat(debugTag, " new database created: ").concat(dbName));\n                        _context7.next = 8;\n                        return con.db.create(dbName).catch(function (err) {\n                          return "".concat(err).includes(\'already exists\') ? null : Promise.reject(err);\n                        });\n                      case 8:\n                        _context7.next = 10;\n                        return con.use(dbName);\n                      case 10:\n                        _this.db = _context7.sent;\n                        resolve(_this.db);\n                        _this.dbPromise = null;\n                        _context7.next = 18;\n                        break;\n                      case 15:\n                        _context7.prev = 15;\n                        _context7.t0 = _context7["catch"](0);\n                        reject(_context7.t0);\n                      case 18:\n                      case "end":\n                        return _context7.stop();\n                    }\n                  }, _callee7, null, [[0, 15]]);\n                }))();\n              });\n              _context8.next = 24;\n              return this.dbPromise;\n            case 24:\n              return _context8.abrupt("return", _context8.sent);\n            case 25:\n            case "end":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getDB() {\n        return _getDB.apply(this, arguments);\n      }\n      return getDB;\n    }()\n    /**\n     * @name    search\n     * @summary search for documents using CouchDB mango query\n     * \n     * @param   {Object}  selector   For documentation visit:\n     *                               https://docs.couchdb.org/en/stable/api/database/find.html#selector-syntax\n     * @param   {Number}  limit      (optional) number of items to retrieve \n     *                               Default: 100\n     * @param   {Number}  skip       (optional) number of items to skip\n     *                               Default: 0 (unlimited)\n     * @param   {Boolean} asMap      (optional) whether to return result as an `Array` or `Map`\n     *                               Default: true\n     * @param   {Object}  extraProps (optional) extra properties to be supplied to to the mango query\n     * @param   {Number}    timeout     query timeout duration in milliseconds.\n     *                                  Default: `30000`\n     * \n     * @returns {Map|Array}\n     */\n  }, {\n    key: "search",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var selector,\n          limit,\n          skip,\n          asMap,\n          extraProps,\n          timeout,\n          result,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              selector = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n              limit = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : 0;\n              skip = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : 0;\n              asMap = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : true;\n              extraProps = _args9.length > 4 ? _args9[4] : undefined;\n              timeout = _args9.length > 5 ? _args9[5] : undefined;\n              if (!(!(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(selector) || Object.keys(selector).length === 0)) {\n                _context9.next = 8;\n                break;\n              }\n              return _context9.abrupt("return", asMap ? new Map() : []);\n            case 8:\n              _context9.next = 10;\n              return this.searchRaw(selector, limit, skip, extraProps, timeout);\n            case 10:\n              result = _context9.sent;\n              return _context9.abrupt("return", !asMap ? result.docs : new Map(result.docs.map(function (doc) {\n                return [doc._id, doc];\n              })));\n            case 12:\n            case "end":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function search() {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n    /**\n     * @name    searchRaw\n     * @summary sugar for `db.find()`\n     * \n     * @param   {Object}    selector \n     * @param   {Number}    limit \n     * @param   {Number}    skip \n     * @param   {Object}    extraProps\n     * @param   {Number}    timeout     query timeout duration in milliseconds.\n     *                                  Default: `30000`\n     * \n     * @returns {Array}\n     */\n  }, {\n    key: "searchRaw",\n    value: function () {\n      var _searchRaw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var selector,\n          limit,\n          skip,\n          extraProps,\n          timeout,\n          db,\n          query,\n          _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              selector = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n              limit = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : 0;\n              skip = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : 0;\n              extraProps = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : {};\n              timeout = _args10.length > 4 && _args10[4] !== undefined ? _args10[4] : 30000;\n              _context10.next = 7;\n              return this.getDB();\n            case 7:\n              db = _context10.sent;\n              query = _objectSpread(_objectSpread({\n                fields: this.fields\n              }, extraProps), {}, {\n                selector: selector,\n                limit: limit === 0 ? undefined : limit,\n                skip: skip\n              });\n              _context10.next = 11;\n              return _PromisE__WEBPACK_IMPORTED_MODULE_2__["default"].timeout(db.find(query), timeout);\n            case 11:\n              return _context10.abrupt("return", _context10.sent);\n            case 12:\n            case "end":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function searchRaw() {\n        return _searchRaw.apply(this, arguments);\n      }\n      return searchRaw;\n    }()\n    /**\n     * @name    searchMulti\n     * @param   {Object}    selectors \n     * @param   {Boolean}   all         if falsy, will return as soon as any of the selectors retuns one or more results\n     * \n     * @returns {Map}\n     */\n  }, {\n    key: "searchMulti",\n    value: function () {\n      var _searchMulti = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var selectors,\n          limit,\n          all,\n          result,\n          i,\n          selector,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              selectors = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : [];\n              limit = _args11.length > 1 ? _args11[1] : undefined;\n              all = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : true;\n              result = new Map();\n              i = 0;\n            case 5:\n              if (!(i < selectors.length)) {\n                _context11.next = 18;\n                break;\n              }\n              if (!(result.size > 0 && !all)) {\n                _context11.next = 8;\n                break;\n              }\n              return _context11.abrupt("return", result);\n            case 8:\n              selector = selectors[i];\n              _context11.t0 = _utils__WEBPACK_IMPORTED_MODULE_3__.mapJoin;\n              _context11.t1 = result;\n              _context11.next = 13;\n              return this.search(selector, limit);\n            case 13:\n              _context11.t2 = _context11.sent;\n              result = (0, _context11.t0)(_context11.t1, _context11.t2);\n            case 15:\n              i++;\n              _context11.next = 5;\n              break;\n            case 18:\n              return _context11.abrupt("return", result);\n            case 19:\n            case "end":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function searchMulti() {\n        return _searchMulti.apply(this, arguments);\n      }\n      return searchMulti;\n    }()\n    /**\n     * @name    set \n     * @summary create or update document\n     * \n     * @param   {String}    id      (optional) if exists, will update document\n     * @param   {Object}    value   \n     * @param   {Boolean}   update  (optional) whether to allow updating existing document.\n     *                              If truthy, will automatically check if `@id` already exists.\n     *                              If false and `@id` exists and correct `@value._rev` not already supplied, CouchDB \n     *                              will throw an error.\n     *                              Default: `true`\n     * @param   {Boolean}   merge   (optional) whether to merge `@value` with exiting entry.\n     *                              Only applicable if `@update` is truthy.\n     *                              Default: `true`\n     * @param   {Number}    timeout timeout duration in milliseconds for save operation.\n     *                              Default: `3000`\n     * \n     *\n     * @returns {Object}\n     */\n  }, {\n    key: "set",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(id, value) {\n        var update,\n          merge,\n          timeout,\n          updateTS,\n          db,\n          existingDoc,\n          _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              update = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : true;\n              merge = _args12.length > 3 && _args12[3] !== undefined ? _args12[3] : true;\n              timeout = _args12.length > 4 && _args12[4] !== undefined ? _args12[4] : 10000;\n              updateTS = _args12.length > 5 && _args12[5] !== undefined ? _args12[5] : true;\n              id = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(id) ? id : uuid__WEBPACK_IMPORTED_MODULE_1___default().v1();\n              _context12.next = 7;\n              return this.getDB();\n            case 7:\n              db = _context12.sent;\n              _context12.t0 = update;\n              if (!_context12.t0) {\n                _context12.next = 13;\n                break;\n              }\n              _context12.next = 12;\n              return this.get(id, []);\n            case 12:\n              _context12.t0 = _context12.sent;\n            case 13:\n              existingDoc = _context12.t0;\n              if (existingDoc) {\n                // attach `_rev` to execute an update operation\n                value = !merge ? value : _objectSpread(_objectSpread({}, existingDoc), value);\n                // make sure _rev is latest\n                value._rev = existingDoc._rev;\n              }\n              updateTS && setTs(value, existingDoc);\n              _context12.next = 18;\n              return _PromisE__WEBPACK_IMPORTED_MODULE_2__["default"].timeout(db.insert(value, id), timeout);\n            case 18:\n              return _context12.abrupt("return", _context12.sent);\n            case 19:\n            case "end":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function set(_x7, _x8) {\n        return _set.apply(this, arguments);\n      }\n      return set;\n    }()\n    /**\n     * @name    setAll \n     * @summary bulk add or update documents in single request\n     *\n     * @param   {Array|Map} docs            documents to add or update\n     * @param   {Boolean}   ignoreIfExists  (optional) if `true`, will prevent overriding existing documents.\n     *                                      Default: `false`\n     * @param   {Number}    timeout         bulk save operation timeout duration in milliseconds\n     *\n     * @returns {*}\n     */\n  }, {\n    key: "setAll",\n    value: function () {\n      var _setAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(docs) {\n        var ignoreIfExists,\n          timeout,\n          updateTS,\n          db,\n          i,\n          doc,\n          existingDoc,\n          promise,\n          _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              ignoreIfExists = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : false;\n              timeout = _args13.length > 2 ? _args13[2] : undefined;\n              updateTS = _args13.length > 3 && _args13[3] !== undefined ? _args13[3] : true;\n              if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isMap)(docs)) {\n                // convert Map to Array\n                docs = Array.from(docs).map(function (_ref5) {\n                  var _ref6 = _slicedToArray(_ref5, 2),\n                    _id = _ref6[0],\n                    item = _ref6[1];\n                  return _objectSpread(_objectSpread({}, item), {}, {\n                    _id: _id\n                  });\n                });\n              }\n              if (docs.length) {\n                _context13.next = 6;\n                break;\n              }\n              return _context13.abrupt("return");\n            case 6:\n              _context13.next = 8;\n              return this.getDB();\n            case 8:\n              db = _context13.sent;\n              i = 0;\n            case 10:\n              if (!(i < docs.length)) {\n                _context13.next = 27;\n                break;\n              }\n              doc = docs[i];\n              if (!(!doc._id || doc._rev)) {\n                _context13.next = 14;\n                break;\n              }\n              return _context13.abrupt("continue", 24);\n            case 14:\n              _context13.next = 16;\n              return this.get(doc._id, []);\n            case 16:\n              existingDoc = _context13.sent;\n              if (existingDoc) {\n                _context13.next = 19;\n                break;\n              }\n              return _context13.abrupt("continue", 24);\n            case 19:\n              if (!ignoreIfExists) {\n                _context13.next = 22;\n                break;\n              }\n              docs[i] = null;\n              return _context13.abrupt("continue", 24);\n            case 22:\n              // attach `_rev` to prevent conflicts when updating existing items\n              doc._rev = existingDoc._rev;\n              updateTS && setTs(doc, existingDoc);\n            case 24:\n              i++;\n              _context13.next = 10;\n              break;\n            case 27:\n              promise = db.bulk({\n                docs: docs.filter(Boolean)\n              });\n              _context13.next = 30;\n              return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isValidNumber)(timeout) ? _PromisE__WEBPACK_IMPORTED_MODULE_2__["default"].timeout(promise, timeout) : promise;\n            case 30:\n              return _context13.abrupt("return", _context13.sent);\n            case 31:\n            case "end":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function setAll(_x9) {\n        return _setAll.apply(this, arguments);\n      }\n      return setAll;\n    }()\n    /**\n     * @name    view\n     * @summary query a specific CouchDB "view"\n     * \n     * @param   {String} designName \n     * @param   {String} viewName \n     * @param   {Object} params         (optional)\n     * @param   {Object} includeDocs    (optional) use `false` for map-reduce functions.\n     *                                  Default: `true`\n     * \n     * @returns {Array}\n     */\n  }, {\n    key: "view",\n    value: function () {\n      var _view = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(designName, viewName, params) {\n        var includeDocs,\n          db,\n          _yield$db$view,\n          _yield$db$view$rows,\n          rows,\n          _args14 = arguments;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              includeDocs = _args14.length > 3 && _args14[3] !== undefined ? _args14[3] : true;\n              _context14.next = 3;\n              return this.getDB();\n            case 3:\n              db = _context14.sent;\n              _context14.next = 6;\n              return db.view(designName, viewName, _objectSpread({\n                include_docs: includeDocs\n              }, params));\n            case 6:\n              _yield$db$view = _context14.sent;\n              _yield$db$view$rows = _yield$db$view.rows;\n              rows = _yield$db$view$rows === void 0 ? [] : _yield$db$view$rows;\n              return _context14.abrupt("return", includeDocs ? rows.map(function (x) {\n                return x.doc;\n              }) : rows);\n            case 10:\n            case "end":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function view(_x10, _x11, _x12) {\n        return _view.apply(this, arguments);\n      }\n      return view;\n    }()\n    /**\n     * @name    viewCreateMap\n     * @summary create/update a design document with a map function. Ignores if exact same function already exists.\n     * \n     * @param   {String} designName \n     * @param   {String} viewName \n     * @param   {String} mapFunc    The map function as a string\n     * @param   {String} reduceFunc (optional) redunce function as string. \n     *                              Built-in reduce functions: \'_approx_count_distinct\', \'_count\', \'_stats\' and \'_sum\'\n     * \n     * @returns {Object}\n     */\n  }, {\n    key: "viewCreateMap",\n    value: function () {\n      var _viewCreateMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(designName, viewName, mapFunc, reduceFunc) {\n        var designDoc, view, action;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              // create design document to enable case-insensitive search of twitter handles\n              if (!designName.startsWith(\'_design/\')) designName = "_design/".concat(designName);\n              _context15.next = 3;\n              return this.getDoc(designName);\n            case 3:\n              _context15.t0 = _context15.sent;\n              if (_context15.t0) {\n                _context15.next = 6;\n                break;\n              }\n              _context15.t0 = {\n                _id: designName,\n                language: \'javascript\',\n                views: {}\n              };\n            case 6:\n              designDoc = _context15.t0;\n              view = designDoc.views[viewName]; // map function already exists\n              if (!(!!view && view.map === mapFunc && view.reduce === reduceFunc)) {\n                _context15.next = 10;\n                break;\n              }\n              return _context15.abrupt("return");\n            case 10:\n              designDoc.views[viewName] = {\n                map: mapFunc\n              };\n              if (reduceFunc) {\n                designDoc.views[viewName].reduce = reduceFunc;\n              }\n              action = designDoc._rev ? \'Updating\' : \'Creating\';\n              console.log("".concat(debugTag, " ").concat(action, " design document: ").concat(this.dbName, "/").concat(designName));\n              _context15.next = 16;\n              return this.set(designName, designDoc);\n            case 16:\n              return _context15.abrupt("return", _context15.sent);\n            case 17:\n            case "end":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function viewCreateMap(_x13, _x14, _x15, _x16) {\n        return _viewCreateMap.apply(this, arguments);\n      }\n      return viewCreateMap;\n    }()\n  }]);\n  return CouchDBStorage;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/CouchDBStorage.js\n')},"./src/utils/DataStorage.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ DataStorage),\n/* harmony export */   "getStorage": () => (/* binding */ getStorage),\n/* harmony export */   "read": () => (/* binding */ read),\n/* harmony export */   "rxForceUpdateCache": () => (/* binding */ rxForceUpdateCache),\n/* harmony export */   "write": () => (/* binding */ _write)\n/* harmony export */ });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n/* For NodeJS (non-browser applications) the following node module is required: node-localstorage */\n\n/**\n * @name    rxForceUpdateCache\n * @summary force all or certain instances of DataStorage to reload data from storage\n * \n * @param   {Boolean|Array}\n * \n * @example \n * ```javascript\n * // Update only certain modules\n * const moduleKey = \'totem_identities\'\n * rxForceUpdateCache.next([moduleKey])\n * \n * // Update every single instance of DataStorage that uses storage (has a "name")\n * rxForceUpdateCache.next(true)\n * ```\n */\nvar rxForceUpdateCache = new rxjs__WEBPACK_IMPORTED_MODULE_1__/* .Subject */ .x();\nvar _storage = getStorage();\n\n/**\n * \n * @param location The location in which the local storage resides\n * @param quota The partitioned size of the local storage\n * \n * @returns { LocalStorage }\n */\nfunction getStorage(storagePath, quota) {\n  try {\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNodeJS)()) {\n      var _require = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module \'node-localstorage\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }())),\n        LocalStorage = _require.LocalStorage;\n      // for NodeJS server\n      storagePath = storagePath || "MISSING_ENV_VAR".STORAGE_PATH || \'./data\';\n      var fileLimit = "MISSING_ENV_VAR".STORAGE_FILE_LIMIT;\n      var absolutePath = (__webpack_require__("?a42a").resolve)(storagePath);\n      quota = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(quota) ? quota : parseInt(fileLimit || 500 * 1024 * 1024 * 1024);\n      console.log(\'DataStorage\', {\n        STORAGE_PATH: storagePath,\n        absolutePath: absolutePath\n      });\n      return new LocalStorage(absolutePath, quota);\n    } else if (localStorage) {\n      // for web browser\n      return localStorage;\n    }\n  } catch (err) {\n    /* ignore error if not nodejs */\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNodeJS)() && err.message.toLowerCase().includes(\'no such file or directory\')) throw err;\n  }\n  console.warn(\'DataStorage: storage not supported. Writing data will not work. Using workaround to avoid error.\');\n  // Hack for IFrame or if "node-localstorage" module is not available.\n  // Caution: All data will be lost as soon as application is closed.\n  var storage = new DataStorage();\n  storage.getItem = function () {\n    return storage.get.apply(storage, arguments);\n  };\n  storage.setItem = function () {\n    return storage.set.apply(storage, arguments);\n  };\n  return storage;\n}\n\n/**\n * @name    read\n * @summary read from storage (JSON file if NodeJS, otherwise, browser LocalStorage)\n *\n * @param   {String} key file name (NodeJS) or property key (LocalStorage)\n * \n * @returns {Map}        retieved data\n */\nvar read = function read(key) {\n  var asMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var storage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _storage;\n  var data = undefined;\n  try {\n    data = JSON.parse(storage.getItem(key));\n  } catch (_) {}\n  return !asMap ? data : new Map(data || []);\n};\n\n/**\n * @name    write\n * @summary write to storage (JSON file if NodeJS, otherwise, browser LocalStorage)\n * \n * @param   {String}    key     file name (NodeJS) or property key (LocalStorage)\n * @param   {String|*}  value   will be converted to JSON string\n * @param   {Boolean}   asMap   indicates whether value is a Map\n * @param   {String|*}  value   will be converted to JSON string\n * @param   {String|*}  value   will be converted to JSON string\n * @param   {String|*}  value   will be converted to JSON string\n */\nvar _write = function write(key, value) {\n  var asMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var storage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _storage;\n  var silent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  // invalid key: ignore request\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(key)) return;\n  try {\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(value)) {\n      value = JSON.stringify(asMap ? Array.from(value) : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArrLike)(value) ? _toConsumableArray(value.values()) : value);\n    }\n    storage.setItem(key, value);\n    return true;\n  } catch (err) {\n    if (!silent) throw err;\n    console.error(\'DataStorage: failed to write file.\', err);\n  }\n};\n\nvar DataStorage = /*#__PURE__*/function () {\n  /**\n   * @name DataStorage\n   * @summary a wrapper to read/write to LocalStorage (browser) or JSON file (NodeJS) with added features.\n   * @description Notes:\n   *  - this is a key-value storage that mimics the structure of `Map` and add extra functionalities like search.\n   *  - `name` is not supplied: `disableCache` will always be assumed true\n   *  - `disableCache = true`: reads once from storage and and only write when necessary.\n   *  - `disableCache = false`: data is never preserved in-memory and every read/write \n   *      operation will be directly from/to the appropriate storage\n   *\n   * @param {String}    name          filename (NodeJS) or property name (browser LocalStorage).\n   * @param {Boolean}   disableCache  (optional) Whether to keep data in-memory. \n   *                                  Default: `false`\n   * @param {Function}  onChange      (optional) callback to be invoked on change of data.\n   *                                  See Subject/BehaviorSubject.subscribe for more details.\n   * @param {Map}       initialValue  (optional) Default: new Map()\n   */\n  function DataStorage(name) {\n    var _this = this;\n    var disableCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var initialValue = arguments.length > 2 ? arguments[2] : undefined;\n    var onChange = arguments.length > 3 ? arguments[3] : undefined;\n    var storage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _storage;\n    _classCallCheck(this, DataStorage);\n    var data = name && read(name, true, storage) || initialValue;\n    data = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isMap)(data) ? new Map((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr2D)(data) ? data : undefined) : data;\n    this.name = name;\n    this.disableCache = name && disableCache;\n    this.rxData = this.disableCache ? new rxjs__WEBPACK_IMPORTED_MODULE_1__/* .Subject */ .x() : new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .BehaviorSubject */ .X(data);\n    // `this.save` can be used to skip write operations temporarily by setting it to false\n    this.save = true;\n    this.storage = storage;\n    var ignoredFirst = this.disableCache;\n    this.rxData.subscribe(function (data) {\n      if (!ignoredFirst) {\n        // prevent save operation on startup when BehaviorSubject is used\n        ignoredFirst = true;\n        return;\n      }\n      _this.write(data);\n      _this.save = true;\n      (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(onChange) && onChange(data);\n    });\n    if (this.disableCache) return;\n\n    // update cached data from localStorage throughout the application only when triggered\n    rxForceUpdateCache.subscribe(function (refresh) {\n      var doRefresh = !_this.name ? false : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(refresh) || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(refresh) ? refresh.includes(_this.name) : refresh === true;\n      if (!doRefresh) return;\n      var data = read(_this.name, true, storage);\n      // prevent (unnecessary) writing to storage\n      _this.save = false;\n      _this.rxData.next(data);\n    });\n  }\n\n  /**\n   * @name    clear\n   * @summary clear stoarge data\n   * \n   * @returns {DataStorage} this\n   */\n  _createClass(DataStorage, [{\n    key: "clear",\n    value: function clear() {\n      return this.setAll(new Map(), true);\n    }\n\n    /**\n     * @name    delete\n     * @summary delete one or more items by their respective keys\n     * \n     * @param   {Array|String} keys one or more keys\n     * \n     * @returns {DataStorage}  reference to the DataStorage instance\n     */\n  }, {\n    key: "delete",\n    value: function _delete() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var data = this.getAll();\n      keys = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(keys) ? keys : [keys];\n      // nothing to do\n      if (!keys.length) return this;\n      keys.forEach(function (key) {\n        return data.delete(key);\n      });\n      this.rxData.next(data);\n      return this;\n    }\n\n    /**\n     * @name    find\n     * @summary find the first item matching criteria. Uniqueness is not guaranteed.\n     *\n     * @param   {Object}  keyValues  Object with property names and the the value to match\n     * @param   {Boolean} matchExact (optional) fulltext or partial search. Default: false\n     * @param   {Boolean} matchAll   (optional) AND/OR operation for keys in @keyValues. Default: false\n     * @param   {Boolean} ignoreCase (optional) case-sensitivity of the search. Default: false\n     */\n  }, {\n    key: "find",\n    value: function find(keyValues, matchExact, matchAll, ignoreCase) {\n      var result = this.search(keyValues, matchExact, matchAll, ignoreCase, 1);\n      return result.size === 0 ? null : Array.from(result)[0][1];\n    }\n\n    /**\n     * @name    get\n     * @summary get item by key\n     * \n     * @param   {String} key \n     * \n     * @returns {*} value stored for the supplied @key\n     */\n  }, {\n    key: "get",\n    value: function get(key) {\n      return this.getAll().get(key);\n    }\n\n    /**\n     * @name    forceRead\n     * @summary force read from storage\n     * \n     * @param   {Boolean} forceRead \n     * \n     * @returns {Map} data\n     */\n  }, {\n    key: "getAll",\n    value: function getAll() {\n      var forceRead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!forceRead && !this.disableCache) return this.rxData.value;\n      var data = read(this.name, true, this.storage);\n      return data;\n    }\n\n    /**\n     * @name    has\n     * @summary check if key exists\n     * \n     * @param   {String}    key \n     * \n     * @returns {Boolean}\n     */\n  }, {\n    key: "has",\n    value: function has(key) {\n      return this.getAll().has(key);\n    }\n\n    /**\n     * @name    keys\n     * \n     * @returns {Array}\n     */\n  }, {\n    key: "keys",\n    value: function keys() {\n      return _toConsumableArray(this.getAll().keys());\n    }\n\n    /**\n     * @name map\n     * @summary map each item on the data to an Array. This is a shorhand for `Array.from(this.getAll()).map(cb)`\n     * @param {Function} callback callback function to execute for each item in the list. 3 arguments supplied:\n     *                              @item   Array: Each item will contain key and value in an array. Eg: [key, value]\n     *                              @index  Number\n     *                              @array  Array: The entire Map in a 2D Array. Eg: [[key, value], [key2, value2]]\n     * \n     * @returns {Array} array of items returned by callback\n     */\n  }, {\n    key: "map",\n    value: function map(callback) {\n      return this.toArray().map(callback);\n    }\n\n    /**\n     * @name    search\n     * @summary partial or fulltext search on storage data\n     * \n     * @param   {Object}  keyValues  Object with property names and the the value to match\n     * @param   {Boolean} matchExact (optional) fulltext or partial search. Default: false\n     * @param   {Boolean} matchAll   (optional) AND/OR operation for keys in @keyValues. Default: false\n     * @param   {Boolean} ignoreCase (optional) case-sensitivity of the search. Default: false.\n     * @param   {Number}  limit      (optional) limits number of results. Default: 0 (no limit)\n     * \n     * @returns {Map}     result\n     */\n  }, {\n    key: "search",\n    value: function search(keyValues) {\n      var matchExact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var matchAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var ignoreCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var result = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.mapSearch)(this.getAll(), keyValues, matchExact, matchAll, ignoreCase);\n      var doLimit = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(limit) && limit > 0 && result.size > limit;\n      return !doLimit ? result : new Map(Array.from(result).slice(0, limit));\n    }\n\n    /**\n     * @name    set\n     * @summary save/update an item\n     * \n     * @param   {String|Number|Boolean} key \n     * @param   {*} value \n     * \n     * @returns {DataStorage} reference to the DataStorage instance\n     */\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(key)) return this;\n      var data = this.getAll();\n      data.set(key, value);\n      this.rxData.next(data);\n      return this;\n    }\n\n    /**\n     * @name    setAll\n     * @summary set multiple items at one go\n     * \n     * @param   {Map}     data      list of items\n     * @param   {Boolean} override  whether to override or merge with existing data\n     * @param   {Boolean} writeNow  whether to immediately write to storage. \n     *                              If truthy, will throw error if fails to write to strorage\n     * \n     * @returns {DataStorage}      reference to the DataStorage instance\n     */\n  }, {\n    key: "setAll",\n    value: function setAll(data) {\n      var override = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var writeNow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isMap)(data)) return this;\n      if (!override) {\n        // merge data\n        var existing = this.getAll();\n        Array.from(data).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n          return existing.set(key, value);\n        });\n        data = existing; // merged value\n      }\n\n      if (writeNow) {\n        this.save = false;\n        this.write(data, false);\n        this.save = true;\n      }\n      this.rxData.next(data);\n      return this;\n    }\n\n    /**\n     * @name    size\n     * @summary size of the data Map\n     * \n     * @returns {Number}\n     */\n  }, {\n    key: "size",\n    get: function get() {\n      return this.getAll().size;\n    }\n\n    /**\n     * @name    sort\n     * @summary sort data by key or simply reverse the entire list. Optionally, save sorted data to storage.\n     * \n     * @param   {Boolean} reverse whether to reverse reverse sort. Deafult: false\n     * @param   {String}  key     (optional) sort by specific key. If `!key && !!reverse`, reverse the entire list.\n     * @param   {Boolean} save    (optional) whether to save sorted data to storage. Default: false\n     * \n     * @retuns  {Map}\n     */\n  }, {\n    key: "sort",\n    value: function sort(key) {\n      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var save = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var data = this.getAll();\n      if (!key && !reverse) return data; // nothing to do\n\n      data = !key ? new Map(Array.from(data).reverse()) : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.mapSort)(data, key, reverse);\n      if (save) this.setAll(data);\n      return data;\n    }\n\n    /**\n     * @name    toArray\n     * @summary convert list of items (Map) to 2D Array\n     * \n     * @returns {Array}\n     */\n  }, {\n    key: "toArray",\n    value: function toArray() {\n      return Array.from(this.getAll());\n    }\n\n    /**\n     * @name    toJSON\n     * @summary converts list of items (Map) to JSON string of 2D Array \n     * \n     * @param   {Function}  replacer (optional) for use with `JSON.stringify`. Default: null\n     * @param   {Number}    spacing  (optional) for use with `JSON.stringify`. Default: 0\n     * \n     * @returns {String}    JSON string\n     */\n  }, {\n    key: "toJSON",\n    value: function toJSON(replacer, spacing) {\n      return JSON.stringify(this.toArray(), replacer, spacing);\n    }\n\n    /**\n     * @name    toString\n     * @summary converts list of items (Map) to JSON string of 2D Array \n     * \n     * @param   {Function}  replacer (optional) for use with `JSON.stringify`. Default: null\n     * @param   {Number}    spacing  (optional) for use with `JSON.stringify`. Default: 0\n     * \n     * @returns {String}    JSON string\n     */\n  }, {\n    key: "toString",\n    value: function toString() {\n      return this.toJSON(null, 4);\n    }\n\n    /**\n     * @name    values\n     * \n     * @returns {Array}\n     */\n  }, {\n    key: "values",\n    value: function values() {\n      return _toConsumableArray(this.getAll().values());\n    }\n\n    /**\n     * @name    write\n     * @summary trigger a synchronous write operation to the localStorage (browser) or file (NodeJS).\n     * If storage doesn\'t have a `name` or `save` property is falsy will skip writing.\n     * \n     * @param {Boolean} silent  Whether to throw error if write operation fails.\n     *                          Will print error message, regardless.\n     */\n  }, {\n    key: "write",\n    value: function write(data) {\n      var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.name && this.save && _write(this.name, data, true, this.storage, silent);\n    }\n  }]);\n  return DataStorage;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/DataStorage.js\n')},"./src/utils/DiscordBotHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "sendMessage": () => (/* binding */ sendMessage)\n/* harmony export */ });\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/PromisE.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n// import { Client, Message } from \'discord.js\'\n// import { BehaviorSubject } from \'rxjs\'\n\n// const token = process.env.Discord_Bot_Token\n// // Create an instance of a Discord client\n// const client = new Client()\n\n// // WIP\n// class DiscordBot {\n//     constructor(token) {\n//         this.client = new Client()\n//         this.token = token\n//         this.rxIsReady = new BehaviorSubject(false)\n//     }\n\n//     login() {\n//         return new Promise(async (resolve, reject) => {\n//             const loginResult = await this.client.login(this.token)\n//             console.log({ loginResult })\n//             const onResult = this.client.on(\'ready\', (x) => {\n//                 console.log(\'Bot ready\', x)\n//                 this.rxIsReady.next(true)\n//             })\n//             console.log({ onResult })\n//         })\n//     }\n\n//     async sendMessage() {\n//         await this.login()\n//         new Message(this.client, {}, \'\')\n//     }\n// }\n// export default new DiscordBot(token)\n\nvar sendMessage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var content,\n      tag,\n      username,\n      webhookUrl,\n      avatar_url,\n      timeout,\n      contentRedacted,\n      split,\n      limit,\n      embedMarkup,\n      isEmbed,\n      numMessages,\n      i,\n      startIndex,\n      part,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          content = _args.length > 0 && _args[0] !== undefined ? _args[0] : \'\';\n          tag = _args.length > 1 ? _args[1] : undefined;\n          username = _args.length > 2 && _args[2] !== undefined ? _args[2] : "MISSING_ENV_VAR".DISCORD_WEBHOOK_USERNAME || \'Logger\';\n          webhookUrl = _args.length > 3 && _args[3] !== undefined ? _args[3] : "MISSING_ENV_VAR".DISCORD_WEBHOOK_URL;\n          avatar_url = _args.length > 4 && _args[4] !== undefined ? _args[4] : "MISSING_ENV_VAR".DISCORD_WEBHOOK_AVATAR_URL;\n          timeout = _args.length > 5 && _args[5] !== undefined ? _args[5] : 60000;\n          contentRedacted = _args.length > 6 && _args[6] !== undefined ? _args[6] : sendMessage.redactRegex ? content.replace(sendMessage.redactRegex, \'\') : content;\n          split = _args.length > 7 && _args[7] !== undefined ? _args[7] : false;\n          limit = _args.length > 8 && _args[8] !== undefined ? _args[8] : 2000;\n          if (!(content.length > limit)) {\n            _context.next = 26;\n            break;\n          }\n          if (!split) {\n            _context.next = 25;\n            break;\n          }\n          embedMarkup = \'>>> \';\n          isEmbed = contentRedacted.startsWith(embedMarkup);\n          limit = isEmbed ? limit - 4 : limit;\n          numMessages = Math.ceil(content.length / limit);\n          i = 0;\n        case 16:\n          if (!(i < numMessages)) {\n            _context.next = 24;\n            break;\n          }\n          startIndex = i * limit;\n          part = contentRedacted.slice(startIndex, startIndex + limit);\n          _context.next = 21;\n          return sendMessage((isEmbed ? embedMarkup : \'\') + part, tag, username, webhookUrl, avatar_url, timeout);\n        case 21:\n          i++;\n          _context.next = 16;\n          break;\n        case 24:\n          return _context.abrupt("return");\n        case 25:\n          contentRedacted = contentRedacted.slice(0, limit);\n        case 26:\n          _context.next = 28;\n          return _PromisE__WEBPACK_IMPORTED_MODULE_0__["default"].post(webhookUrl + \'?wait=true\', {\n            avatar_url: avatar_url,\n            content: contentRedacted,\n            username: username\n          }, {}, timeout, false // `true` will throw error\n          ).catch(function (err) {\n            return console.error(tag, \'[DiscordWebhook]: failed to send message.\', {\n              content: content,\n              tag: tag\n            }, err);\n          }\n          // ToDo: save as JSON and re-attempt later??\n          );\n        case 28:\n          return _context.abrupt("return", _context.sent);\n        case 29:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function sendMessage() {\n    return _ref.apply(this, arguments);\n  };\n}();\nsendMessage.redactRegex = null;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/DiscordBotHelper.js\n')},"./src/utils/PromisE.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ PromisE)\n/* harmony export */ });\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\nvar textsCap = {\n  invalidUrl: \'invalid URL\',\n  timedout: \'request timed out\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_0__.translated)(textsCap);\n\n/*\n * List of optional node-modules and the functions required for NodeJS:\n * Module Name     : Substitue For\n * ------------------------------------\n * abort-controller: AbortController\n * node-fetch      : fetch\n */\n\n/** \n * @name PromisE\n * @summary attempts to solve a simple problem of Promise status (resolved/rejected) not being accessible externally.\n * Also compatible with async functions\n *\n * @param {Promise|Function|*}  promise AsyncFunction is not supported in NodeJS with Webpack!\n *\n * @example Examples:\n * <BR>\n * \n * ```javascript\n * // 1. Use exacly the same as Promise to create a new Promise\n *    const dummyPromise = new PromisE((resolve, reject) => resolve())\n * // 2. Use an uninvoked async function\n *    PromisE(async () => await anotherPromise())\n *    new PromisE(async function() { return [...arguments].reverse() }, 1, 2, 3, 4, 5, 6).then(console.log)\n * // 3. Extend an existing Proimse instance\n *    PromisE(promiseInstance)\n * ```\n *\n * @returns {{\n *  catch: Function,\n *  finally: Function,\n *  pending: Boolean,\n *  rejected: Boolean,\n *  resolved: Boolean,\n *  then: Function,\n * }} result promise\n */\nfunction PromisE(promise) {\n  if (!(promise instanceof Promise)) {\n    try {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      // supplied is not a promise instance\n      // check if it is an uninvoked async function\n      promise = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPromise)(promise) ? promise : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isAsyncFn)(promise) // may or may not work on nodejs with webpack & babel\n      ? promise.apply(null, args) // pass rest of the arguments to the async function (args[0])\n      : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(promise) ? new Promise(promise) : Promise.resolve(promise); // anything else resolve as value\n    } catch (err) {\n      // something unexpected happened!\n      promise = Promise.reject(err);\n    }\n  }\n  promise.pending = true;\n  promise.resolved = false;\n  promise.rejected = false;\n  promise.then(function () {\n    return promise.resolved = true;\n  }, function () {\n    return promise.rejected = true;\n  }).finally(function () {\n    return promise.pending = false;\n  });\n  return promise;\n}\n\n/** \n * @name    PromisE.all\n * @summary a wrapper for Promise.all with the benefits of `PromisE`\n * \n * @param   {Array|...Promise} promises\n * \n * @returns {PromisE} \n */\nPromisE.all = function () {\n  for (var _len2 = arguments.length, promises = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    promises[_key2] = arguments[_key2];\n  }\n  return PromisE(Promise.all(promises.flat().map(function (p) {\n    return PromisE(p);\n  })));\n};\n\n/** \n * @name PromisE.deferred\n * @summary the adaptation of the `deferred()` function tailored for Promises.\n * \n *\n * @param   {Function}  callback    (optional)\n * @param   {Number}    defer       (optional)\n * @param   {Object}    conf        (optional)\n * @param   {Function}  conf.onError   (optional)\n * @param   {Function}  conf.onResult  (optional)\n * @param   {Boolean}   conf.strict     (optional) only used if `throttle` is truthy.\n *                                      Default: `false`\n * @param   {Boolean}   conf.throttle   (optional) Default: `false`\n * \n * @description The main difference is that:\n *  - Notes: \n *      1. A "request" simply means invokation of the returned callback function\n *      2. By "handled" it means a "request" will be resolved or rejected.\n *  - `PromisE.deferred` is to be used with promises/functions\n *  - There is no specific time delay.\n *  - The time when a request is completed is irrelevant. \n *  - If not throttled:\n *      1. Once a request is handled, all previous requests will be ignored and pool starts anew.\n *      2. If a function is provided in the  returned callback, ALL of them will be invoked, regardless of pool size.\n *      3. The last/only request in an on-going requests\' pool will handled (resolve/reject).\n *  - If throttled:\n *      1. Once a requst starts executing, subsequent requests will be added to a queue.\n *      2. The last/only item in the queue will be handled. Rest will be ignored.\n *      3. If a function is provided in the returned callback, it will be invoked only if the requst is handled. \n *      Thus, improving performance by avoiding unnecessary invokations.\n *      4. If every single request/function needs to be invoked, avoid using throttle.\n * \n *  - If throttled and `strict` is truthy, all subsequent request while a request is being handled will be ignored.\n * \n * @example Explanation & example usage:\n * <BR>\n * ```javascript\n * const example = throttle => {\n *     const df = PromisE.deferred(throttle)\n *     df(() => PromisE.delay(5000)).then(console.log)\n *     df(() => PromisE.delay(500)).then(console.log)\n *     df(() => PromisE.delay(1000)).then(console.log)\n *     // delay 2 seconds and invoke df() again\n *     setTimeout(() => {\n *         df(() => PromisE.delay(200)).then(console.log)\n *     }, 2000)\n * }\n * \n * // Without throttle\n * example(false)\n * // `1000` and `200` will be printed in the console\n * \n * // with throttle\n * example(true)\n * // `5000` and `2000` will be printed in the console\n * \n * // with throttle with strict mode\n * example(true)\n * // `5000` will be printed in the console\n * ```\n * \n * @returns {Function} callback accepts only one argument and it must be a either a promise or a function\n*/\nPromisE.deferred = function (callback, defer) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$onError = _ref.onError,\n    onError = _ref$onError === void 0 ? function () {} : _ref$onError,\n    onResult = _ref.onResult,\n    strict = _ref.strict,\n    thisArg = _ref.thisArg,\n    _ref$throttle = _ref.throttle,\n    throttle = _ref$throttle === void 0 ? !!callback : _ref$throttle;\n  var lastPromise;\n  var ids = [];\n  var queue = [];\n  var done = function done(resolver, id) {\n    return function (result) {\n      var index = ids.indexOf(id);\n      // Ignore if:\n      // 1. this is not the only/last promise\n      // 2. if a previous promise has already resolved/rejected\n      if (index === -1 || index !== ids.length - 1) return;\n      // invalidates all unfinished previous promises\n      resolver(result);\n      ids.splice(0);\n      lastPromise = null;\n      var handler = queue.splice(0).pop();\n      handler && handler();\n    };\n  };\n  var dp = function dp(promise) {\n    return PromisE(function (resolve, reject) {\n      var handler = function handler() {\n        var id = Symbol();\n        try {\n          ids.push(id);\n          promise = PromisE((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(promise) ? promise() : promise);\n          lastPromise = promise;\n          promise.then(done(resolve, id), done(reject, id));\n        } catch (err) {\n          // execution failed while invoking promise()\n          done(reject, id);\n        }\n      };\n      if (!throttle || !lastPromise) return handler();\n\n      // simply add subsequent requests to the queue and only execute/resolve the last in the queue\n      !strict && queue.push(handler);\n    });\n  };\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(callback)) return dp;\n  var cb = function cb() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return dp(function () {\n      return callback.call.apply(callback, [thisArg].concat(args));\n    }).then(onResult, onError);\n  };\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPositiveNumber)(defer) ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.deferred)(cb, defer) : cb;\n};\n\n/**\n * @name    PromisE.delay\n * @summary simply a setTimeout as a promise\n * \n * @param   {Number} delay\n * @param   {*}      result (optional) specify a value to resolve with.\n *                          Default: the value of delay\n * \n * @returns {PromisE}\n */\nPromisE.delay = function (delay) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : delay;\n  return new PromisE(function (resolve) {\n    return setTimeout(function () {\n      return resolve(result);\n    }, delay);\n  });\n};\n\n/**\n * @name    PromisE.getSocketEmitter\n * @summary a wrapper function for socket.io emitter to eliminate the need to use callbacks. \n * \n * @param   {Object} socket         \'socket.io-client\' client instance.\n * @param   {Number} timeoutGlobal  (optional) default timeout for all events emitted using the returned callback\n * @param   {Number} errorArgIndex  (optional) index of the callback argument that contains server error message.\n *                                  Use non-integer value to indicate that error message will not be provided\n *                                  as a direct argument by server. Eg: error message is a property of an object. \n *                                  In that case, error should be thrown manually inside the `resultModifier` function.\n *                                  Default: `0` (this assumes that emitted message will resolve)\n *  \n * @param   {Number} callbackIndexLocal  (optional) index of the emitter parameter that is expected to be a callback\n *                                  Default: `null` (callback will be place at the end of `args` array)\n * \n * @returns {Function}  callback function when invoked returns a promise\n *                      Callback Arguments:\n *                      - evenName       String: \n *                      - args           Array: (optional)\n *                      - resultModifier Function: (optional)\n *                      - onError        Function: (optional)\n *                      - timemoutLocal  Number: (optional)  overrides `timeoutGlobal`\n *                      - delayPromise   Promise: (optional) if supplied, will wait untils promise is finalized\n * \n * @example Example 1: A simple message sent to the socket server with 15 seconds timeout\n * ```javascript\n * const socket = require(\'socket.io-client\')(....)\n * const emitter = PromisE.getSocketEmitter(socket, 15000, 0)\n * const result = await emitter(\'message\', [\'Hello world\'])\n * ```\n * \n * @example Example 2: Handle time out\n * ```javascript\n * const resultPromise = emitter(\'message\', [\'Hello world\'])\n * resultPromise\n * .then(result => alert(\'Result received on time\'))\n * .catch(err => {\n *     if (resultPromise.timeout) alert(\'Request is taking longer than expected\')\n *      resultPromise\n *          .promise\n *          .then(result => alert(\'Finally, got the result after the timeout!\'))\n * })\n * ```\n */\nPromisE.getSocketEmitter = function (socket, timeoutGlobal) {\n  var errorArgIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var callbackIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return function (eventName) {\n    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var resultModifier = arguments.length > 2 ? arguments[2] : undefined;\n    var errorModifier = arguments.length > 3 ? arguments[3] : undefined;\n    var timeoutLocal = arguments.length > 4 ? arguments[4] : undefined;\n    var callbackIndexLocal = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : callbackIndex;\n    var delayPromise = arguments.length > 6 ? arguments[6] : undefined;\n    args = !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(args) ? [args] : args;\n    var timeout = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPositiveNumber)(timeoutLocal) ? timeoutLocal : timeoutGlobal;\n    var getError = function getError(err) {\n      return new Error((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(errorModifier) && errorModifier(err) || err);\n    };\n    var promise = new PromisE(function (resolve, reject) {\n      var interceptor = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _len4,\n            result,\n            _key4,\n            err,\n            _args = arguments;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                for (_len4 = _args.length, result = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                  result[_key4] = _args[_key4];\n                }\n                _context.prev = 1;\n                err = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isInteger)(errorArgIndex) && result.splice(errorArgIndex, 1)[0];\n                if (!err) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt("return", reject(getError(err)));\n              case 5:\n                result = result.length > 1 ? result // if multiple values returned from the backend resolve with an array\n                : result[0]; // otherwise resolve with single value\n                if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(resultModifier)) {\n                  _context.next = 10;\n                  break;\n                }\n                _context.next = 9;\n                return resultModifier(result);\n              case 9:\n                result = _context.sent;\n              case 10:\n                _context.next = 15;\n                break;\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context["catch"](1);\n                console.log(\'PromisE.getSocketEmitter\', {\n                  eventName: eventName,\n                  interceptorError: _context.t0\n                });\n              case 15:\n                resolve(result);\n              case 16:\n              case "end":\n                return _context.stop();\n            }\n          }, _callee, null, [[1, 12]]);\n        }));\n        return function interceptor() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      try {\n        if (callbackIndexLocal === null) {\n          // last item is the callback \n          args = [].concat(_toConsumableArray(args), [interceptor]);\n        } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(args[callbackIndexLocal])) {\n          // replace exising callback\n          args[callbackIndexLocal] = interceptor;\n        } else {\n          // inject the callback at specific index\n          args.splice(callbackIndexLocal, 0, interceptor);\n        }\n        // if a promise is supplied wait until it\'s resolved\n        PromisE(delayPromise).finally(function () {\n          return socket.emit.apply(socket, [eventName].concat(_toConsumableArray(args)));\n        });\n      } catch (err) {\n        reject(getError(err));\n      }\n    });\n    return !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isPositiveNumber)(timeout) ? promise : PromisE.timeout(timeout, promise);\n  };\n};\n\n/**\n * @name    PromisE.fetch\n * @summary makes HTTP requests\n * \n * @param   {String}    url \n * @param   {Object}    options \n * @param   {String}    options.method  request method: get, post...\n *                                      Default: `"get"`\n * @param   {Number}    timeout \n * @param   {Boolean}   asJson \n * \n * @returns {*} result\n */\nPromisE.fetch = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, options, timeout) {\n    var _options, _options$method;\n    var asJson,\n      result,\n      _ref4,\n      _ref4$status,\n      status,\n      isSuccess,\n      json,\n      message,\n      error,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          asJson = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : true;\n          if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isValidURL)(url, false)) {\n            _context2.next = 3;\n            break;\n          }\n          throw new Error(textsCap.invalidUrl);\n        case 3:\n          options = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(options) && options || {};\n          (_options$method = (_options = options).method) !== null && _options$method !== void 0 ? _options$method : _options.method = \'get\';\n          if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isInteger)(timeout)) options.signal = getAbortSignal(timeout);\n          _context2.next = 8;\n          return fetch(url.toString(), options).catch(function (err) {\n            return Promise.reject(err.name === \'AbortError\' ? new Error(textsCap.timedout) : err);\n          });\n        case 8:\n          result = _context2.sent;\n          _ref4 = result || {}, _ref4$status = _ref4.status, status = _ref4$status === void 0 ? 0 : _ref4$status;\n          isSuccess = status >= 200 && status <= 299;\n          if (isSuccess) {\n            _context2.next = 21;\n            break;\n          }\n          _context2.next = 14;\n          return result.json();\n        case 14:\n          _context2.t0 = _context2.sent;\n          if (_context2.t0) {\n            _context2.next = 17;\n            break;\n          }\n          _context2.t0 = {};\n        case 17:\n          json = _context2.t0;\n          message = json.message || "Request failed with status code ".concat(status, ". ").concat(JSON.stringify(json || \'\'));\n          error = new Error("".concat(message).replace(\'Error: \', \'\'));\n          throw error;\n        case 21:\n          if (!asJson) {\n            _context2.next = 27;\n            break;\n          }\n          _context2.next = 24;\n          return result.json();\n        case 24:\n          _context2.t1 = _context2.sent;\n          _context2.next = 28;\n          break;\n        case 27:\n          _context2.t1 = result;\n        case 28:\n          return _context2.abrupt("return", _context2.t1);\n        case 29:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function (_x, _x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * @name    PromisE.post\n * @summary makes HTTP post requests\n * \n * @param   {String}    url \n * @param   {Object}    data \n * @param   {Object}    options \n * @param   {Number}    timeout \n * @param   {Boolean}   asJson \n * \n * @returns {*} result\n */\nPromisE.post = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url, data) {\n    var _objectSpread2;\n    var options,\n      timeout,\n      asJson,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n          timeout = _args3.length > 3 ? _args3[3] : undefined;\n          asJson = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : true;\n          _context3.next = 5;\n          return PromisE.fetch(url, _objectSpread(_objectSpread({}, options), {}, (_objectSpread2 = {\n            body: data\n          }, _defineProperty(_objectSpread2, "body", !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(data) ? JSON.stringify(data) : data), _defineProperty(_objectSpread2, "headers", _objectSpread({\n            \'Content-Type\': \'application/json\',\n            \'Content-type\': \'application/json\'\n          }, options.headers)), _defineProperty(_objectSpread2, "method", \'POST\'), _objectSpread2)), timeout, asJson);\n        case 5:\n          return _context3.abrupt("return", _context3.sent);\n        case 6:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function (_x4, _x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n/** \n * @name    PromisE.race\n * @summary a wrapper for Promise.race with the benefits of `PromisE`\n * \n * @param   {...Promise} promises\n * \n * @returns {PromisE}\n */\nPromisE.race = function () {\n  for (var _len5 = arguments.length, promises = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    promises[_key5] = arguments[_key5];\n  }\n  return PromisE(Promise.race(promises.flat()));\n};\n\n/**\n * @name    PromisE.timeout\n * @summary times out a promise after specified timeout duration.\n * \n * @param {Number}      timeout  (optional) timeout duration in milliseconds. \n *                               Default: `10000`\n * @param {...Promise}  promise  promise/function: one or more promises as individual arguments\n * \n * @example Example 1: multiple promises\n * ```javascript\n *    PromisE.timeout(\n *      30000, // timeout duration\n *      Promise.resolve(1)\n *    )\n *    // Result: 1\n * ```\n *\n * @example Example 2: multiple promises\n *\n * ```javascript\n *    PromisE.timeout(\n *      30000, // timeout duration\n *      Promise.resolve(1),\n *      Promise.resolve(2),\n *      Promise.resolve(3),\n *    )\n *    // Result: [ 1, 2, 3 ]\n * ```\n * \n * @example Example 3: default timeout duration 10 seconds\n * ```javascript\n *    const promise = PromisE.timeout(PromisE.delay(20000))\n *    promise.catch(err => {\n *          if (promise.timeout) {\n *              // request timed out\n *              alert(\'Request is taking longer than expected......\')\n *              promise.promise.then(result => alert(result))\n *              return\n *          }\n *          alert(err)\n *      })\n *```\n * @returns {PromisE} resultPromise\n */\nPromisE.timeout = function () {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n  var timeoutIndex = args.findIndex(_utils__WEBPACK_IMPORTED_MODULE_1__.isPositiveNumber);\n  var timeout = timeoutIndex >= 0 && args.splice(timeoutIndex, 1) || 10000;\n  // use all arguments except last one\n  var promiseArgs = args;\n  var promise = promiseArgs.length === 1 ? PromisE(promiseArgs[0]) // makes sure single promise resolves to a single result\n  : PromisE.all(promiseArgs);\n  var timeoutId;\n  var timeoutPromise = new PromisE(function (_, reject) {\n    return (\n      // only reject if it\'s still pending\n      timeoutId = setTimeout(function () {\n        if (!promise.pending) return;\n        resultPromise.timeout = true;\n        reject(textsCap.timedout);\n      }, timeout)\n    );\n  });\n  var resultPromise = PromisE.race([promise, timeoutPromise]);\n  resultPromise.promise = promise;\n  resultPromise.timeoutId = timeoutId;\n  resultPromise.clearTimeout = function () {\n    return clearTimeout(timeoutId);\n  };\n  resultPromise.timeoutPromise = timeoutPromise;\n  return resultPromise;\n};\nvar getAbortSignal = function getAbortSignal(timeout) {\n  try {\n    var abortCtrl = new AbortController();\n    setTimeout(function () {\n      return abortCtrl.abort();\n    }, timeout);\n    return abortCtrl.signal;\n  } catch (err) {\n    console.log(\'Failed to instantiate AbortController.\', err);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y0FBYztFQUM3QyxPQUFPRSxhQUFhO0FBQ3hCLENBQUM7QUFFRCxJQUFNbEMsY0FBYyxHQUFHLFNBQWpCQSxjQUFjQSxDQUFHbEMsT0FBTyxFQUFJO0VBQzlCLElBQUk7SUFDQSxJQUFJc0UsU0FBUyxHQUFHLElBQUlDLGVBQWUsQ0FBQyxDQUFDO0lBQ3JDbkYsVUFBVSxDQUFDO01BQUEsT0FBTWtGLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFBQSxHQUFFeEUsT0FBTyxDQUFDO0lBQzVDLE9BQU9zRSxTQUFTLENBQUNyQyxNQUFNO0VBQzNCLENBQUMsQ0FBQyxPQUFPbk8sR0FBRyxFQUFFO0lBQ1Y2TSxPQUFPLENBQUNDLEdBQUcsQ0FBQyx3Q0FBd0MsRUFBRTlNLEdBQUcsQ0FBQztFQUM5RDtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL1Byb21pc0UuanM/OWRjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cmFuc2xhdGVkIH0gZnJvbSAnLi9sYW5ndWFnZUhlbHBlcidcbmltcG9ydCB7XG4gICAgZGVmZXJyZWQsXG4gICAgaXNBcnIsXG4gICAgaXNBc3luY0ZuLFxuICAgIGlzRm4sXG4gICAgaXNJbnRlZ2VyLFxuICAgIGlzT2JqLFxuICAgIGlzUG9zaXRpdmVOdW1iZXIsXG4gICAgaXNQcm9taXNlLFxuICAgIGlzU3RyLFxuICAgIGlzVmFsaWRVUkwsXG59IGZyb20gJy4vdXRpbHMnXG5cbmNvbnN0IHRleHRzQ2FwID0ge1xuICAgIGludmFsaWRVcmw6ICdpbnZhbGlkIFVSTCcsXG4gICAgdGltZWRvdXQ6ICdyZXF1ZXN0IHRpbWVkIG91dCcsXG59XG50cmFuc2xhdGVkKHRleHRzQ2FwKVxuXG4vKlxuICogTGlzdCBvZiBvcHRpb25hbCBub2RlLW1vZHVsZXMgYW5kIHRoZSBmdW5jdGlvbnMgcmVxdWlyZWQgZm9yIE5vZGVKUzpcbiAqIE1vZHVsZSBOYW1lICAgICA6IFN1YnN0aXR1ZSBGb3JcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWJvcnQtY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyXG4gKiBub2RlLWZldGNoICAgICAgOiBmZXRjaFxuICovXG5cbi8qKiBcbiAqIEBuYW1lIFByb21pc0VcbiAqIEBzdW1tYXJ5IGF0dGVtcHRzIHRvIHNvbHZlIGEgc2ltcGxlIHByb2JsZW0gb2YgUHJvbWlzZSBzdGF0dXMgKHJlc29sdmVkL3JlamVjdGVkKSBub3QgYmVpbmcgYWNjZXNzaWJsZSBleHRlcm5hbGx5LlxuICogQWxzbyBjb21wYXRpYmxlIHdpdGggYXN5bmMgZnVuY3Rpb25zXG4gKlxuICogQHBhcmFtIHtQcm9taXNlfEZ1bmN0aW9ufCp9ICBwcm9taXNlIEFzeW5jRnVuY3Rpb24gaXMgbm90IHN1cHBvcnRlZCBpbiBOb2RlSlMgd2l0aCBXZWJwYWNrIVxuICpcbiAqIEBleGFtcGxlIEV4YW1wbGVzOlxuICogPEJSPlxuICogXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyAxLiBVc2UgZXhhY2x5IHRoZSBzYW1lIGFzIFByb21pc2UgdG8gY3JlYXRlIGEgbmV3IFByb21pc2VcbiAqICAgIGNvbnN0IGR1bW15UHJvbWlzZSA9IG5ldyBQcm9taXNFKChyZXNvbHZlLCByZWplY3QpID0+IHJlc29sdmUoKSlcbiAqIC8vIDIuIFVzZSBhbiB1bmludm9rZWQgYXN5bmMgZnVuY3Rpb25cbiAqICAgIFByb21pc0UoYXN5bmMgKCkgPT4gYXdhaXQgYW5vdGhlclByb21pc2UoKSlcbiAqICAgIG5ldyBQcm9taXNFKGFzeW5jIGZ1bmN0aW9uKCkgeyByZXR1cm4gWy4uLmFyZ3VtZW50c10ucmV2ZXJzZSgpIH0sIDEsIDIsIDMsIDQsIDUsIDYpLnRoZW4oY29uc29sZS5sb2cpXG4gKiAvLyAzLiBFeHRlbmQgYW4gZXhpc3RpbmcgUHJvaW1zZSBpbnN0YW5jZVxuICogICAgUHJvbWlzRShwcm9taXNlSW5zdGFuY2UpXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyB7e1xuICogIGNhdGNoOiBGdW5jdGlvbixcbiAqICBmaW5hbGx5OiBGdW5jdGlvbixcbiAqICBwZW5kaW5nOiBCb29sZWFuLFxuICogIHJlamVjdGVkOiBCb29sZWFuLFxuICogIHJlc29sdmVkOiBCb29sZWFuLFxuICogIHRoZW46IEZ1bmN0aW9uLFxuICogfX0gcmVzdWx0IHByb21pc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvbWlzRShwcm9taXNlLCAuLi5hcmdzKSB7XG4gICAgaWYgKCEocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBzdXBwbGllZCBpcyBub3QgYSBwcm9taXNlIGluc3RhbmNlXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBpdCBpcyBhbiB1bmludm9rZWQgYXN5bmMgZnVuY3Rpb25cbiAgICAgICAgICAgIHByb21pc2UgPSBpc1Byb21pc2UocHJvbWlzZSlcbiAgICAgICAgICAgICAgICA/IHByb21pc2VcbiAgICAgICAgICAgICAgICA6IGlzQXN5bmNGbihwcm9taXNlKSAvLyBtYXkgb3IgbWF5IG5vdCB3b3JrIG9uIG5vZGVqcyB3aXRoIHdlYnBhY2sgJiBiYWJlbFxuICAgICAgICAgICAgICAgICAgICA/IHByb21pc2UuYXBwbHkobnVsbCwgYXJncykgLy8gcGFzcyByZXN0IG9mIHRoZSBhcmd1bWVudHMgdG8gdGhlIGFzeW5jIGZ1bmN0aW9uIChhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICA6IGlzRm4ocHJvbWlzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IFByb21pc2UocHJvbWlzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHByb21pc2UpIC8vIGFueXRoaW5nIGVsc2UgcmVzb2x2ZSBhcyB2YWx1ZVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIHNvbWV0aGluZyB1bmV4cGVjdGVkIGhhcHBlbmVkIVxuICAgICAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KGVycilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb21pc2UucGVuZGluZyA9IHRydWVcbiAgICBwcm9taXNlLnJlc29sdmVkID0gZmFsc2VcbiAgICBwcm9taXNlLnJlamVjdGVkID0gZmFsc2VcbiAgICBwcm9taXNlXG4gICAgICAgIC50aGVuKFxuICAgICAgICAgICAgKCkgPT4gcHJvbWlzZS5yZXNvbHZlZCA9IHRydWUsXG4gICAgICAgICAgICAoKSA9PiBwcm9taXNlLnJlamVjdGVkID0gdHJ1ZVxuICAgICAgICApXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHByb21pc2UucGVuZGluZyA9IGZhbHNlKVxuICAgIHJldHVybiBwcm9taXNlXG59XG5cbi8qKiBcbiAqIEBuYW1lICAgIFByb21pc0UuYWxsXG4gKiBAc3VtbWFyeSBhIHdyYXBwZXIgZm9yIFByb21pc2UuYWxsIHdpdGggdGhlIGJlbmVmaXRzIG9mIGBQcm9taXNFYFxuICogXG4gKiBAcGFyYW0gICB7QXJyYXl8Li4uUHJvbWlzZX0gcHJvbWlzZXNcbiAqIFxuICogQHJldHVybnMge1Byb21pc0V9IFxuICovXG5Qcm9taXNFLmFsbCA9ICguLi5wcm9taXNlcykgPT4gUHJvbWlzRShcbiAgICBQcm9taXNlLmFsbChcbiAgICAgICAgcHJvbWlzZXNcbiAgICAgICAgICAgIC5mbGF0KClcbiAgICAgICAgICAgIC5tYXAocCA9PiBQcm9taXNFKHApKVxuICAgIClcbilcblxuLyoqIFxuICogQG5hbWUgUHJvbWlzRS5kZWZlcnJlZFxuICogQHN1bW1hcnkgdGhlIGFkYXB0YXRpb24gb2YgdGhlIGBkZWZlcnJlZCgpYCBmdW5jdGlvbiB0YWlsb3JlZCBmb3IgUHJvbWlzZXMuXG4gKiBcbiAqXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICBjYWxsYmFjayAgICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7TnVtYmVyfSAgICBkZWZlciAgICAgICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBjb25mICAgICAgICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICBjb25mLm9uRXJyb3IgICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICBjb25mLm9uUmVzdWx0ICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICBjb25mLnN0cmljdCAgICAgKG9wdGlvbmFsKSBvbmx5IHVzZWQgaWYgYHRocm90dGxlYCBpcyB0cnV0aHkuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogYGZhbHNlYFxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgY29uZi50aHJvdHRsZSAgIChvcHRpb25hbCkgRGVmYXVsdDogYGZhbHNlYFxuICogXG4gKiBAZGVzY3JpcHRpb24gVGhlIG1haW4gZGlmZmVyZW5jZSBpcyB0aGF0OlxuICogIC0gTm90ZXM6IFxuICogICAgICAxLiBBIFwicmVxdWVzdFwiIHNpbXBseSBtZWFucyBpbnZva2F0aW9uIG9mIHRoZSByZXR1cm5lZCBjYWxsYmFjayBmdW5jdGlvblxuICogICAgICAyLiBCeSBcImhhbmRsZWRcIiBpdCBtZWFucyBhIFwicmVxdWVzdFwiIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKiAgLSBgUHJvbWlzRS5kZWZlcnJlZGAgaXMgdG8gYmUgdXNlZCB3aXRoIHByb21pc2VzL2Z1bmN0aW9uc1xuICogIC0gVGhlcmUgaXMgbm8gc3BlY2lmaWMgdGltZSBkZWxheS5cbiAqICAtIFRoZSB0aW1lIHdoZW4gYSByZXF1ZXN0IGlzIGNvbXBsZXRlZCBpcyBpcnJlbGV2YW50LiBcbiAqICAtIElmIG5vdCB0aHJvdHRsZWQ6XG4gKiAgICAgIDEuIE9uY2UgYSByZXF1ZXN0IGlzIGhhbmRsZWQsIGFsbCBwcmV2aW91cyByZXF1ZXN0cyB3aWxsIGJlIGlnbm9yZWQgYW5kIHBvb2wgc3RhcnRzIGFuZXcuXG4gKiAgICAgIDIuIElmIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgaW4gdGhlICByZXR1cm5lZCBjYWxsYmFjaywgQUxMIG9mIHRoZW0gd2lsbCBiZSBpbnZva2VkLCByZWdhcmRsZXNzIG9mIHBvb2wgc2l6ZS5cbiAqICAgICAgMy4gVGhlIGxhc3Qvb25seSByZXF1ZXN0IGluIGFuIG9uLWdvaW5nIHJlcXVlc3RzJyBwb29sIHdpbGwgaGFuZGxlZCAocmVzb2x2ZS9yZWplY3QpLlxuICogIC0gSWYgdGhyb3R0bGVkOlxuICogICAgICAxLiBPbmNlIGEgcmVxdXN0IHN0YXJ0cyBleGVjdXRpbmcsIHN1YnNlcXVlbnQgcmVxdWVzdHMgd2lsbCBiZSBhZGRlZCB0byBhIHF1ZXVlLlxuICogICAgICAyLiBUaGUgbGFzdC9vbmx5IGl0ZW0gaW4gdGhlIHF1ZXVlIHdpbGwgYmUgaGFuZGxlZC4gUmVzdCB3aWxsIGJlIGlnbm9yZWQuXG4gKiAgICAgIDMuIElmIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgaW4gdGhlIHJldHVybmVkIGNhbGxiYWNrLCBpdCB3aWxsIGJlIGludm9rZWQgb25seSBpZiB0aGUgcmVxdXN0IGlzIGhhbmRsZWQuIFxuICogICAgICBUaHVzLCBpbXByb3ZpbmcgcGVyZm9ybWFuY2UgYnkgYXZvaWRpbmcgdW5uZWNlc3NhcnkgaW52b2thdGlvbnMuXG4gKiAgICAgIDQuIElmIGV2ZXJ5IHNpbmdsZSByZXF1ZXN0L2Z1bmN0aW9uIG5lZWRzIHRvIGJlIGludm9rZWQsIGF2b2lkIHVzaW5nIHRocm90dGxlLlxuICogXG4gKiAgLSBJZiB0aHJvdHRsZWQgYW5kIGBzdHJpY3RgIGlzIHRydXRoeSwgYWxsIHN1YnNlcXVlbnQgcmVxdWVzdCB3aGlsZSBhIHJlcXVlc3QgaXMgYmVpbmcgaGFuZGxlZCB3aWxsIGJlIGlnbm9yZWQuXG4gKiBcbiAqIEBleGFtcGxlIEV4cGxhbmF0aW9uICYgZXhhbXBsZSB1c2FnZTpcbiAqIDxCUj5cbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IGV4YW1wbGUgPSB0aHJvdHRsZSA9PiB7XG4gKiAgICAgY29uc3QgZGYgPSBQcm9taXNFLmRlZmVycmVkKHRocm90dGxlKVxuICogICAgIGRmKCgpID0+IFByb21pc0UuZGVsYXkoNTAwMCkpLnRoZW4oY29uc29sZS5sb2cpXG4gKiAgICAgZGYoKCkgPT4gUHJvbWlzRS5kZWxheSg1MDApKS50aGVuKGNvbnNvbGUubG9nKVxuICogICAgIGRmKCgpID0+IFByb21pc0UuZGVsYXkoMTAwMCkpLnRoZW4oY29uc29sZS5sb2cpXG4gKiAgICAgLy8gZGVsYXkgMiBzZWNvbmRzIGFuZCBpbnZva2UgZGYoKSBhZ2FpblxuICogICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICogICAgICAgICBkZigoKSA9PiBQcm9taXNFLmRlbGF5KDIwMCkpLnRoZW4oY29uc29sZS5sb2cpXG4gKiAgICAgfSwgMjAwMClcbiAqIH1cbiAqIFxuICogLy8gV2l0aG91dCB0aHJvdHRsZVxuICogZXhhbXBsZShmYWxzZSlcbiAqIC8vIGAxMDAwYCBhbmQgYDIwMGAgd2lsbCBiZSBwcmludGVkIGluIHRoZSBjb25zb2xlXG4gKiBcbiAqIC8vIHdpdGggdGhyb3R0bGVcbiAqIGV4YW1wbGUodHJ1ZSlcbiAqIC8vIGA1MDAwYCBhbmQgYDIwMDBgIHdpbGwgYmUgcHJpbnRlZCBpbiB0aGUgY29uc29sZVxuICogXG4gKiAvLyB3aXRoIHRocm90dGxlIHdpdGggc3RyaWN0IG1vZGVcbiAqIGV4YW1wbGUodHJ1ZSlcbiAqIC8vIGA1MDAwYCB3aWxsIGJlIHByaW50ZWQgaW4gdGhlIGNvbnNvbGVcbiAqIGBgYFxuICogXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGNhbGxiYWNrIGFjY2VwdHMgb25seSBvbmUgYXJndW1lbnQgYW5kIGl0IG11c3QgYmUgYSBlaXRoZXIgYSBwcm9taXNlIG9yIGEgZnVuY3Rpb25cbiovXG5Qcm9taXNFLmRlZmVycmVkID0gKFxuICAgIGNhbGxiYWNrLFxuICAgIGRlZmVyLFxuICAgIHtcbiAgICAgICAgb25FcnJvciA9ICgpID0+IHsgfSxcbiAgICAgICAgb25SZXN1bHQsIC8vIHJlc3VsdDogd2hhdGV2ZXIgaXMgcmV0dXJuZWQgZnJvbSB0aGUgY2FsbGJhY2sgb24gdGhlIGV4ZWN1dGlvbi9yZXF1ZXN0IHRoYXQgd2FzIFwiaGFuZGxlZFwiXG4gICAgICAgIHN0cmljdCxcbiAgICAgICAgdGhpc0FyZyxcbiAgICAgICAgdGhyb3R0bGUgPSAhIWNhbGxiYWNrLFxuICAgIH0gPSB7fVxuKSA9PiB7XG4gICAgbGV0IGxhc3RQcm9taXNlXG4gICAgY29uc3QgaWRzID0gW11cbiAgICBjb25zdCBxdWV1ZSA9IFtdXG4gICAgY29uc3QgZG9uZSA9IChyZXNvbHZlciwgaWQpID0+IHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaWRzLmluZGV4T2YoaWQpXG4gICAgICAgIC8vIElnbm9yZSBpZjpcbiAgICAgICAgLy8gMS4gdGhpcyBpcyBub3QgdGhlIG9ubHkvbGFzdCBwcm9taXNlXG4gICAgICAgIC8vIDIuIGlmIGEgcHJldmlvdXMgcHJvbWlzZSBoYXMgYWxyZWFkeSByZXNvbHZlZC9yZWplY3RlZFxuICAgICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ICE9PSBpZHMubGVuZ3RoIC0gMSkgcmV0dXJuXG4gICAgICAgIC8vIGludmFsaWRhdGVzIGFsbCB1bmZpbmlzaGVkIHByZXZpb3VzIHByb21pc2VzXG4gICAgICAgIHJlc29sdmVyKHJlc3VsdClcbiAgICAgICAgaWRzLnNwbGljZSgwKVxuICAgICAgICBsYXN0UHJvbWlzZSA9IG51bGxcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHF1ZXVlXG4gICAgICAgICAgICAuc3BsaWNlKDApXG4gICAgICAgICAgICAucG9wKClcbiAgICAgICAgaGFuZGxlciAmJiBoYW5kbGVyKClcbiAgICB9XG4gICAgY29uc3QgZHAgPSBwcm9taXNlID0+IFByb21pc0UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBTeW1ib2woKVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZHMucHVzaChpZClcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gUHJvbWlzRShcbiAgICAgICAgICAgICAgICAgICAgaXNGbihwcm9taXNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwcm9taXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcHJvbWlzZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBsYXN0UHJvbWlzZSA9IHByb21pc2VcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIGRvbmUocmVzb2x2ZSwgaWQpLFxuICAgICAgICAgICAgICAgICAgICBkb25lKHJlamVjdCwgaWQpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhlY3V0aW9uIGZhaWxlZCB3aGlsZSBpbnZva2luZyBwcm9taXNlKClcbiAgICAgICAgICAgICAgICBkb25lKHJlamVjdCwgaWQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aHJvdHRsZSB8fCAhbGFzdFByb21pc2UpIHJldHVybiBoYW5kbGVyKClcblxuICAgICAgICAvLyBzaW1wbHkgYWRkIHN1YnNlcXVlbnQgcmVxdWVzdHMgdG8gdGhlIHF1ZXVlIGFuZCBvbmx5IGV4ZWN1dGUvcmVzb2x2ZSB0aGUgbGFzdCBpbiB0aGUgcXVldWVcbiAgICAgICAgIXN0cmljdCAmJiBxdWV1ZS5wdXNoKGhhbmRsZXIpXG4gICAgfSlcbiAgICBpZiAoIWlzRm4oY2FsbGJhY2spKSByZXR1cm4gZHBcblxuICAgIGNvbnN0IGNiID0gKC4uLmFyZ3MpID0+XG4gICAgICAgIGRwKCgpID0+IGNhbGxiYWNrLmNhbGwodGhpc0FyZywgLi4uYXJncykpXG4gICAgICAgICAgICAudGhlbihvblJlc3VsdCwgb25FcnJvcilcblxuICAgIHJldHVybiBpc1Bvc2l0aXZlTnVtYmVyKGRlZmVyKVxuICAgICAgICA/IGRlZmVycmVkKGNiLCBkZWZlcilcbiAgICAgICAgOiBjYlxufVxuXG4vKipcbiAqIEBuYW1lICAgIFByb21pc0UuZGVsYXlcbiAqIEBzdW1tYXJ5IHNpbXBseSBhIHNldFRpbWVvdXQgYXMgYSBwcm9taXNlXG4gKiBcbiAqIEBwYXJhbSAgIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcGFyYW0gICB7Kn0gICAgICByZXN1bHQgKG9wdGlvbmFsKSBzcGVjaWZ5IGEgdmFsdWUgdG8gcmVzb2x2ZSB3aXRoLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IHRoZSB2YWx1ZSBvZiBkZWxheVxuICogXG4gKiBAcmV0dXJucyB7UHJvbWlzRX1cbiAqL1xuUHJvbWlzRS5kZWxheSA9IChkZWxheSwgcmVzdWx0ID0gZGVsYXkpID0+IG5ldyBQcm9taXNFKHJlc29sdmUgPT5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUocmVzdWx0KSwgZGVsYXkpXG4pXG5cbi8qKlxuICogQG5hbWUgICAgUHJvbWlzRS5nZXRTb2NrZXRFbWl0dGVyXG4gKiBAc3VtbWFyeSBhIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHNvY2tldC5pbyBlbWl0dGVyIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCB0byB1c2UgY2FsbGJhY2tzLiBcbiAqIFxuICogQHBhcmFtICAge09iamVjdH0gc29ja2V0ICAgICAgICAgJ3NvY2tldC5pby1jbGllbnQnIGNsaWVudCBpbnN0YW5jZS5cbiAqIEBwYXJhbSAgIHtOdW1iZXJ9IHRpbWVvdXRHbG9iYWwgIChvcHRpb25hbCkgZGVmYXVsdCB0aW1lb3V0IGZvciBhbGwgZXZlbnRzIGVtaXR0ZWQgdXNpbmcgdGhlIHJldHVybmVkIGNhbGxiYWNrXG4gKiBAcGFyYW0gICB7TnVtYmVyfSBlcnJvckFyZ0luZGV4ICAob3B0aW9uYWwpIGluZGV4IG9mIHRoZSBjYWxsYmFjayBhcmd1bWVudCB0aGF0IGNvbnRhaW5zIHNlcnZlciBlcnJvciBtZXNzYWdlLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlIG5vbi1pbnRlZ2VyIHZhbHVlIHRvIGluZGljYXRlIHRoYXQgZXJyb3IgbWVzc2FnZSB3aWxsIG5vdCBiZSBwcm92aWRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgYSBkaXJlY3QgYXJndW1lbnQgYnkgc2VydmVyLiBFZzogZXJyb3IgbWVzc2FnZSBpcyBhIHByb3BlcnR5IG9mIGFuIG9iamVjdC4gXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbiB0aGF0IGNhc2UsIGVycm9yIHNob3VsZCBiZSB0aHJvd24gbWFudWFsbHkgaW5zaWRlIHRoZSBgcmVzdWx0TW9kaWZpZXJgIGZ1bmN0aW9uLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogYDBgICh0aGlzIGFzc3VtZXMgdGhhdCBlbWl0dGVkIG1lc3NhZ2Ugd2lsbCByZXNvbHZlKVxuICogIFxuICogQHBhcmFtICAge051bWJlcn0gY2FsbGJhY2tJbmRleExvY2FsICAob3B0aW9uYWwpIGluZGV4IG9mIHRoZSBlbWl0dGVyIHBhcmFtZXRlciB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIGEgY2FsbGJhY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IGBudWxsYCAoY2FsbGJhY2sgd2lsbCBiZSBwbGFjZSBhdCB0aGUgZW5kIG9mIGBhcmdzYCBhcnJheSlcbiAqIFxuICogQHJldHVybnMge0Z1bmN0aW9ufSAgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBpbnZva2VkIHJldHVybnMgYSBwcm9taXNlXG4gKiAgICAgICAgICAgICAgICAgICAgICBDYWxsYmFjayBBcmd1bWVudHM6XG4gKiAgICAgICAgICAgICAgICAgICAgICAtIGV2ZW5OYW1lICAgICAgIFN0cmluZzogXG4gKiAgICAgICAgICAgICAgICAgICAgICAtIGFyZ3MgICAgICAgICAgIEFycmF5OiAob3B0aW9uYWwpXG4gKiAgICAgICAgICAgICAgICAgICAgICAtIHJlc3VsdE1vZGlmaWVyIEZ1bmN0aW9uOiAob3B0aW9uYWwpXG4gKiAgICAgICAgICAgICAgICAgICAgICAtIG9uRXJyb3IgICAgICAgIEZ1bmN0aW9uOiAob3B0aW9uYWwpXG4gKiAgICAgICAgICAgICAgICAgICAgICAtIHRpbWVtb3V0TG9jYWwgIE51bWJlcjogKG9wdGlvbmFsKSAgb3ZlcnJpZGVzIGB0aW1lb3V0R2xvYmFsYFxuICogICAgICAgICAgICAgICAgICAgICAgLSBkZWxheVByb21pc2UgICBQcm9taXNlOiAob3B0aW9uYWwpIGlmIHN1cHBsaWVkLCB3aWxsIHdhaXQgdW50aWxzIHByb21pc2UgaXMgZmluYWxpemVkXG4gKiBcbiAqIEBleGFtcGxlIEV4YW1wbGUgMTogQSBzaW1wbGUgbWVzc2FnZSBzZW50IHRvIHRoZSBzb2NrZXQgc2VydmVyIHdpdGggMTUgc2Vjb25kcyB0aW1lb3V0XG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBzb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQuaW8tY2xpZW50JykoLi4uLilcbiAqIGNvbnN0IGVtaXR0ZXIgPSBQcm9taXNFLmdldFNvY2tldEVtaXR0ZXIoc29ja2V0LCAxNTAwMCwgMClcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGVtaXR0ZXIoJ21lc3NhZ2UnLCBbJ0hlbGxvIHdvcmxkJ10pXG4gKiBgYGBcbiAqIFxuICogQGV4YW1wbGUgRXhhbXBsZSAyOiBIYW5kbGUgdGltZSBvdXRcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHJlc3VsdFByb21pc2UgPSBlbWl0dGVyKCdtZXNzYWdlJywgWydIZWxsbyB3b3JsZCddKVxuICogcmVzdWx0UHJvbWlzZVxuICogLnRoZW4ocmVzdWx0ID0+IGFsZXJ0KCdSZXN1bHQgcmVjZWl2ZWQgb24gdGltZScpKVxuICogLmNhdGNoKGVyciA9PiB7XG4gKiAgICAgaWYgKHJlc3VsdFByb21pc2UudGltZW91dCkgYWxlcnQoJ1JlcXVlc3QgaXMgdGFraW5nIGxvbmdlciB0aGFuIGV4cGVjdGVkJylcbiAqICAgICAgcmVzdWx0UHJvbWlzZVxuICogICAgICAgICAgLnByb21pc2VcbiAqICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiBhbGVydCgnRmluYWxseSwgZ290IHRoZSByZXN1bHQgYWZ0ZXIgdGhlIHRpbWVvdXQhJykpXG4gKiB9KVxuICogYGBgXG4gKi9cblByb21pc0UuZ2V0U29ja2V0RW1pdHRlciA9IChcbiAgICBzb2NrZXQsXG4gICAgdGltZW91dEdsb2JhbCxcbiAgICBlcnJvckFyZ0luZGV4ID0gMCxcbiAgICBjYWxsYmFja0luZGV4ID0gbnVsbCxcbikgPT4gKFxuICAgIGV2ZW50TmFtZSxcbiAgICBhcmdzID0gW10sXG4gICAgcmVzdWx0TW9kaWZpZXIsXG4gICAgZXJyb3JNb2RpZmllcixcbiAgICB0aW1lb3V0TG9jYWwsXG4gICAgY2FsbGJhY2tJbmRleExvY2FsID0gY2FsbGJhY2tJbmRleCxcbiAgICBkZWxheVByb21pc2VcbikgPT4ge1xuICAgICAgICBhcmdzID0gIWlzQXJyKGFyZ3MpXG4gICAgICAgICAgICA/IFthcmdzXVxuICAgICAgICAgICAgOiBhcmdzXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBpc1Bvc2l0aXZlTnVtYmVyKHRpbWVvdXRMb2NhbClcbiAgICAgICAgICAgID8gdGltZW91dExvY2FsXG4gICAgICAgICAgICA6IHRpbWVvdXRHbG9iYWxcbiAgICAgICAgY29uc3QgZ2V0RXJyb3IgPSBlcnIgPT4gbmV3IEVycm9yKFxuICAgICAgICAgICAgaXNGbihlcnJvck1vZGlmaWVyKVxuICAgICAgICAgICAgJiYgZXJyb3JNb2RpZmllcihlcnIpXG4gICAgICAgICAgICB8fCBlcnJcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc0UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJjZXB0b3IgPSBhc3luYyAoLi4ucmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVyciA9IGlzSW50ZWdlcihlcnJvckFyZ0luZGV4KSAmJiByZXN1bHQuc3BsaWNlKGVycm9yQXJnSW5kZXgsIDEpWzBdXG4gICAgICAgICAgICAgICAgICAgIGlmICghIWVycikgcmV0dXJuIHJlamVjdChnZXRFcnJvcihlcnIpKVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdCAvLyBpZiBtdWx0aXBsZSB2YWx1ZXMgcmV0dXJuZWQgZnJvbSB0aGUgYmFja2VuZCByZXNvbHZlIHdpdGggYW4gYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVzdWx0WzBdIC8vIG90aGVyd2lzZSByZXNvbHZlIHdpdGggc2luZ2xlIHZhbHVlXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRm4ocmVzdWx0TW9kaWZpZXIpKSByZXN1bHQgPSBhd2FpdCByZXN1bHRNb2RpZmllcihyZXN1bHQpXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQcm9taXNFLmdldFNvY2tldEVtaXR0ZXInLCB7IGV2ZW50TmFtZSwgaW50ZXJjZXB0b3JFcnJvcjogZXJyIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tJbmRleExvY2FsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxhc3QgaXRlbSBpcyB0aGUgY2FsbGJhY2sgXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBbLi4uYXJncywgaW50ZXJjZXB0b3JdXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0ZuKGFyZ3NbY2FsbGJhY2tJbmRleExvY2FsXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBleGlzaW5nIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbY2FsbGJhY2tJbmRleExvY2FsXSA9IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5qZWN0IHRoZSBjYWxsYmFjayBhdCBzcGVjaWZpYyBpbmRleFxuICAgICAgICAgICAgICAgICAgICBhcmdzLnNwbGljZShjYWxsYmFja0luZGV4TG9jYWwsIDAsIGludGVyY2VwdG9yKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiBhIHByb21pc2UgaXMgc3VwcGxpZWQgd2FpdCB1bnRpbCBpdCdzIHJlc29sdmVkXG4gICAgICAgICAgICAgICAgUHJvbWlzRShkZWxheVByb21pc2UpXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHNvY2tldC5lbWl0KGV2ZW50TmFtZSwgLi4uYXJncykpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZ2V0RXJyb3IoZXJyKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gIWlzUG9zaXRpdmVOdW1iZXIodGltZW91dClcbiAgICAgICAgICAgID8gcHJvbWlzZVxuICAgICAgICAgICAgOiBQcm9taXNFLnRpbWVvdXQodGltZW91dCwgcHJvbWlzZSlcbiAgICB9XG5cbi8qKlxuICogQG5hbWUgICAgUHJvbWlzRS5mZXRjaFxuICogQHN1bW1hcnkgbWFrZXMgSFRUUCByZXF1ZXN0c1xuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSAgICB1cmwgXG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBvcHRpb25zIFxuICogQHBhcmFtICAge1N0cmluZ30gICAgb3B0aW9ucy5tZXRob2QgIHJlcXVlc3QgbWV0aG9kOiBnZXQsIHBvc3QuLi5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBgXCJnZXRcImBcbiAqIEBwYXJhbSAgIHtOdW1iZXJ9ICAgIHRpbWVvdXQgXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICBhc0pzb24gXG4gKiBcbiAqIEByZXR1cm5zIHsqfSByZXN1bHRcbiAqL1xuUHJvbWlzRS5mZXRjaCA9IGFzeW5jICh1cmwsIG9wdGlvbnMsIHRpbWVvdXQsIGFzSnNvbiA9IHRydWUpID0+IHtcbiAgICBpZiAoIWlzVmFsaWRVUkwodXJsLCBmYWxzZSkpIHRocm93IG5ldyBFcnJvcih0ZXh0c0NhcC5pbnZhbGlkVXJsKVxuXG4gICAgb3B0aW9ucyA9IGlzT2JqKG9wdGlvbnMpICYmIG9wdGlvbnMgfHwge31cbiAgICBvcHRpb25zLm1ldGhvZCA/Pz0gJ2dldCdcbiAgICBpZiAoaXNJbnRlZ2VyKHRpbWVvdXQpKSBvcHRpb25zLnNpZ25hbCA9IGdldEFib3J0U2lnbmFsKHRpbWVvdXQpXG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaCh1cmwudG9TdHJpbmcoKSwgb3B0aW9ucylcbiAgICAgICAgLmNhdGNoKGVyciA9PlxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgICAgICAgZXJyLm5hbWUgPT09ICdBYm9ydEVycm9yJ1xuICAgICAgICAgICAgICAgICAgICA/IG5ldyBFcnJvcih0ZXh0c0NhcC50aW1lZG91dClcbiAgICAgICAgICAgICAgICAgICAgOiBlcnJcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgIGNvbnN0IHsgc3RhdHVzID0gMCB9ID0gcmVzdWx0IHx8IHt9XG4gICAgY29uc3QgaXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPD0gMjk5XG4gICAgaWYgKCFpc1N1Y2Nlc3MpIHtcbiAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3VsdC5qc29uKCkgfHwge31cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGpzb24ubWVzc2FnZSB8fCBgUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAke3N0YXR1c30uICR7SlNPTi5zdHJpbmdpZnkoanNvbiB8fCAnJyl9YFxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgJHttZXNzYWdlfWAucmVwbGFjZSgnRXJyb3I6ICcsICcnKSlcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG5cbiAgICByZXR1cm4gYXNKc29uXG4gICAgICAgID8gYXdhaXQgcmVzdWx0Lmpzb24oKVxuICAgICAgICA6IHJlc3VsdFxufVxuXG4vKipcbiAqIEBuYW1lICAgIFByb21pc0UucG9zdFxuICogQHN1bW1hcnkgbWFrZXMgSFRUUCBwb3N0IHJlcXVlc3RzXG4gKiBcbiAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgIHVybCBcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGRhdGEgXG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBvcHRpb25zIFxuICogQHBhcmFtICAge051bWJlcn0gICAgdGltZW91dCBcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgIGFzSnNvbiBcbiAqIFxuICogQHJldHVybnMgeyp9IHJlc3VsdFxuICovXG5Qcm9taXNFLnBvc3QgPSBhc3luYyAoXG4gICAgdXJsLFxuICAgIGRhdGEsXG4gICAgb3B0aW9ucyA9IHt9LFxuICAgIHRpbWVvdXQsXG4gICAgYXNKc29uID0gdHJ1ZVxuKSA9PiBhd2FpdCBQcm9taXNFLmZldGNoKFxuICAgIHVybCxcbiAgICB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGJvZHk6ICFpc1N0cihkYXRhKVxuICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICAgICAgOiBkYXRhLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgfSxcbiAgICB0aW1lb3V0LFxuICAgIGFzSnNvblxuKVxuXG4vKiogXG4gKiBAbmFtZSAgICBQcm9taXNFLnJhY2VcbiAqIEBzdW1tYXJ5IGEgd3JhcHBlciBmb3IgUHJvbWlzZS5yYWNlIHdpdGggdGhlIGJlbmVmaXRzIG9mIGBQcm9taXNFYFxuICogXG4gKiBAcGFyYW0gICB7Li4uUHJvbWlzZX0gcHJvbWlzZXNcbiAqIFxuICogQHJldHVybnMge1Byb21pc0V9XG4gKi9cblByb21pc0UucmFjZSA9ICguLi5wcm9taXNlcykgPT4gUHJvbWlzRShQcm9taXNlLnJhY2UocHJvbWlzZXMuZmxhdCgpKSlcblxuLyoqXG4gKiBAbmFtZSAgICBQcm9taXNFLnRpbWVvdXRcbiAqIEBzdW1tYXJ5IHRpbWVzIG91dCBhIHByb21pc2UgYWZ0ZXIgc3BlY2lmaWVkIHRpbWVvdXQgZHVyYXRpb24uXG4gKiBcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgIHRpbWVvdXQgIChvcHRpb25hbCkgdGltZW91dCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuIFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogYDEwMDAwYFxuICogQHBhcmFtIHsuLi5Qcm9taXNlfSAgcHJvbWlzZSAgcHJvbWlzZS9mdW5jdGlvbjogb25lIG9yIG1vcmUgcHJvbWlzZXMgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHNcbiAqIFxuICogQGV4YW1wbGUgRXhhbXBsZSAxOiBtdWx0aXBsZSBwcm9taXNlc1xuICogYGBgamF2YXNjcmlwdFxuICogICAgUHJvbWlzRS50aW1lb3V0KFxuICogICAgICAzMDAwMCwgLy8gdGltZW91dCBkdXJhdGlvblxuICogICAgICBQcm9taXNlLnJlc29sdmUoMSlcbiAqICAgIClcbiAqICAgIC8vIFJlc3VsdDogMVxuICogYGBgXG4gKlxuICogQGV4YW1wbGUgRXhhbXBsZSAyOiBtdWx0aXBsZSBwcm9taXNlc1xuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqICAgIFByb21pc0UudGltZW91dChcbiAqICAgICAgMzAwMDAsIC8vIHRpbWVvdXQgZHVyYXRpb25cbiAqICAgICAgUHJvbWlzZS5yZXNvbHZlKDEpLFxuICogICAgICBQcm9taXNlLnJlc29sdmUoMiksXG4gKiAgICAgIFByb21pc2UucmVzb2x2ZSgzKSxcbiAqICAgIClcbiAqICAgIC8vIFJlc3VsdDogWyAxLCAyLCAzIF1cbiAqIGBgYFxuICogXG4gKiBAZXhhbXBsZSBFeGFtcGxlIDM6IGRlZmF1bHQgdGltZW91dCBkdXJhdGlvbiAxMCBzZWNvbmRzXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAgICBjb25zdCBwcm9taXNlID0gUHJvbWlzRS50aW1lb3V0KFByb21pc0UuZGVsYXkoMjAwMDApKVxuICogICAgcHJvbWlzZS5jYXRjaChlcnIgPT4ge1xuICogICAgICAgICAgaWYgKHByb21pc2UudGltZW91dCkge1xuICogICAgICAgICAgICAgIC8vIHJlcXVlc3QgdGltZWQgb3V0XG4gKiAgICAgICAgICAgICAgYWxlcnQoJ1JlcXVlc3QgaXMgdGFraW5nIGxvbmdlciB0aGFuIGV4cGVjdGVkLi4uLi4uJylcbiAqICAgICAgICAgICAgICBwcm9taXNlLnByb21pc2UudGhlbihyZXN1bHQgPT4gYWxlcnQocmVzdWx0KSlcbiAqICAgICAgICAgICAgICByZXR1cm5cbiAqICAgICAgICAgIH1cbiAqICAgICAgICAgIGFsZXJ0KGVycilcbiAqICAgICAgfSlcbiAqYGBgXG4gKiBAcmV0dXJucyB7UHJvbWlzRX0gcmVzdWx0UHJvbWlzZVxuICovXG5Qcm9taXNFLnRpbWVvdXQgPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHRpbWVvdXRJbmRleCA9IGFyZ3MuZmluZEluZGV4KGlzUG9zaXRpdmVOdW1iZXIpXG4gICAgY29uc3QgdGltZW91dCA9IHRpbWVvdXRJbmRleCA+PSAwXG4gICAgICAgICYmIGFyZ3Muc3BsaWNlKHRpbWVvdXRJbmRleCwgMSlcbiAgICAgICAgfHwgMTAwMDBcbiAgICAvLyB1c2UgYWxsIGFyZ3VtZW50cyBleGNlcHQgbGFzdCBvbmVcbiAgICBjb25zdCBwcm9taXNlQXJncyA9IGFyZ3NcbiAgICBjb25zdCBwcm9taXNlID0gcHJvbWlzZUFyZ3MubGVuZ3RoID09PSAxXG4gICAgICAgID8gUHJvbWlzRShwcm9taXNlQXJnc1swXSkgLy8gbWFrZXMgc3VyZSBzaW5nbGUgcHJvbWlzZSByZXNvbHZlcyB0byBhIHNpbmdsZSByZXN1bHRcbiAgICAgICAgOiBQcm9taXNFLmFsbChwcm9taXNlQXJncylcbiAgICBsZXQgdGltZW91dElkXG4gICAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzRSgoXywgcmVqZWN0KSA9PlxuICAgICAgICAvLyBvbmx5IHJlamVjdCBpZiBpdCdzIHN0aWxsIHBlbmRpbmdcbiAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXByb21pc2UucGVuZGluZykgcmV0dXJuXG5cbiAgICAgICAgICAgIHJlc3VsdFByb21pc2UudGltZW91dCA9IHRydWVcbiAgICAgICAgICAgIHJlamVjdCh0ZXh0c0NhcC50aW1lZG91dClcbiAgICAgICAgfSwgdGltZW91dClcbiAgICApXG4gICAgY29uc3QgcmVzdWx0UHJvbWlzZSA9IFByb21pc0UucmFjZShbcHJvbWlzZSwgdGltZW91dFByb21pc2VdKVxuICAgIHJlc3VsdFByb21pc2UucHJvbWlzZSA9IHByb21pc2VcbiAgICByZXN1bHRQcm9taXNlLnRpbWVvdXRJZCA9IHRpbWVvdXRJZFxuICAgIHJlc3VsdFByb21pc2UuY2xlYXJUaW1lb3V0ID0gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZClcbiAgICByZXN1bHRQcm9taXNlLnRpbWVvdXRQcm9taXNlID0gdGltZW91dFByb21pc2VcbiAgICByZXR1cm4gcmVzdWx0UHJvbWlzZVxufVxuXG5jb25zdCBnZXRBYm9ydFNpZ25hbCA9IHRpbWVvdXQgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBhYm9ydEN0cmwgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBhYm9ydEN0cmwuYWJvcnQoKSwgdGltZW91dClcbiAgICAgICAgcmV0dXJuIGFib3J0Q3RybC5zaWduYWxcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBpbnN0YW50aWF0ZSBBYm9ydENvbnRyb2xsZXIuJywgZXJyKVxuICAgIH1cbn0iXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImV4cG9ydHMiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJkZXNjIiwidmFsdWUiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJjYWxsIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiX3R5cGVvZiIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInN0YXRlIiwiRXJyb3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsImRvbmUiLCJtZXRob2ROYW1lIiwidW5kZWZpbmVkIiwicmV0dXJuIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwibGVuZ3RoIiwiaSIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJrZXlzIiwidmFsIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsImNhdGNoIiwiX2NhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJ0cmFuc2xhdGVkIiwiZGVmZXJyZWQiLCJpc0FyciIsImlzQXN5bmNGbiIsImlzRm4iLCJpc0ludGVnZXIiLCJpc09iaiIsImlzUG9zaXRpdmVOdW1iZXIiLCJpc1Byb21pc2UiLCJpc1N0ciIsImlzVmFsaWRVUkwiLCJ0ZXh0c0NhcCIsImludmFsaWRVcmwiLCJ0aW1lZG91dCIsIlByb21pc0UiLCJwcm9taXNlIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsInBlbmRpbmciLCJyZXNvbHZlZCIsInJlamVjdGVkIiwiZmluYWxseSIsImFsbCIsIl9sZW4yIiwicHJvbWlzZXMiLCJfa2V5MiIsImZsYXQiLCJtYXAiLCJwIiwiY2FsbGJhY2siLCJkZWZlciIsIl9yZWYiLCJfcmVmJG9uRXJyb3IiLCJvbkVycm9yIiwib25SZXN1bHQiLCJzdHJpY3QiLCJ0aGlzQXJnIiwiX3JlZiR0aHJvdHRsZSIsInRocm90dGxlIiwibGFzdFByb21pc2UiLCJpZHMiLCJxdWV1ZSIsInJlc29sdmVyIiwiaWQiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJoYW5kbGVyIiwiZHAiLCJjYiIsIl9sZW4zIiwiX2tleTMiLCJjb25jYXQiLCJkZWxheSIsInNldFRpbWVvdXQiLCJnZXRTb2NrZXRFbWl0dGVyIiwic29ja2V0IiwidGltZW91dEdsb2JhbCIsImVycm9yQXJnSW5kZXgiLCJjYWxsYmFja0luZGV4IiwiZXZlbnROYW1lIiwicmVzdWx0TW9kaWZpZXIiLCJlcnJvck1vZGlmaWVyIiwidGltZW91dExvY2FsIiwiY2FsbGJhY2tJbmRleExvY2FsIiwiZGVsYXlQcm9taXNlIiwidGltZW91dCIsImdldEVycm9yIiwiaW50ZXJjZXB0b3IiLCJfcmVmMiIsIl9jYWxsZWUiLCJfbGVuNCIsIl9rZXk0IiwiX2FyZ3MiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwidDAiLCJjb25zb2xlIiwibG9nIiwiaW50ZXJjZXB0b3JFcnJvciIsIl90b0NvbnN1bWFibGVBcnJheSIsImVtaXQiLCJmZXRjaCIsIl9yZWYzIiwiX2NhbGxlZTIiLCJ1cmwiLCJvcHRpb25zIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRtZXRob2QiLCJhc0pzb24iLCJfcmVmNCIsIl9yZWY0JHN0YXR1cyIsInN0YXR1cyIsImlzU3VjY2VzcyIsImpzb24iLCJtZXNzYWdlIiwiX2FyZ3MyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwic2lnbmFsIiwiZ2V0QWJvcnRTaWduYWwiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXBsYWNlIiwidDEiLCJfeCIsIl94MiIsIl94MyIsInBvc3QiLCJfcmVmNSIsIl9jYWxsZWUzIiwiZGF0YSIsIl9vYmplY3RTcHJlYWQyIiwiX2FyZ3MzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiX29iamVjdFNwcmVhZCIsImJvZHkiLCJfZGVmaW5lUHJvcGVydHkiLCJoZWFkZXJzIiwiX3g0IiwiX3g1IiwicmFjZSIsIl9sZW41IiwiX2tleTUiLCJfbGVuNiIsIl9rZXk2IiwidGltZW91dEluZGV4IiwiZmluZEluZGV4IiwicHJvbWlzZUFyZ3MiLCJ0aW1lb3V0SWQiLCJ0aW1lb3V0UHJvbWlzZSIsIl8iLCJyZXN1bHRQcm9taXNlIiwiY2xlYXJUaW1lb3V0IiwiYWJvcnRDdHJsIiwiQWJvcnRDb250cm9sbGVyIiwiYWJvcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/PromisE.js\n')},"./src/utils/chatClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ChatClient": () => (/* binding */ ChatClient),\n/* harmony export */   "ROLE_ADMIN": () => (/* binding */ ROLE_ADMIN),\n/* harmony export */   "ROLE_SUPPORT": () => (/* binding */ ROLE_SUPPORT),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "getClient": () => (/* binding */ getClient),\n/* harmony export */   "getSafeClient": () => (/* binding */ getSafeClient),\n/* harmony export */   "getUser": () => (/* binding */ getUser),\n/* harmony export */   "referralCode": () => (/* binding */ referralCode),\n/* harmony export */   "rxEventsMeta": () => (/* binding */ rxEventsMeta),\n/* harmony export */   "rxFaucetEnabled": () => (/* binding */ rxFaucetEnabled),\n/* harmony export */   "rxIsAdmin": () => (/* binding */ rxIsAdmin),\n/* harmony export */   "rxIsConnected": () => (/* binding */ rxIsConnected),\n/* harmony export */   "rxIsInMaintenanceMode": () => (/* binding */ rxIsInMaintenanceMode),\n/* harmony export */   "rxIsLoggedIn": () => (/* binding */ rxIsLoggedIn),\n/* harmony export */   "rxIsRegistered": () => (/* binding */ rxIsRegistered),\n/* harmony export */   "rxIsSupport": () => (/* binding */ rxIsSupport),\n/* harmony export */   "rxUserId": () => (/* binding */ rxUserId),\n/* harmony export */   "rxUserIdentity": () => (/* binding */ rxUserIdentity),\n/* harmony export */   "setUser": () => (/* binding */ setUser),\n/* harmony export */   "translateError": () => (/* binding */ translateError)\n/* harmony export */ });\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/socket.io-client/wrapper.mjs");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _rx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/rx.js");\n/* harmony import */ var _storageHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/storageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/validator.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\nvar instance, socket;\nvar AUTO_DISCONNECT_MS = parseInt("0" || 0);\nvar MODULE_KEY = \'messaging\';\nvar PREFIX = \'totem_\';\nvar ROLE_ADMIN = \'admin\';\nvar ROLE_SUPPORT = \'support\';\n// read or write to messaging settings storage\nvar rw = function rw(value) {\n  return _storageHelper__WEBPACK_IMPORTED_MODULE_4__["default"].settings.module(MODULE_KEY, value) || {};\n};\nvar rxEventsMeta = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X();\nvar rxFaucetEnabled = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(false);\nvar rxIsAdmin = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(false);\nvar rxIsSupport = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(false);\nvar rxIsConnected = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(false);\nvar rxIsLoggedIn = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(false);\nvar rxIsRegistered = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(!!(rw().user || {}).id);\nvar rxIsInMaintenanceMode = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(false);\nvar rxUserId = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X((getUser() || {}).id);\nvar rxUserIdentity = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X((getUser() || {}).address);\nvar eventMaintenanceMode = \'maintenance-mode\';\nvar eventEventsMeta = \'events-meta\';\n//- migrate existing user data\nvar deprecatedKey = PREFIX + \'chat-user\';\ntry {\n  var oldData = localStorage[deprecatedKey];\n  if (oldData) {\n    localStorage.removeItem(deprecatedKey);\n    rw({\n      user: JSON.parse(oldData)\n    });\n  }\n} catch (e) {}\n// remove legacy trollbox chat history items\nif (rw().history) rw({\n  history: null\n});\n//- migrate end\n\nvar ChatClient = /*#__PURE__*/_createClass(function ChatClient(url) {\n  var _this = this;\n  var autoDisconnectMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AUTO_DISCONNECT_MS;\n  _classCallCheck(this, ChatClient);\n  _defineProperty(this, "awaitReady", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(eventName, timeout) {\n      var log,\n        doWait,\n        eventMeta,\n        _ref2,\n        maintenanceMode,\n        requireLogin,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            log = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n            doWait = !rxIsConnected.value; // wait until chatClient is connected\n            _context.t0 = doWait;\n            if (!_context.t0) {\n              _context.next = 6;\n              break;\n            }\n            _context.next = 6;\n            return (0,_rx__WEBPACK_IMPORTED_MODULE_3__.subjectAsPromise)(rxIsConnected, true, timeout)[0];\n          case 6:\n            _context.next = 8;\n            return _this.getEventsMeta(eventName, timeout);\n          case 8:\n            eventMeta = _context.sent;\n            _ref2 = eventName && eventMeta || {}, maintenanceMode = _ref2.maintenanceMode, requireLogin = _ref2.requireLogin;\n            doWait = requireLogin && !rxIsLoggedIn.value;\n            // wait until user is logged in\n            _context.t1 = doWait;\n            if (!_context.t1) {\n              _context.next = 15;\n              break;\n            }\n            _context.next = 15;\n            return (0,_rx__WEBPACK_IMPORTED_MODULE_3__.subjectAsPromise)(rxIsLoggedIn, true, timeout)[0];\n          case 15:\n            doWait = rxIsInMaintenanceMode.value && !maintenanceMode;\n            // wait until maintenance mode is deactivated\n            if (!doWait) {\n              _context.next = 20;\n              break;\n            }\n            log && log(\'Waiting for maintenance mode to be deactivated...\');\n            _context.next = 20;\n            return (0,_rx__WEBPACK_IMPORTED_MODULE_3__.subjectAsPromise)(rxIsInMaintenanceMode, false, timeout)[0];\n          case 20:\n            return _context.abrupt("return", eventMeta);\n          case 21:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    company\n   * @summary fetch or create a company\n   * \n   * @param   {String} id                         ID (AKA hash) of the company entry\n   * @param   {Object} company                    if falsy, will retrieve company by id \n   * @param   {String} company.countryCode        2 letter country code\n   * @param   {String} company.identity           blockchain identity of the company\n   * @param   {String} company.name               name of the company\n   * @param   {String} company.registrationNumber company registration number for the above countryntry\n   * \n   * @returns {Object} company\n   */\n  _defineProperty(this, "company", /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hash, company) {\n      var _len,\n        args,\n        _key,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            for (_len = _args2.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n              args[_key - 2] = _args2[_key];\n            }\n            _context2.next = 3;\n            return _this.emit(\'company\', [hash, company].concat(args));\n          case 3:\n            return _context2.abrupt("return", _context2.sent);\n          case 4:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    companySearch\n   * @summary search companies\n   *\n   * @param   {String}    query\n   * @param   {Boolean}   searchParentIdentity if false will search for both identity and parentIdentity\n   *  \n   * @returns {Map}\n   */\n  _defineProperty(this, "companySearch", /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(query, searchParentIdentity) {\n      var _len2,\n        args,\n        _key2,\n        _args3 = arguments;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            for (_len2 = _args3.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = _args3[_key2];\n            }\n            _context3.next = 3;\n            return _this.emit(\'company-search\', [query, searchParentIdentity].concat(args) // // convert 2D array back to Map\n            // ([result, limit]) => new Map(result),\n            );\n          case 3:\n            return _context3.abrupt("return", _context3.sent);\n          case 4:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x5, _x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    countries\n   * @summary fetch/update a list of all countries\n   * \n   * @param   {String}    hash    hash of the cached list (sorted) of countries. \n   *                              If supplied hash matches the server\'s latest list hash, result will be empty.\n   * \n   * @returns {Map}\n   */\n  _defineProperty(this, "countries", /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(hash) {\n      var _len3,\n        args,\n        _key3,\n        _args4 = arguments;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            for (_len3 = _args4.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n              args[_key3 - 1] = _args4[_key3];\n            }\n            _context4.next = 3;\n            return _this.emit(\'countries\', [hash].concat(args), function (countries) {\n              return new Map(countries);\n            });\n          case 3:\n            return _context4.abrupt("return", _context4.sent);\n          case 4:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x7) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    crowdloan\n   * @summary fetch or update user contribution\n   * \n   * @param   {String|Object} contribution identity or contribution data\n   * @param   {Nubmer}        contribution.amountContributed\n   * @param   {Nubmer}        contribution.amountPledged\n   * @param   {String}        contribution.identity\n   * @param   {String}        contribution.signature\n   * \n   * @returns {Object}    contribution entry\n   */\n  _defineProperty(this, "crowdloan", /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(contribution) {\n      var _len4,\n        args,\n        _key4,\n        _args5 = arguments;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            for (_len4 = _args5.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n              args[_key4 - 1] = _args5[_key4];\n            }\n            _context5.next = 3;\n            return _this.emit(\'crowdloan\', [contribution].concat(args));\n          case 3:\n            return _context5.abrupt("return", _context5.sent);\n          case 4:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return function (_x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    onCrowdloanPledgeTotal\n   * @summary listen for changes on total pledged amount\n   * \n   * @param   {Function} cb   Args: plegedTotal (number)\n   */\n  _defineProperty(this, "onCrowdloanPledgeTotal", function (cb, once) {\n    return _this.on(\'crowdloan-pledged-total\', cb, once);\n  });\n  /**\n   * @name    currencyConvert\n   * @summary convert an amount from one currency to another\n   * \n   * @param   {String}    from    source currency ID\n   * @param   {String}    to      target currency ID\n   * @param   {Number}    amount  amount to convert\n   * \n   * @returns {Number}\n   */\n  _defineProperty(this, "currencyConvert", /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(from, to, amount) {\n      var _len5,\n        args,\n        _key5,\n        _args6 = arguments;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            for (_len5 = _args6.length, args = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {\n              args[_key5 - 3] = _args6[_key5];\n            }\n            _context6.next = 3;\n            return _this.emit(\'currency-convert\', [from, to, amount].concat(args));\n          case 3:\n            return _context6.abrupt("return", _context6.sent);\n          case 4:\n          case "end":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return function (_x9, _x10, _x11) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    currencyList\n   * @summary fetch/update a list of all countries\n   * \n   * @param   {String} hash   hash of the local cached list of countries.\n   *                          If server\'s version of the hash mathes this, \n   *                          it indicates local cache is uppdated and\n   *                          an empty result will be returned.\n   * @returns {Map}\n   */\n  _defineProperty(this, "currencyList", /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(hash) {\n      var _len6,\n        args,\n        _key6,\n        _args7 = arguments;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            for (_len6 = _args7.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n              args[_key6 - 1] = _args7[_key6];\n            }\n            _context7.next = 3;\n            return _this.emit(\'currency-list\', [hash].concat(args));\n          case 3:\n            return _context7.abrupt("return", _context7.sent);\n          case 4:\n          case "end":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return function (_x12) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    currencyPricesByDate\n   * @summary fetch price of currencies on a specific date\n   * \n   * @param   {String}    date\n   * @param   {Array}     currencyIds \n   * \n   * @returns {Array}\n   */\n  _defineProperty(this, "currencyPricesByDate", /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(date, currencyIds) {\n      var _len7,\n        args,\n        _key7,\n        _args8 = arguments;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            for (_len7 = _args8.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n              args[_key7 - 2] = _args8[_key7];\n            }\n            _context8.next = 3;\n            return _this.emit(\'currency-prices-by-date\', [date, currencyIds].concat(args));\n          case 3:\n            return _context8.abrupt("return", _context8.sent);\n          case 4:\n          case "end":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return function (_x13, _x14) {\n      return _ref9.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    eventsMeta\n   * @summary fetch and cache messaging service events meta data\n   * \n   * @param   {String}    eventName   (optional) if unspecified, will return all emittable and listenable events\' meta\n   * @param   {Number}    timeout     (optional)\n   */\n  _defineProperty(this, "getEventsMeta", /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(eventName, timeout) {\n      var eventsMeta, emittables, listenables;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return (0,_rx__WEBPACK_IMPORTED_MODULE_3__.subjectAsPromise)(_this.rxEventsMeta, _utils__WEBPACK_IMPORTED_MODULE_5__.isObj, timeout)[0];\n          case 2:\n            eventsMeta = _context9.sent;\n            if (eventName) {\n              _context9.next = 5;\n              break;\n            }\n            return _context9.abrupt("return", eventsMeta);\n          case 5:\n            emittables = eventsMeta.emittables, listenables = eventsMeta.listenables;\n            return _context9.abrupt("return", (emittables === null || emittables === void 0 ? void 0 : emittables[eventName]) || (listenables === null || listenables === void 0 ? void 0 : listenables[eventName]));\n          case 7:\n          case "end":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return function (_x15, _x16) {\n      return _ref10.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, "faucetRequest", /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(address) {\n      var _len8,\n        args,\n        _key8,\n        _args10 = arguments;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            for (_len8 = _args10.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n              args[_key8 - 1] = _args10[_key8];\n            }\n            _context10.next = 3;\n            return _this.emit(\'faucet-request\', [address].concat(args));\n          case 3:\n            return _context10.abrupt("return", _context10.sent);\n          case 4:\n          case "end":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return function (_x17) {\n      return _ref11.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, "faucetStatus", /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(enabled) {\n      var _len9,\n        args,\n        _key9,\n        _args11 = arguments;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            for (_len9 = _args11.length, args = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n              args[_key9 - 1] = _args11[_key9];\n            }\n            _context11.next = 3;\n            return _this.emit(\'faucet-status\', [enabled].concat(args));\n          case 3:\n            return _context11.abrupt("return", _context11.sent);\n          case 4:\n          case "end":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return function (_x18) {\n      return _ref12.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    onFaucetStatus\n   * @summary listen to faucet status changes\n   * \n   * @param   {Function}  cb  args: [active boolean]\n   * @param   {Boolean}   once\n   * \n   * @returns {Function}  unsubscribe\n   */\n  _defineProperty(this, "onFaucetStatus", function (cb, once) {\n    return _this.on(\'faucet-status\', cb, once);\n  });\n  /**\n   * @name    idExists\n   * @summary Check if User ID Exists\n   * \n   * @returns {Boolean}\n   */\n  _defineProperty(this, "idExists", /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(userId) {\n      var _len10,\n        args,\n        _key10,\n        _args12 = arguments;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            for (_len10 = _args12.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n              args[_key10 - 1] = _args12[_key10];\n            }\n            _context12.next = 3;\n            return _this.emit(\'id-exists\', [userId].concat(args));\n          case 3:\n            return _context12.abrupt("return", _context12.sent);\n          case 4:\n          case "end":\n            return _context12.stop();\n        }\n      }, _callee12);\n    }));\n    return function (_x19) {\n      return _ref13.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    isUserOnline\n   * @summary Check if User is online\n   * \n   * @returns {Boolean}\n   */\n  _defineProperty(this, "isUserOnline", /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(userId) {\n      var _len11,\n        args,\n        _key11,\n        _args13 = arguments;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            for (_len11 = _args13.length, args = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n              args[_key11 - 1] = _args13[_key11];\n            }\n            _context13.next = 3;\n            return _this.emit(\'is-user-online\', [userId].concat(args));\n          case 3:\n            return _context13.abrupt("return", _context13.sent);\n          case 4:\n          case "end":\n            return _context13.stop();\n        }\n      }, _callee13);\n    }));\n    return function (_x20) {\n      return _ref14.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    glAccounts\n   * @summary fetch global ledger accounts by account number\n   * \n   * @param   {Array} accountNumbers\n   * \n   * @returns {*}\n   */\n  _defineProperty(this, "glAccounts", /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(accountNumbers) {\n      var _len12,\n        args,\n        _key12,\n        _args14 = arguments;\n      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            for (_len12 = _args14.length, args = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n              args[_key12 - 1] = _args14[_key12];\n            }\n            _context14.next = 3;\n            return _this.emit(\'gl-accounts\', [accountNumbers].concat(args));\n          case 3:\n            return _context14.abrupt("return", _context14.sent);\n          case 4:\n          case "end":\n            return _context14.stop();\n        }\n      }, _callee14);\n    }));\n    return function (_x21) {\n      return _ref15.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    languageErrorMessages\n   * @summary Retrieve a list of error messages used in the messaging service. \n   * FOR BUILD MODE ONLY.\n   * \n   * @returns {Array}\n   */\n  _defineProperty(this, "languageErrorMessages", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n    var _len13,\n      args,\n      _key13,\n      _args15 = arguments;\n    return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          for (_len13 = _args15.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n            args[_key13] = _args15[_key13];\n          }\n          _context15.next = 3;\n          return _this.emit(\'language-error-messages\', [].concat(args));\n        case 3:\n          return _context15.abrupt("return", _context15.sent);\n        case 4:\n        case "end":\n          return _context15.stop();\n      }\n    }, _callee15);\n  })));\n  /**\n   * @name    languageTranslations\n   * @summary retrieve a list of translated application texts for a specific language\n   * \n   * @param   {String} langCode   2 digit language code\n   * @param   {String} hash       (optional) hash cached translated texts\' array.\n   *                              If matches with servers hash, will return empty result.\n   * \n   * @returns {Array}\n   */\n  _defineProperty(this, "languageTranslations", /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(langCode, hash) {\n      var _len14,\n        args,\n        _key14,\n        _args16 = arguments;\n      return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n        while (1) switch (_context16.prev = _context16.next) {\n          case 0:\n            for (_len14 = _args16.length, args = new Array(_len14 > 2 ? _len14 - 2 : 0), _key14 = 2; _key14 < _len14; _key14++) {\n              args[_key14 - 2] = _args16[_key14];\n            }\n            _context16.next = 3;\n            return _this.emit(\'language-translations\', [langCode, hash].concat(args));\n          case 3:\n            return _context16.abrupt("return", _context16.sent);\n          case 4:\n          case "end":\n            return _context16.stop();\n        }\n      }, _callee16);\n    }));\n    return function (_x22, _x23) {\n      return _ref17.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    login\n   * @summary user login\n   * \n   * @param   {String} id \n   * @param   {String} secret\n   *  \n   * @returns {Object} data. Eg: roles etc.\n   */\n  // login = async (id, secret, ...args) => await this.emit(\n  //     \'login\',\n  //     [\n  //         id,\n  //         secret,\n  //         ...args\n  //     ],\n  //     async (data) => {\n  //         const { address, roles = [] } = data || {}\n  //         rxUserIdentity.next(address)\n  //         // store user roles etc data sent from server\n  //         setUser({ ...getUser(), ...data })\n  //         rxIsLoggedIn.next(true)\n  //         rxIsAdmin.next(roles.includes(ROLE_ADMIN))\n  //         rxIsSupport.next(roles.includes(ROLE_SUPPORT))\n  //         return data\n  //     },\n  //     err => {\n  //         rxIsLoggedIn.next(false)\n  //         console.log(\'Login failed\', err)\n  //     }\n  // )\n  /**\n   * @name    maintenanceMode\n   * @summary check/enable/disable maintenance mode. Only admin users will be able change mode.\n   * \n   * @param   {Boolean}     active\n   * @param   {Function}    cb \n   */\n  _defineProperty(this, "maintenanceMode", /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(active) {\n      var _len15,\n        args,\n        _key15,\n        _args17 = arguments;\n      return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n        while (1) switch (_context17.prev = _context17.next) {\n          case 0:\n            for (_len15 = _args17.length, args = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n              args[_key15 - 1] = _args17[_key15];\n            }\n            _context17.next = 3;\n            return _this.emit(eventMaintenanceMode, [active].concat(args));\n          case 3:\n            return _context17.abrupt("return", _context17.sent);\n          case 4:\n          case "end":\n            return _context17.stop();\n        }\n      }, _callee17);\n    }));\n    return function (_x24) {\n      return _ref18.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    onMaintenanceMode\n   * @summary listen for server maintenance status changes\n   * \n   * @param   {Function} cb args: [active Boolean]\n   */\n  _defineProperty(this, "onMaintenanceMode", function (cb, once) {\n    return _this.on(eventMaintenanceMode, cb, once);\n  });\n  /**\n   * @name   message\n   * @summary send a chat message to one or more users.\n   *\n   * @param  {Array}     toUserIds    Recipient user IDs (without \'@\' sign)\n   * @param  {String}    message      encrypted or plain text message\n   * @param  {Bool}      encrypted    determines whether `message` requires decryption. \n   *                                  (Encryption to be implemented)\n   * \n   * @returns {*}\n   */\n  _defineProperty(this, "message", /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(toUserIds, msg, encrypted) {\n      var _len16,\n        args,\n        _key16,\n        _args18 = arguments;\n      return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n        while (1) switch (_context18.prev = _context18.next) {\n          case 0:\n            for (_len16 = _args18.length, args = new Array(_len16 > 3 ? _len16 - 3 : 0), _key16 = 3; _key16 < _len16; _key16++) {\n              args[_key16 - 3] = _args18[_key16];\n            }\n            _context18.next = 3;\n            return _this.emit(\'message\', [toUserIds, msg, encrypted].concat(args));\n          case 3:\n            return _context18.abrupt("return", _context18.sent);\n          case 4:\n          case "end":\n            return _context18.stop();\n        }\n      }, _callee18);\n    }));\n    return function (_x25, _x26, _x27) {\n      return _ref19.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    on\n   * @summary listen to websocket events\n   * \n   * @param   {String}    eventName \n   * @param   {Function}  cb \n   * @param   {Boolean}   once \n   * \n   * @returns {Function}  unsubscribe\n   */\n  _defineProperty(this, "on", function (eventName, cb) {\n    var once = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(cb)) return function () {};\n    var fn = once ? _this.socket.once : _this.socket.on;\n    fn.call(_this.socket, eventName, cb);\n    return function () {\n      return _this.socket.off(eventName, cb);\n    };\n  });\n  /**\n   * @name    onMessage\n   * @summary listen for new chat messages\n   * \n   * @param   {Function} cb callback arguments => \n   *                          senderId    {String}  : curent user\'s ID\n   *                          receiverIds {Array}   : User IDs without \'@\' sign\n   *                          message     {String}  : encrypted or plain text message\n   *                          encrypted   {Bool}    : determines whether @message requires decryption\n   */\n  _defineProperty(this, "onMessage", function (cb, once) {\n    return _this.on(\'message\', cb, once);\n  });\n  /**\n   * @name    messageGetRecent\n   * @summary fetch recent chat messages\n   * \n   * @param   {String}    lastMsgTs   most recent previous message\'s timestamp\n   * \n   * @returns {Array} messages\n   */\n  _defineProperty(this, "messageGetRecent", /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(lastMsgTs) {\n      var _len17,\n        args,\n        _key17,\n        _args19 = arguments;\n      return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n        while (1) switch (_context19.prev = _context19.next) {\n          case 0:\n            for (_len17 = _args19.length, args = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n              args[_key17 - 1] = _args19[_key17];\n            }\n            _context19.next = 3;\n            return _this.emit(\'message-get-recent\', [lastMsgTs].concat(args));\n          case 3:\n            return _context19.abrupt("return", _context19.sent);\n          case 4:\n          case "end":\n            return _context19.stop();\n        }\n      }, _callee19);\n    }));\n    return function (_x28) {\n      return _ref20.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    messageGroupName\n   * @summary set name of a group chat\n   * \n   * @param   {Array}     userIds list of all user IDs belonging to the group\n   * @param   {String}    name    new group name\n   * \n   * @returns {*}\n   */\n  _defineProperty(this, "messageGroupName", /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(userIds, name) {\n      var _len18,\n        args,\n        _key18,\n        _args20 = arguments;\n      return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n        while (1) switch (_context20.prev = _context20.next) {\n          case 0:\n            for (_len18 = _args20.length, args = new Array(_len18 > 2 ? _len18 - 2 : 0), _key18 = 2; _key18 < _len18; _key18++) {\n              args[_key18 - 2] = _args20[_key18];\n            }\n            _context20.next = 3;\n            return _this.emit(\'message-group-name\', [userIds, name].concat(args));\n          case 3:\n            return _context20.abrupt("return", _context20.sent);\n          case 4:\n          case "end":\n            return _context20.stop();\n        }\n      }, _callee20);\n    }));\n    return function (_x29, _x30) {\n      return _ref21.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    newsletterSignup\n   * @summary sign up to newsletter and updates\n   * \n   * @param   {Object}    values\n   * @param   {String}    values.email\n   * @param   {String}    values.name     subscriber\'s full name\n   * \n   * @returns {*}\n   */\n  _defineProperty(this, "newsletterSignup", /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(values) {\n      var _len19,\n        args,\n        _key19,\n        _args21 = arguments;\n      return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n        while (1) switch (_context21.prev = _context21.next) {\n          case 0:\n            for (_len19 = _args21.length, args = new Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {\n              args[_key19 - 1] = _args21[_key19];\n            }\n            _context21.next = 3;\n            return _this.emit(\'newsletter-signup\', [values].concat(args));\n          case 3:\n            return _context21.abrupt("return", _context21.sent);\n          case 4:\n          case "end":\n            return _context21.stop();\n        }\n      }, _callee21);\n    }));\n    return function (_x31) {\n      return _ref22.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    notify\n   * @summary Send notification\n   * \n   * @param   {Array}   toUserIds   recipient user ID(s)\n   * @param   {String}  type        parent notification type. Eg: timeKeeping\n   * @param   {String}  childType   child notification type. Eg: invitation\n   * @param   {String}  message     message to be displayed\n   * @param   {Object}  data        information specific to the type of notification\n   * \n   * @returns {*}\n   */\n  _defineProperty(this, "notify", /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(toUserIds, type, childType, message, data) {\n      var _len20,\n        args,\n        _key20,\n        _args22 = arguments;\n      return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n        while (1) switch (_context22.prev = _context22.next) {\n          case 0:\n            for (_len20 = _args22.length, args = new Array(_len20 > 5 ? _len20 - 5 : 0), _key20 = 5; _key20 < _len20; _key20++) {\n              args[_key20 - 5] = _args22[_key20];\n            }\n            _context22.next = 3;\n            return _this.emit(\'notification\', [toUserIds, type, childType, message, data].concat(args));\n          case 3:\n            return _context22.abrupt("return", _context22.sent);\n          case 4:\n          case "end":\n            return _context22.stop();\n        }\n      }, _callee22);\n    }));\n    return function (_x32, _x33, _x34, _x35, _x36) {\n      return _ref23.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    onNotify\n   * @summary listen for new notification\n   * \n   * @param   {Function} cb   callback arguments:\n   *                          - id         string     : notification ID\n   *                          - senderId   string     : sender user ID\n   *                          - type       string     : parent notification type\n   *                          - childType  string     : child notification type\n   *                          - message    string     : notification message\n   *                          - data       object     : extra info specific to `type` and `childType`\n   *                          - tsCreated  date       : notification creation timestamp\n   *                          - cbConfirm  function   : a function to confirm receipt\n   */\n  _defineProperty(this, "onNotify", function (cb, once) {\n    return _this.on(\'notification\', cb, once);\n  });\n  /**\n   * @name    notificationGetRecent\n   * @summary retrieve a list of recent notification\n   * \n   * @param   {String}    tsLast  (optional) timestamp of the most recent previously received notification\n   * \n   * @returns {Map}\n   */\n  _defineProperty(this, "notificationGetRecent", /*#__PURE__*/function () {\n    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(tsLast) {\n      var _len21,\n        args,\n        _key21,\n        _args23 = arguments;\n      return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n        while (1) switch (_context23.prev = _context23.next) {\n          case 0:\n            for (_len21 = _args23.length, args = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {\n              args[_key21 - 1] = _args23[_key21];\n            }\n            _context23.next = 3;\n            return _this.emit(\'notification-get-recent\', [tsLast].concat(args), function (result) {\n              return new Map(result);\n            });\n          case 3:\n            return _context23.abrupt("return", _context23.sent);\n          case 4:\n          case "end":\n            return _context23.stop();\n        }\n      }, _callee23);\n    }));\n    return function (_x37) {\n      return _ref24.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    notificationSetStatus\n   * @summary Mark notification as read or deleted\n   * \n   * @param   {String}    id      Notification ID\n   * @param   {Boolean}   read    marks as read or unread. Optional if `deleted = true`\n   * @param   {Boolean}   deleted (optional) marks as deleted or undeleted\n   */\n  _defineProperty(this, "notificationSetStatus", /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(id, read, deleted) {\n      var _len22,\n        args,\n        _key22,\n        _args24 = arguments;\n      return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n        while (1) switch (_context24.prev = _context24.next) {\n          case 0:\n            for (_len22 = _args24.length, args = new Array(_len22 > 3 ? _len22 - 3 : 0), _key22 = 3; _key22 < _len22; _key22++) {\n              args[_key22 - 3] = _args24[_key22];\n            }\n            _context24.next = 3;\n            return _this.emit(\'notification-set-status\', [id, read, deleted].concat(args));\n          case 3:\n            return _context24.abrupt("return", _context24.sent);\n          case 4:\n          case "end":\n            return _context24.stop();\n        }\n      }, _callee24);\n    }));\n    return function (_x38, _x39, _x40) {\n      return _ref25.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    onCRUD\n   * @summary listen to create, read, update and deletion of off-chain data.\n   * \n   * @param   {Function} cb   Args: `{action, data, id, type}`\n   */\n  _defineProperty(this, "onCRUD", function (cb, once) {\n    return _this.on(\'CRUD\', cb, once);\n  });\n  /**\n   * @name    project\n   * @summary add/get/update project (Activity)\n   * \n   * @param {String}   projectId   Project ID\n   * @param {Object}   project\n   * @param {Boolean}  create      whether to create or update project\n   */\n  _defineProperty(this, "project", /*#__PURE__*/function () {\n    var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(projectId, project, create) {\n      var _len23,\n        args,\n        _key23,\n        _args25 = arguments;\n      return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n        while (1) switch (_context25.prev = _context25.next) {\n          case 0:\n            for (_len23 = _args25.length, args = new Array(_len23 > 3 ? _len23 - 3 : 0), _key23 = 3; _key23 < _len23; _key23++) {\n              args[_key23 - 3] = _args25[_key23];\n            }\n            _context25.next = 3;\n            return _this.emit(\'project\', [projectId, project, create].concat(args));\n          case 3:\n            return _context25.abrupt("return", _context25.sent);\n          case 4:\n          case "end":\n            return _context25.stop();\n        }\n      }, _callee25);\n    }));\n    return function (_x41, _x42, _x43) {\n      return _ref26.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    projectsByHashes\n   * @summary retrieve projects by an IDs (AKA hashes)\n   * \n   * @param   {Array} projectIds\n   * \n   * @returns {Array} [projects, notFoundIds]\n   */\n  _defineProperty(this, "projectsByHashes", /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(projectIds) {\n      var _len24,\n        args,\n        _key24,\n        _args26 = arguments;\n      return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n        while (1) switch (_context26.prev = _context26.next) {\n          case 0:\n            for (_len24 = _args26.length, args = new Array(_len24 > 1 ? _len24 - 1 : 0), _key24 = 1; _key24 < _len24; _key24++) {\n              args[_key24 - 1] = _args26[_key24];\n            }\n            _context26.next = 3;\n            return _this.emit(\'projects-by-hashes\', [projectIds].concat(args) // projects => [new Map(projects), notFoundIds],\n            );\n          case 3:\n            return _context26.abrupt("return", _context26.sent);\n          case 4:\n          case "end":\n            return _context26.stop();\n        }\n      }, _callee26);\n    }));\n    return function (_x44) {\n      return _ref27.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    register\n   * @summary register new user\n   * \n   * @param   {String}    id          new user ID\n   * @param   {String}    secret\n   * @param   {String}    address     Blockchain identity\n   * @param   {String}    referredBy  (optional) referrer user ID\n   */\n  _defineProperty(this, "register", /*#__PURE__*/function () {\n    var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(id, secret, address, referredBy) {\n      var _len25,\n        args,\n        _key25,\n        _args27 = arguments;\n      return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n        while (1) switch (_context27.prev = _context27.next) {\n          case 0:\n            for (_len25 = _args27.length, args = new Array(_len25 > 4 ? _len25 - 4 : 0), _key25 = 4; _key25 < _len25; _key25++) {\n              args[_key25 - 4] = _args27[_key25];\n            }\n            _context27.next = 3;\n            return _this.emit(\'register\', [id, secret, address, referredBy].concat(args), function () {\n              setUser({\n                id: id,\n                secret: secret\n              });\n              rxIsLoggedIn.next(true);\n              rxIsRegistered.next(true);\n              rxUserIdentity.next(address);\n            });\n          case 3:\n            return _context27.abrupt("return", _context27.sent);\n          case 4:\n          case "end":\n            return _context27.stop();\n        }\n      }, _callee27);\n    }));\n    return function (_x45, _x46, _x47, _x48) {\n      return _ref28.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    rewardsClaim\n   * @summary retrieves a verificaiton\n   * \n   * @param   {String}    platform    social media platform name. Eg: twitter\n   * @param   {String}    handle      user\'s social media handle/username\n   * @param   {String}    postId      social media post ID\n   * \n   * @returns {String}\n   */\n  _defineProperty(this, "rewardsClaim", /*#__PURE__*/function () {\n    var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(platform, handle, postId) {\n      var _len26,\n        args,\n        _key26,\n        _args28 = arguments;\n      return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n        while (1) switch (_context28.prev = _context28.next) {\n          case 0:\n            for (_len26 = _args28.length, args = new Array(_len26 > 3 ? _len26 - 3 : 0), _key26 = 3; _key26 < _len26; _key26++) {\n              args[_key26 - 3] = _args28[_key26];\n            }\n            _context28.next = 3;\n            return _this.emit(\'rewards-claim\', [platform, handle, postId].concat(args));\n          case 3:\n            return _context28.abrupt("return", _context28.sent);\n          case 4:\n          case "end":\n            return _context28.stop();\n        }\n      }, _callee28);\n    }));\n    return function (_x49, _x50, _x51) {\n      return _ref29.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    handleClaimKapex\n   * @summary Handle claim requests to migrate Meccano testnet reward tokens to Kapex chain.\n   * This is to simply mark that the user has completed the required tasks.\n   * At the end of the claim period, all requests will be validated and checked for fradulent claims.\n   * \n   * @param   {Boolea|Object} data.checkEligible  To check if user is eligible to migrate rewards.\n   * @param   {Boolea|Object} data.checkSubmitted To check if user already submitted their claim.\n   * @param   {String}        data.identity       Identity that completed the tasks and to distribute $KAPEX.\n   * @param   {Function}      callback            callback function expected arguments:\n   *                                              @err    String: error message if query failed\n   */\n  _defineProperty(this, "rewardsClaimKAPEX", /*#__PURE__*/function () {\n    var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(identity) {\n      var _len27,\n        args,\n        _key27,\n        _args29 = arguments;\n      return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n        while (1) switch (_context29.prev = _context29.next) {\n          case 0:\n            for (_len27 = _args29.length, args = new Array(_len27 > 1 ? _len27 - 1 : 0), _key27 = 1; _key27 < _len27; _key27++) {\n              args[_key27 - 1] = _args29[_key27];\n            }\n            _context29.next = 3;\n            return _this.emit(\'rewards-claim-kapex\', [identity].concat(args));\n          case 3:\n            return _context29.abrupt("return", _context29.sent);\n          case 4:\n          case "end":\n            return _context29.stop();\n        }\n      }, _callee29);\n    }));\n    return function (_x52) {\n      return _ref30.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    rewardsGetData\n   * @summary retrieves all received rewards by the user\n   * \n   * @returns {Object}    rewards data\n   */\n  _defineProperty(this, "rewardsGetData", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n    var _len28,\n      args,\n      _key28,\n      _args30 = arguments;\n    return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n      while (1) switch (_context30.prev = _context30.next) {\n        case 0:\n          for (_len28 = _args30.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n            args[_key28] = _args30[_key28];\n          }\n          _context30.next = 3;\n          return _this.emit(\'rewards-get-data\', [].concat(args));\n        case 3:\n          return _context30.abrupt("return", _context30.sent);\n        case 4:\n        case "end":\n          return _context30.stop();\n      }\n    }, _callee30);\n  })));\n  /**\n   * @name    task\n   * @summary saves off-chain task details to the database.\n   * Requires pre-authentication using BONSAI with the blockchain identity that owns the task.\n   * Login is required simply for the purpose of logging the User ID who saved the data.\n   * @description \'task-market-created\' event will be broadcasted whenever a new marketplace task is created.\n   * \n   * @param {String}   taskId          task ID\n   * @param {Object}   task\n   * @param {String}   ownerAddress    task owner identity\n   */\n  _defineProperty(this, "task", /*#__PURE__*/function () {\n    var _ref32 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(id, task, ownerAddress) {\n      var _len29,\n        args,\n        _key29,\n        _args31 = arguments;\n      return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n        while (1) switch (_context31.prev = _context31.next) {\n          case 0:\n            for (_len29 = _args31.length, args = new Array(_len29 > 3 ? _len29 - 3 : 0), _key29 = 3; _key29 < _len29; _key29++) {\n              args[_key29 - 3] = _args31[_key29];\n            }\n            _context31.next = 3;\n            return _this.emit(\'task\', [id, task, ownerAddress].concat(args));\n          case 3:\n            return _context31.abrupt("return", _context31.sent);\n          case 4:\n          case "end":\n            return _context31.stop();\n        }\n      }, _callee31);\n    }));\n    return function (_x53, _x54, _x55) {\n      return _ref32.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    taskGetById\n   * @summary retrieve a list of tasks details\' (off-chain data) by Task IDs\n   * \n   * @param   {String|Array}  ids single or array of Task IDs\n   * \n   * @returns {Map} list of objects with task details\n   */\n  _defineProperty(this, "taskGetById", /*#__PURE__*/function () {\n    var _ref33 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(ids) {\n      var _len30,\n        args,\n        _key30,\n        _args32 = arguments;\n      return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n        while (1) switch (_context32.prev = _context32.next) {\n          case 0:\n            for (_len30 = _args32.length, args = new Array(_len30 > 1 ? _len30 - 1 : 0), _key30 = 1; _key30 < _len30; _key30++) {\n              args[_key30 - 1] = _args32[_key30];\n            }\n            _context32.next = 3;\n            return _this.emit(\'task-get-by-id\', [ids].concat(args), function (result) {\n              return new Map(result);\n            });\n          case 3:\n            return _context32.abrupt("return", _context32.sent);\n          case 4:\n          case "end":\n            return _context32.stop();\n        }\n      }, _callee32);\n    }));\n    return function (_x56) {\n      return _ref33.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    taskGetByParentId\n   * @summary search for tasks by parent ID\n   *\n   * @param   {String}    parentId\n   * \n   * @returns {Map}   list of tasks with details\n   */\n  _defineProperty(this, "taskGetByParentId", /*#__PURE__*/function () {\n    var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(parentId) {\n      var _len31,\n        args,\n        _key31,\n        _args33 = arguments;\n      return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n        while (1) switch (_context33.prev = _context33.next) {\n          case 0:\n            for (_len31 = _args33.length, args = new Array(_len31 > 1 ? _len31 - 1 : 0), _key31 = 1; _key31 < _len31; _key31++) {\n              args[_key31 - 1] = _args33[_key31];\n            }\n            _context33.next = 3;\n            return _this.emit(\'task-get-by-parent-id\', [parentId].concat(args), function (result) {\n              return new Map(result);\n            });\n          case 3:\n            return _context33.abrupt("return", _context33.sent);\n          case 4:\n          case "end":\n            return _context33.stop();\n        }\n      }, _callee33);\n    }));\n    return function (_x57) {\n      return _ref34.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    taskMarketApply\n   * @summary apply for an open marketplace task\n   *\n   * @param   {Object}    application\n   * @param   {Array}     application.links    (optional) only used if published task requires proposal\n   * @param   {String}    application.proposal (optional) required only if published task requires proposal\n   * @param   {String}    application.taskId\n   * @param   {String}    application.workerAddress\n   */\n  _defineProperty(this, "taskMarketApply", /*#__PURE__*/function () {\n    var _ref35 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(application) {\n      var _len32,\n        args,\n        _key32,\n        _args34 = arguments;\n      return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n        while (1) switch (_context34.prev = _context34.next) {\n          case 0:\n            for (_len32 = _args34.length, args = new Array(_len32 > 1 ? _len32 - 1 : 0), _key32 = 1; _key32 < _len32; _key32++) {\n              args[_key32 - 1] = _args34[_key32];\n            }\n            _context34.next = 3;\n            return _this.emit(\'task-market-apply\', [application].concat(args), function (result) {\n              return new Map(result);\n            });\n          case 3:\n            return _context34.abrupt("return", _context34.sent);\n          case 4:\n          case "end":\n            return _context34.stop();\n        }\n      }, _callee34);\n    }));\n    return function (_x58) {\n      return _ref35.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    onTaskMarketCreated\n   * @summary subscribe to new marketplace task creation event\n   *\n   * @param   {Function} cb   args: [taskId string]\n   */\n  _defineProperty(this, "onTaskMarketCreated", function (cb, once) {\n    return _this.on(\'task-market-created\', cb, once);\n  });\n  /**\n   * @name    taskMarketApplyResponse\n   * @summary task owner/publisher accept/rejects application(s)\n   *\n   * @param   {Object}    data\n   * @param   {Boolean}   data.rejectOthers   (optional) if true applications other than accepted will be rejected\n   * @param   {Boolean}   data.silent         (optional) whether to skip notification for rejected applications\n   * @param   {Boolean}   data.status         set accepted/rejected status for a specific applicant\n   * @param   {String}    data.taskId\n   * @param   {String}    data.workerAddress\n   * @param   {Function}  callback            Args: [error String, updateCount Number]\n   */\n  _defineProperty(this, "taskMarketApplyResponse", /*#__PURE__*/function () {\n    var _ref36 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(data) {\n      var _len33,\n        args,\n        _key33,\n        _args35 = arguments;\n      return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n        while (1) switch (_context35.prev = _context35.next) {\n          case 0:\n            for (_len33 = _args35.length, args = new Array(_len33 > 1 ? _len33 - 1 : 0), _key33 = 1; _key33 < _len33; _key33++) {\n              args[_key33 - 1] = _args35[_key33];\n            }\n            _context35.next = 3;\n            return _this.emit(\'task-market-apply-response\', [data].concat(args));\n          case 3:\n            return _context35.abrupt("return", _context35.sent);\n          case 4:\n          case "end":\n            return _context35.stop();\n        }\n      }, _callee35);\n    }));\n    return function (_x59) {\n      return _ref36.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    taskMarketSearch\n   * @summary search marketplace orders\n   * \n   * @param   {Object}    filter          (optional)  if not supplied will return latest 100 entries\n   * @param   {String}    filter.keywords (optional)\n   * @param   {Number}    filter.pageNo   (optional)\n   * \n   * @returns {Map}\n   */\n  _defineProperty(this, "taskMarketSearch", /*#__PURE__*/function () {\n    var _ref37 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(filter) {\n      var _len34,\n        args,\n        _key34,\n        _args36 = arguments;\n      return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n        while (1) switch (_context36.prev = _context36.next) {\n          case 0:\n            for (_len34 = _args36.length, args = new Array(_len34 > 1 ? _len34 - 1 : 0), _key34 = 1; _key34 < _len34; _key34++) {\n              args[_key34 - 1] = _args36[_key34];\n            }\n            _context36.next = 3;\n            return _this.emit(\'task-market-search\', [filter].concat(args), function (result) {\n              return new Map(result);\n            });\n          case 3:\n            return _context36.abrupt("return", _context36.sent);\n          case 4:\n          case "end":\n            return _context36.stop();\n        }\n      }, _callee36);\n    }));\n    return function (_x60) {\n      return _ref37.apply(this, arguments);\n    };\n  }());\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isStr)(url)) {\n    var hostProd = \'totem.live\';\n    var hostStaging = \'dev.totem.live\';\n    var isNode = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isNodeJS)();\n    var staging = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isBool)(url) ? url : !isNode && window.location.hostname === hostStaging;\n    var hostname = !isNode ? window.location.hostname // if frontend the use the URL\n    : staging ? hostStaging : hostProd;\n    var port = staging ? 3003 : 3001;\n    url = "wss://".concat(hostname, ":").concat(port);\n  }\n  this.url = url;\n  socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this.url, {\n    transports: [\'websocket\'],\n    secure: true,\n    rejectUnauthorized: false\n  });\n  this.socket = socket;\n  // add support for legacy `.promise`\n  Object.keys(this).forEach(function (key) {\n    var func = _this[key];\n    if (key.startsWith(\'on\') || !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(func)) return;\n    func.promise = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n      var _args37 = arguments;\n      return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n        while (1) switch (_context37.prev = _context37.next) {\n          case 0:\n            _context37.next = 2;\n            return func.apply(void 0, _args37);\n          case 2:\n            return _context37.abrupt("return", _context37.sent);\n          case 3:\n          case "end":\n            return _context37.stop();\n        }\n      }, _callee37);\n    }));\n  });\n  this.connect = function () {\n    return _this.socket.connect();\n  };\n  this.disconnect = function () {\n    log(\'Manual disconnect\');\n    _this.socket.disconnect();\n  };\n  this.disconnectDeferred = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.deferred)(function () {\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isPositiveInteger)(autoDisconnectMs)) return;\n    log(\'Disconnecting due to inactivity\');\n    _this.socket.disconnect();\n  }, autoDisconnectMs);\n  this.isConnected = function () {\n    return _this.socket.connected;\n  };\n  this.onConnect = function (cb) {\n    return _this.on(\'connect\', cb);\n  };\n  // this.onConnectTimeout = (cb, once) => this.on(\'connect_timeout\', cb, once);\n  this.onConnectError = function (cb, once) {\n    return _this.on(\'connect_error\', cb, once);\n  };\n  this.onError = function (cb, once) {\n    return _this.on(\'error\', cb, once);\n  };\n  this.onReconnect = function (cb, once) {\n    return _this.on(\'reconnect\', cb, once);\n  };\n  this.rxEventsMeta = rxEventsMeta;\n  this.rxFaucetEnabled = rxFaucetEnabled;\n  this.rxIsConnected = rxIsConnected;\n  this.rxIsInMaintenanceMode = rxIsInMaintenanceMode;\n  this.rxIsLoggedIn = rxIsLoggedIn;\n  this.rxIsRegistered = rxIsRegistered;\n\n  // converts callback based emission to promise. With 30 seconds timeout.\n  this._emitter = _PromisE__WEBPACK_IMPORTED_MODULE_2__["default"].getSocketEmitter(socket, 30000, 0, null);\n\n  /**\n   * @name    emit\n   * \n   * @param   {String}    eventName       name of the Websocket message event\n   * @param   {Array}     args            (optional) arguments/data to supplied during event emission\n   * @param   {Function}  resultModifier  (optional) modify result before being resolved\n   * @param   {Function}  onError         (optional)\n   * @param   {Number}    timeout    (optional) timeout in milliseconds\n   * \n   * @returns {Promise}\n   */\n  this.emit = /*#__PURE__*/function () {\n    var _ref39 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(eventName) {\n      var args,\n        resultModifier,\n        onError,\n        timeout,\n        callbackIndex,\n        eventMeta,\n        customMessages,\n        _eventMeta$params,\n        params,\n        _eventMeta$result,\n        resultDef,\n        callback,\n        len,\n        cbIndex,\n        gotCb,\n        _params,\n        err,\n        _ref40,\n        _ref41,\n        onSuccess,\n        onFail,\n        resultPromise,\n        wsPromise,\n        _args39 = arguments;\n      return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n        while (1) switch (_context39.prev = _context39.next) {\n          case 0:\n            args = _args39.length > 1 && _args39[1] !== undefined ? _args39[1] : [];\n            resultModifier = _args39.length > 2 ? _args39[2] : undefined;\n            onError = _args39.length > 3 ? _args39[3] : undefined;\n            timeout = _args39.length > 4 ? _args39[4] : undefined;\n            _context39.next = 6;\n            return _this.awaitReady(eventName, timeout);\n          case 6:\n            _context39.t0 = _context39.sent;\n            if (_context39.t0) {\n              _context39.next = 9;\n              break;\n            }\n            _context39.t0 = {};\n          case 9:\n            eventMeta = _context39.t0;\n            customMessages = eventMeta.customMessages, _eventMeta$params = eventMeta.params, params = _eventMeta$params === void 0 ? [] : _eventMeta$params, _eventMeta$result = eventMeta.result, resultDef = _eventMeta$result === void 0 ? {} : _eventMeta$result;\n            callback = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(args.slice(-1)[0]) ? args.splice(-1)[0] : undefined;\n            len = params.length;\n            if (!(len > 0)) {\n              _context39.next = 23;\n              break;\n            }\n            cbIndex = params.findIndex(function (x) {\n              return x.type === _validator__WEBPACK_IMPORTED_MODULE_6__.TYPES["function"];\n            });\n            gotCb = cbIndex >= 0;\n            callbackIndex = gotCb ? cbIndex : callbackIndex;\n            callback = gotCb ? args[cbIndex] : callback;\n            // remove the callback index\n            _params = gotCb ? params.slice(0, -1) : params; // make sure correct number of arguments are supplied\n            args = _params.map(function (param, i) {\n              return args[i] !== undefined ? args[i] : param.defaultValue;\n            });\n            err = (0,_validator__WEBPACK_IMPORTED_MODULE_6__.validateObj)(args, _params, true, true, customMessages);\n            if (!err) {\n              _context39.next = 23;\n              break;\n            }\n            throw new Error(err);\n          case 23:\n            _ref40 = eventResultHandlers[eventName] || [], _ref41 = _slicedToArray(_ref40, 2), onSuccess = _ref41[0], onFail = _ref41[1];\n            resultPromise = _this._emitter(eventName, args, /*#__PURE__*/function () {\n              var _ref42 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(result) {\n                var _result;\n                return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n                  while (1) switch (_context38.prev = _context38.next) {\n                    case 0:\n                      // reconstruct Map from 2D array transported from server\n                      if (resultDef.type === \'map\') result = new Map(result || []);\n                      if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(resultModifier)) {\n                        _context38.next = 7;\n                        break;\n                      }\n                      _context38.next = 4;\n                      return resultModifier(result);\n                    case 4:\n                      _context38.t0 = _context38.sent;\n                      _context38.next = 8;\n                      break;\n                    case 7:\n                      _context38.t0 = result;\n                    case 8:\n                      result = _context38.t0;\n                      (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(callback) && callback(null, result);\n                      if (!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(onSuccess)) {\n                        _context38.next = 16;\n                        break;\n                      }\n                      _context38.next = 13;\n                      return onSuccess(result, args);\n                    case 13:\n                      _context38.t1 = _context38.sent;\n                      _context38.next = 17;\n                      break;\n                    case 16:\n                      _context38.t1 = undefined;\n                    case 17:\n                      _result = _context38.t1;\n                      return _context38.abrupt("return", _result !== undefined ? _result : result);\n                    case 19:\n                    case "end":\n                      return _context38.stop();\n                  }\n                }, _callee38);\n              }));\n              return function (_x62) {\n                return _ref42.apply(this, arguments);\n              };\n            }(), function (err) {\n              var translatedErr = translateError(err);\n              console.log(\'EmitError\', eventName, {\n                translatedErr: translatedErr,\n                err: err\n              });\n              (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(onError) && onError(translatedErr, err);\n              (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(callback) && callback(err);\n              (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isFn)(onFail) && onFail(err, args);\n              return translatedErr;\n            }, timeout, callbackIndex); // auto disconnect after pre-configured period of inactivity\n            if (autoDisconnectMs) {\n              wsPromise = resultPromise.promise || resultPromise; // if no timeout\n              wsPromise.catch(function () {}).finally(function () {\n                return _this.disconnectDeferred();\n              });\n            }\n            _context39.next = 28;\n            return resultPromise;\n          case 28:\n            return _context39.abrupt("return", _context39.sent);\n          case 29:\n          case "end":\n            return _context39.stop();\n        }\n      }, _callee39);\n    }));\n    return function (_x61) {\n      return _ref39.apply(this, arguments);\n    };\n  }();\n});\n\n// do event specific stuff after making a request.\n// key: eventName\n// value: [\n//    onSuccess, // args: result (any), eventArgs (array)\n//    onFail,    // args: error (string), eventArgs (array)\n// ]\nvar eventResultHandlers = {\n  login: [/*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n    var result,\n      _ref44,\n      address,\n      _ref44$roles,\n      roles,\n      isAdmin,\n      isSupport,\n      _args40 = arguments;\n    return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n      while (1) switch (_context40.prev = _context40.next) {\n        case 0:\n          result = _args40.length > 0 && _args40[0] !== undefined ? _args40[0] : {};\n          log(\'Logged in to messaging service\');\n          _ref44 = result || {}, address = _ref44.address, _ref44$roles = _ref44.roles, roles = _ref44$roles === void 0 ? [] : _ref44$roles;\n          isAdmin = roles.includes(ROLE_ADMIN);\n          isSupport = roles.includes(ROLE_SUPPORT);\n          rxIsLoggedIn.next(true);\n          rxUserIdentity.next(address);\n          rxIsAdmin.next(isAdmin);\n          rxIsSupport.next(isSupport);\n          // store/update user roles etc data sent from server\n          setUser(_objectSpread(_objectSpread({}, getUser()), (0,_utils__WEBPACK_IMPORTED_MODULE_5__.objWithoutKeys)(result, [\'id\', \'secret\'])));\n          return _context40.abrupt("return", result);\n        case 11:\n        case "end":\n          return _context40.stop();\n      }\n    }, _callee40);\n  })), function (err) {\n    rxIsLoggedIn.next(false);\n    consolelog(\'Login failed\', err);\n  }],\n  notify: [function (result) {\n    console.log(\'Notify result\', result);\n  }, function (translatedErr, err) {\n    console.log(\'Nofify err\', {\n      translatedErr: translatedErr,\n      err: err\n    });\n  }],\n  register: [function (_) {\n    var _ref45 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [],\n      _ref46 = _slicedToArray(_ref45, 3),\n      id = _ref46[0],\n      secret = _ref46[1],\n      address = _ref46[2];\n    setUser({\n      id: id,\n      secret: secret\n    });\n    rxIsLoggedIn.next(true);\n    rxUserIdentity.next(address);\n    rxIsRegistered.next(true);\n  }]\n};\n\n/**\n * @name    getClient\n * @summary Returns a singleton instance of the websocket client.\n * Instantiates the client if not already done.\n * \n * @description when in dev mode with self-signed certificate, if socket connection fails with "ERR_CERT_AUTHORITY_INVALID", simply open the socket url in the browser by replacing "wss" with "https" and click "proceed" to add the certificate.\n * \n * @param   {String|Boolean} url                if Boolean, true => use staging & falsy => use prod\n * @param   {Number}         disconnectDelayMs (optional) duration in milliseconds to auto-disconnect from \n *                                             webwsocket after period of inactivity.\n *              \n *                                             Default: `300000` (or `process.env.MESSAGING_SERVER_DISCONNECT_DELAY_MS`)\n *\n * @returns {ChatClient}\n */\nvar getClient = function getClient(url, disconnectDelayMs) {\n  if (instance) return instance;\n  instance = new ChatClient(url, disconnectDelayMs);\n  instance = getSafeClient(instance);\n  var triggerChange = function triggerChange(rx, newValue) {\n    return rx.value !== newValue && rx.next(newValue);\n  };\n  instance.on(eventEventsMeta, function (em) {\n    return generateEventHandlers(instance, em);\n  });\n  instance.onConnect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n    var active, _ref48, id, _ref48$roles, roles, secret, isAdmin;\n    return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n      while (1) switch (_context41.prev = _context41.next) {\n        case 0:\n          rxIsConnected.next(true);\n          _context41.next = 3;\n          return instance.maintenanceMode();\n        case 3:\n          active = _context41.sent;\n          triggerChange(rxIsInMaintenanceMode, active);\n          if (rxIsRegistered.value) {\n            _context41.next = 7;\n            break;\n          }\n          return _context41.abrupt("return");\n        case 7:\n          _ref48 = getUser() || {}, id = _ref48.id, _ref48$roles = _ref48.roles, roles = _ref48$roles === void 0 ? [] : _ref48$roles, secret = _ref48.secret;\n          isAdmin = roles.includes(ROLE_ADMIN); // wait until until maintenance mdoe is disabled and then attempt to login\n          _context41.t0 = !isAdmin;\n          if (!_context41.t0) {\n            _context41.next = 13;\n            break;\n          }\n          _context41.next = 13;\n          return (0,_rx__WEBPACK_IMPORTED_MODULE_3__.subjectAsPromise)(rxIsInMaintenanceMode, false)[0];\n        case 13:\n          // auto login on connect to messaging service\n          instance.login(id, secret).catch(function () {});\n        case 14:\n        case "end":\n          return _context41.stop();\n      }\n    }, _callee41);\n  })));\n  instance.on(\'disconnect\', function () {\n    log(\'disconnected\');\n    triggerChange(rxIsConnected, false);\n    triggerChange(rxIsLoggedIn, false);\n  });\n  instance.onConnectError(function (error) {\n    // log(\'connectError\', error)\n    triggerChange(rxIsConnected, false);\n    triggerChange(rxIsLoggedIn, false);\n  });\n  instance.on(eventMaintenanceMode, function (active) {\n    log("Maintenance mode ".concat(active ? \'\' : \'de\', "activated"));\n    triggerChange(rxIsInMaintenanceMode, active);\n  });\n  instance.onFaucetStatus(function (enabled) {\n    log("Faucet ".concat(enabled ? \'enabled\' : \'disabled\'));\n    triggerChange(rxFaucetEnabled, enabled, \'chatClient:faucet\');\n  });\n  return instance;\n};\n\n/**\n * @name    getSafeClient\n * @summary turns an unsafe ChatClient fail-safe.\n * This is done by dynamically generating emitable and listenable event handlers.\n * This will ensure that even when events metadata failed to receive due to being offline or some other reason\n * by making sure events emitted or listend to will:\n * \n * 1. prevent error when invoking functions on non-existent ChatClient properties\n * 2. ensure events metadata is fetched and event params are pre-validated (when emitting).\n * 3. Websocket to messaging service is connected\n * 4. wait until user is logged in, where required\n * 5. wait until maintenance mode is deactivated (if `maintenanceMode = false` in metadata) and prevents failed request.\n * \n * @param   {ChatClient} chatClient ChatClient instance\n * \n * @returns {ChatClient} safe chat client with Proxy\n */\nvar getSafeClient = function getSafeClient(chatClient) {\n  return new Proxy(chatClient, {\n    get: function get(chatClient, key) {\n      if (chatClient.hasOwnProperty(key)) return chatClient[key];\n      var isListenable = /^on[A-Z]+/.test(key);\n      var eventName = (!isListenable ? key : key.substr(2)).replaceAll(/[A-Z]/g, function (char, i) {\n        return (i > 0 ? \'-\' : \'\') + char.toLowerCase();\n      });\n      return isListenable ? function (cb, once) {\n        return chatClient.on(eventName, cb, once);\n      } : function () {\n        for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {\n          args[_key35] = arguments[_key35];\n        }\n        return chatClient.emit(eventName, args);\n      };\n    }\n  });\n};\n\n/**\n * @name    getUser\n * @summary Retrieves user credentails from local storage\n * \n * @returns {Object} user\n */\nfunction getUser() {\n  return rw().user;\n}\nvar generateEventHandlers = function generateEventHandlers(chatClient) {\n  var eventsMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  chatClient.rxEventsMeta.next(eventsMeta);\n  var _eventsMeta$emittable = eventsMeta.emittables,\n    emittables = _eventsMeta$emittable === void 0 ? {} : _eventsMeta$emittable,\n    _eventsMeta$listenabl = eventsMeta.listenables,\n    listenables = _eventsMeta$listenabl === void 0 ? {} : _eventsMeta$listenabl;\n  chatClient.query = {};\n  var eventName2VarName = function eventName2VarName(eventName) {\n    var arr = eventName.split(\'-\');\n    return arr[0] + (0,_utils__WEBPACK_IMPORTED_MODULE_5__.textCapitalize)(_toConsumableArray(arr.slice(1))).join(\'\');\n  };\n  var getStrFunc = function getStrFunc(name, paramNames, body) {\n    return "(function ".concat(name, "(").concat(paramNames, ") {\\n    ").concat(body, "\\n})");\n  };\n  Object.keys(emittables).forEach(function (eventName) {\n    var _name;\n    var eventMeta = emittables[eventName] || {};\n    var name = eventMeta.name,\n      params = eventMeta.params;\n    if (!eventName || !(0,_utils__WEBPACK_IMPORTED_MODULE_5__.isArr)(params)) return;\n    (_name = name) !== null && _name !== void 0 ? _name : name = eventName2VarName(eventName);\n    var suffix = \', resultModifier, onError, timeout\';\n    var dupCheck = {};\n    var paramNames = [];\n    var funcParams = params.map(function (p, i) {\n      var _ref49 = p || {},\n        defaultValue = _ref49.defaultValue,\n        label = _ref49.label,\n        name = _ref49.name;\n      name = name || label;\n      // make sure there\'s no duplicate name in the function arguments\n      if (!name || dupCheck[name]) name = "param".concat(i);\n      dupCheck[name] = true;\n      paramNames.push(name);\n      if (defaultValue === undefined) return name;\n      return "".concat(name, " = ").concat(defaultValue);\n    });\n    funcParams = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.arrUnique)(funcParams).join(\', \') + suffix; // + `= ${timeout}`\n    paramNames = "[".concat(paramNames.join(\', \'), "]").concat(suffix);\n    var emitHandler = eval(\n    // `(function ${name}(${funcParams}) {\\nreturn instance.emit("${eventName}", ${paramNames})\\n})`\n    getStrFunc(name, funcParams, "return instance.emit(\\"".concat(eventName, "\\", ").concat(paramNames, ")")));\n    // add meta data\n    eventMeta.eventName = eventName;\n    emitHandler.meta = eventMeta;\n    chatClient.query[name] = emitHandler;\n    chatClient[name] = emitHandler;\n  });\n  Object.keys(listenables).forEach(function (eventName) {\n    var _meta$name;\n    var meta = listenables[eventName] || {};\n    meta.eventName = eventName;\n    (_meta$name = meta.name) !== null && _meta$name !== void 0 ? _meta$name : meta.name = eventName2VarName(\'on-\' + eventName);\n    var name = meta.name;\n    var handler = eval(\n    // `(function ${name}(callback, once) {\\nreturn instance.on("${eventName}", callback, once)\\n})`\n    getStrFunc(name, \'callback, once\', "return instance.on(\\"".concat(eventName, "\\", callback, once)")));\n    handler.meta = meta;\n    chatClient[name] = handler;\n    chatClient.on[name] = handler;\n  });\n  window.query = chatClient.query;\n  window.listen = chatClient.on;\n  window.listenables = listenables;\n  window.emittables = emittables;\n  console.log({\n    emittables: emittables,\n    query: query,\n    listenables: listenables,\n    listen: listen\n  });\n};\nvar log = function log() {\n  var _console;\n  for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {\n    args[_key36] = arguments[_key36];\n  }\n  return (_console = console).log.apply(_console, [new Date().toLocaleTimeString(), \'ChatClient:\'].concat(args));\n};\n\n/**\n * @name    referralCode\n * @summary get/set referral code to LocalStorage\n * \n * @param   {String|null} code referral code. Use `null` to remove from storage\n * \n * @returns {String} referral code\n */\nvar referralCode = function referralCode(code) {\n  var override = code === null;\n  var value = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isStr)(code) ? {\n    referralCode: code\n  } : override\n  // completely remove referral code property from storage\n  ? (0,_utils__WEBPACK_IMPORTED_MODULE_5__.objWithoutKeys)(rw(), [\'referralCode\']) : undefined;\n  return (_storageHelper__WEBPACK_IMPORTED_MODULE_4__["default"].settings.module(MODULE_KEY, value, override) || {}).referralCode;\n};\n\n/**\n * @name    setUser\n * @summary saves user credentails from local storage\n * \n * @param   {Object}    user\n * \n * @returns {Object} user\n */\nvar setUser = function setUser() {\n  var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return rw({\n    user: user\n  });\n};\n\n/**\n * @name    translateError\n * @summary translate error messages returned from messaging\n * \n * @param {Function} cb \n */\nvar translateError = function translateError(err) {\n  // if no error return as is\n  if (!err) return err;\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_5__.isObj)(err)) {\n    var keys = Object.keys(err);\n    // no errors\n    if (keys.length === 0) return null;\n    return keys.forEach(function (key) {\n      return err[key] = translateError(err[key]);\n    });\n  }\n\n  // translate if there is any error message\n  var inputNameSeperator = \' => \';\n  var infoSeperator = \': \';\n  err = (0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(err.split(inputNameSeperator))[0].join(inputNameSeperator);\n  err = !err.includes(infoSeperator) ? err : (0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(err.split(infoSeperator))[0].join(infoSeperator);\n  return err;\n  // let inputName = \'\'\n  // let message = err\n  // let suffix = \'\'\n  // let arr = err.split(inputNameSeperator)\n  // if (arr.length > 1) {\n  //     inputName = arr[0]\n  //     message = arr[1]\n  // }\n  // arr = message.split(infoSeperator)\n  // if (arr.length > 1) {\n  //     message = arr[0]\n  //     suffix = arr[1]\n  // }\n  // const texts = translated({\n  //     inputName,\n  //     message,\n  //     suffix,\n  // }, true)[1]\n\n  // return [\n  //     texts.inputName,\n  //     texts.inputName && inputNameSeperator,\n  //     texts.message,\n  //     texts.suffix && infoSeperator,\n  //     texts.suffix\n  // ]\n  //     .filter(Boolean)\n  //     .join(\'\')\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getClient());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/chatClient.js\n')},"./src/utils/checkDevice.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEVICE_TYPE\": () => (/* binding */ DEVICE_TYPE),\n/* harmony export */   \"MOBILE_REGEX\": () => (/* binding */ MOBILE_REGEX),\n/* harmony export */   \"TABLET_REGEX\": () => (/* binding */ TABLET_REGEX),\n/* harmony export */   \"checkDevice\": () => (/* binding */ checkDevice),\n/* harmony export */   \"checkSafari\": () => (/* binding */ checkSafari),\n/* harmony export */   \"getDeviceType\": () => (/* binding */ getDeviceType)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/utils/utils.js\");\n\nvar DEVICE_TYPE = {\n  desktop: 'desktop',\n  mobile: 'mobile',\n  nodejs: 'nodejs',\n  tablet: 'tablet'\n};\n\n// Source https://attacomsian.com/blog/javascript-detect-mobile-device\nvar MOBILE_REGEX = /Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/;\nvar TABLET_REGEX = /(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i;\n\n/**\n * @name    checkDevice\n * @summary check if device is of specific type\n * \n * @param   {String|Array} type   Valid types: desktop, mobile, table or nodejs\n * \n * @returns {Boolean}\n */\nvar checkDevice = function checkDevice(type) {\n  return ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(type) ? type : [type]).includes(getDeviceType());\n};\n\n/**\n * @name    checkSafari\n * @summary check if browser is Apple Safari \n * \n * @param   {Boolean}   desktop check Safari desktop\n *                      Default: `false`\n * \n * @returns {Boolean}\n */\nvar checkSafari = function checkSafari() {\n  var desktop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _ref = navigator || {},\n    _ref$vendor = _ref.vendor,\n    vendor = _ref$vendor === void 0 ? '' : _ref$vendor,\n    _ref$userAgent = _ref.userAgent,\n    userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;\n  var isSafari = vendor.indexOf('Apple') > -1 && userAgent.indexOf('CriOS') == -1 && userAgent.indexOf('FxiOS') == -1;\n  return !desktop ? isSafari : isSafari && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(window.safari);\n};\n\n/**\n * @name    getDeviceType\n * @summary get the type of the device\n * \n * @returns {String} Device type. One of the following: desktop, mobile, table or nodejs\n */\nvar getDeviceType = function getDeviceType() {\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNodeJS)()) return DEVICE_TYPE.nodejs;\n  var _navigator = navigator,\n    userAgent = _navigator.userAgent;\n  if (TABLET_REGEX.test(userAgent)) return DEVICE_TYPE.tablet;\n  if (MOBILE_REGEX.test(userAgent)) return DEVICE_TYPE.mobile;\n  return DEVICE_TYPE.desktop;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvY2hlY2tEZXZpY2UuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFnRDtBQUV6QyxJQUFNRyxXQUFXLEdBQUc7RUFDdkJDLE9BQU8sRUFBRSxTQUFTO0VBQ2xCQyxNQUFNLEVBQUUsUUFBUTtFQUNoQkMsTUFBTSxFQUFFLFFBQVE7RUFDaEJDLE1BQU0sRUFBRTtBQUNaLENBQUM7O0FBRUQ7QUFDTyxJQUFNQyxZQUFZLEdBQUcscUdBQXFHO0FBQzFILElBQU1DLFlBQVksR0FBRyxrREFBa0Q7O0FBRzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBR0MsSUFBSTtFQUFBLE9BQUksQ0FBQ1gsNkNBQUssQ0FBQ1csSUFBSSxDQUFDLEdBQUdBLElBQUksR0FBRyxDQUFDQSxJQUFJLENBQUMsRUFBRUMsUUFBUSxDQUFDQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQUE7O0FBRTFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQXdCO0VBQUEsSUFBcEJWLE9BQU8sR0FBQVcsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsS0FBSztFQUN2QyxJQUFBRyxJQUFBLEdBQXdDQyxTQUFTLElBQUksQ0FBQyxDQUFDO0lBQUFDLFdBQUEsR0FBQUYsSUFBQSxDQUEvQ0csTUFBTTtJQUFOQSxNQUFNLEdBQUFELFdBQUEsY0FBRyxFQUFFLEdBQUFBLFdBQUE7SUFBQUUsY0FBQSxHQUFBSixJQUFBLENBQUVLLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxjQUFBLGNBQUcsRUFBRSxHQUFBQSxjQUFBO0VBQ25DLElBQU1FLFFBQVEsR0FBR0gsTUFBTSxDQUFDSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQ3RDRixTQUFTLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFDaENGLFNBQVMsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUV2QyxPQUFPLENBQUNyQixPQUFPLEdBQ1RvQixRQUFRLEdBQ1JBLFFBQVEsSUFBSXRCLDZDQUFLLENBQUN3QixNQUFNLENBQUNDLE1BQU0sQ0FBQztBQUMxQyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1kLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBQSxFQUFTO0VBQy9CLElBQUlaLGdEQUFRLENBQUMsQ0FBQyxFQUFFLE9BQU9FLFdBQVcsQ0FBQ0csTUFBTTtFQUV6QyxJQUFBc0IsVUFBQSxHQUFzQlQsU0FBUztJQUF2QkksU0FBUyxHQUFBSyxVQUFBLENBQVRMLFNBQVM7RUFDakIsSUFBSWQsWUFBWSxDQUFDb0IsSUFBSSxDQUFDTixTQUFTLENBQUMsRUFBRSxPQUFPcEIsV0FBVyxDQUFDSSxNQUFNO0VBRTNELElBQUlDLFlBQVksQ0FBQ3FCLElBQUksQ0FBQ04sU0FBUyxDQUFDLEVBQUUsT0FBT3BCLFdBQVcsQ0FBQ0UsTUFBTTtFQUUzRCxPQUFPRixXQUFXLENBQUNDLE9BQU87QUFDOUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvY2hlY2tEZXZpY2UuanM/OWVjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FyciwgaXNOb2RlSlMsIGlzT2JqIH0gZnJvbSAnLi91dGlscydcblxuZXhwb3J0IGNvbnN0IERFVklDRV9UWVBFID0ge1xuICAgIGRlc2t0b3A6ICdkZXNrdG9wJyxcbiAgICBtb2JpbGU6ICdtb2JpbGUnLFxuICAgIG5vZGVqczogJ25vZGVqcycsXG4gICAgdGFibGV0OiAndGFibGV0Jyxcbn1cblxuLy8gU291cmNlIGh0dHBzOi8vYXR0YWNvbXNpYW4uY29tL2Jsb2cvamF2YXNjcmlwdC1kZXRlY3QtbW9iaWxlLWRldmljZVxuZXhwb3J0IGNvbnN0IE1PQklMRV9SRUdFWCA9IC9Nb2JpbGV8QW5kcm9pZHxpUChob25lfG9kKXxJRU1vYmlsZXxCbGFja0JlcnJ5fEtpbmRsZXxTaWxrLUFjY2VsZXJhdGVkfChocHd8d2ViKU9TfE9wZXJhIE0ob2JpfGluaSkvXG5leHBvcnQgY29uc3QgVEFCTEVUX1JFR0VYID0gLyh0YWJsZXR8aXBhZHxwbGF5Ym9va3xzaWxrKXwoYW5kcm9pZCg/IS4qbW9iaSkpL2lcblxuXG4vKipcbiAqIEBuYW1lICAgIGNoZWNrRGV2aWNlXG4gKiBAc3VtbWFyeSBjaGVjayBpZiBkZXZpY2UgaXMgb2Ygc3BlY2lmaWMgdHlwZVxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfEFycmF5fSB0eXBlICAgVmFsaWQgdHlwZXM6IGRlc2t0b3AsIG1vYmlsZSwgdGFibGUgb3Igbm9kZWpzXG4gKiBcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5leHBvcnQgY29uc3QgY2hlY2tEZXZpY2UgPSB0eXBlID0+IChpc0Fycih0eXBlKSA/IHR5cGUgOiBbdHlwZV0pLmluY2x1ZGVzKGdldERldmljZVR5cGUoKSlcblxuLyoqXG4gKiBAbmFtZSAgICBjaGVja1NhZmFyaVxuICogQHN1bW1hcnkgY2hlY2sgaWYgYnJvd3NlciBpcyBBcHBsZSBTYWZhcmkgXG4gKiBcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgIGRlc2t0b3AgY2hlY2sgU2FmYXJpIGRlc2t0b3BcbiAqICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IGBmYWxzZWBcbiAqIFxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja1NhZmFyaSA9IChkZXNrdG9wID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7IHZlbmRvciA9ICcnLCB1c2VyQWdlbnQgPSAnJyB9ID0gbmF2aWdhdG9yIHx8IHt9XG4gICAgY29uc3QgaXNTYWZhcmkgPSB2ZW5kb3IuaW5kZXhPZignQXBwbGUnKSA+IC0xXG4gICAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09IC0xXG4gICAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdGeGlPUycpID09IC0xXG5cbiAgICByZXR1cm4gIWRlc2t0b3BcbiAgICAgICAgPyBpc1NhZmFyaVxuICAgICAgICA6IGlzU2FmYXJpICYmIGlzT2JqKHdpbmRvdy5zYWZhcmkpXG59XG5cbi8qKlxuICogQG5hbWUgICAgZ2V0RGV2aWNlVHlwZVxuICogQHN1bW1hcnkgZ2V0IHRoZSB0eXBlIG9mIHRoZSBkZXZpY2VcbiAqIFxuICogQHJldHVybnMge1N0cmluZ30gRGV2aWNlIHR5cGUuIE9uZSBvZiB0aGUgZm9sbG93aW5nOiBkZXNrdG9wLCBtb2JpbGUsIHRhYmxlIG9yIG5vZGVqc1xuICovXG5leHBvcnQgY29uc3QgZ2V0RGV2aWNlVHlwZSA9ICgpID0+IHtcbiAgICBpZiAoaXNOb2RlSlMoKSkgcmV0dXJuIERFVklDRV9UWVBFLm5vZGVqc1xuXG4gICAgY29uc3QgeyB1c2VyQWdlbnQgfSA9IG5hdmlnYXRvclxuICAgIGlmIChUQUJMRVRfUkVHRVgudGVzdCh1c2VyQWdlbnQpKSByZXR1cm4gREVWSUNFX1RZUEUudGFibGV0XG5cbiAgICBpZiAoTU9CSUxFX1JFR0VYLnRlc3QodXNlckFnZW50KSkgcmV0dXJuIERFVklDRV9UWVBFLm1vYmlsZVxuXG4gICAgcmV0dXJuIERFVklDRV9UWVBFLmRlc2t0b3Bcbn1cbiJdLCJuYW1lcyI6WyJpc0FyciIsImlzTm9kZUpTIiwiaXNPYmoiLCJERVZJQ0VfVFlQRSIsImRlc2t0b3AiLCJtb2JpbGUiLCJub2RlanMiLCJ0YWJsZXQiLCJNT0JJTEVfUkVHRVgiLCJUQUJMRVRfUkVHRVgiLCJjaGVja0RldmljZSIsInR5cGUiLCJpbmNsdWRlcyIsImdldERldmljZVR5cGUiLCJjaGVja1NhZmFyaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9yZWYiLCJuYXZpZ2F0b3IiLCJfcmVmJHZlbmRvciIsInZlbmRvciIsIl9yZWYkdXNlckFnZW50IiwidXNlckFnZW50IiwiaXNTYWZhcmkiLCJpbmRleE9mIiwid2luZG93Iiwic2FmYXJpIiwiX25hdmlnYXRvciIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/checkDevice.js\n")},"./src/utils/convert.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "addressToStr": () => (/* binding */ addressToStr),\n/* harmony export */   "bytesToHex": () => (/* binding */ bytesToHex),\n/* harmony export */   "csvToArr": () => (/* binding */ csvToArr),\n/* harmony export */   "csvToMap": () => (/* binding */ csvToMap),\n/* harmony export */   "decodeUTF8": () => (/* binding */ decodeUTF8),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "encodeUTF8": () => (/* binding */ encodeUTF8),\n/* harmony export */   "hexToBytes": () => (/* binding */ hexToBytes),\n/* harmony export */   "hexToStr": () => (/* binding */ hexToStr),\n/* harmony export */   "ss58Decode": () => (/* binding */ ss58Decode),\n/* harmony export */   "ss58Encode": () => (/* binding */ ss58Encode),\n/* harmony export */   "strToHex": () => (/* binding */ strToHex),\n/* harmony export */   "strToU8a": () => (/* binding */ strToU8a),\n/* harmony export */   "u8aToStr": () => (/* binding */ u8aToStr)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n\n/*\n * List of optional node-modules and the functions used by them:\n * Module Name          : Function Name\n * ---------------------------\n * @polkadot/util       : bytesToHex, hexToBytes, strToU8a, u8aToStr\n * @polkadot/util-crypto: ss58Decode, ss58Encode\n*/\n\nvar decodeUTF8 = strToU8a; // ToDo: deprecate\nvar encodeUTF8 = u8aToStr; // ToDo: deprecate\n\n/**\n * @name    addressToStr\n * @summary Converts to address bytes to string\n * \n * @param   {String|Uint8Array} address \n * \n * @returns {String}    If invalid address returns empty string.\n */\nvar addressToStr = function addressToStr(address, ignoreChecksum, ss58Format) {\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(ss58Encode, [address, ss58Format], \'\');\n};\n\n/**\n * @name    bytesToHex\n * \n * @param {Uint32List} bytes \n * \n * @returns {String}\n */\nvar bytesToHex = function bytesToHex(bytes) {\n  // no need to convert\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isHex)(bytes)) return bytes;\n  var _require = __webpack_require__("./node_modules/@polkadot/util/index.js"),\n    u8aToHex = _require.u8aToHex;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(u8aToHex, [bytes]);\n};\n\n/**\n * @name    csvToArrr\n * @summary Convert CSV/TSV (Comma/Tab Seprated Value) string to Array\n *  \n * @param   {String} str \n * @param   {Array}  columnTitles (optional) \n *                      if null, indicates no column title to be used\n *                      if undefined, will use first line as column title \n * @param   {String} separator line text separator \n * \n * @returns {Map} exactly the same number of items as the number of columns.\n *                      Each item will be an array consisting of all column cells.\n *                      If `columnTitles` not supplied, first cell of each column will be used as key \n *                      and be excluded from item value array.\n */\nvar csvToArr = function csvToArr(str, columnTitles) {\n  var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \',\';\n  var lines = str.split(\'\\n\').map(function (line) {\n    return line.replace(\'\\r\', \'\');\n  });\n  var ignoreFirst = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(columnTitles) || columnTitles.length === 0;\n  var keys = !ignoreFirst ? columnTitles : (lines[0] || \'\').split(separator);\n  return lines.slice(ignoreFirst ? 1 : 0).map(function (line) {\n    var cells = line.split(separator);\n    // ignore empty line\n    if (cells.join(\'\').trim() === \'\') return;\n    // convert array to object with column titles as respective keys\n    return cells.reduce(function (obj, str, i) {\n      obj[keys[i]] = str;\n      return obj;\n    }, {});\n  }).filter(Boolean);\n};\n\n/**\n * @name    csvToMap\n * @summary Convert CSV/TSV (Comma/Tab Seprated Value) string to Map\n *  \n * @param   {String} str \n * @param   {Array}  columnTitles (optional) \n *                      if null, indicates no column title to be used\n *                      if undefined, will use first line as column title \n * @param   {String} separator line text separator \n * \n * @returns {Map} exactly the same number of items as the number of columns.\n *                      Each item will be an array consisting of all column cells.\n *                      If `columnTitles` not supplied, first cell of each column will be used as key \n *                      and be excluded from item value array.\n */\nvar csvToMap = function csvToMap(str, columnTitles) {\n  var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \',\';\n  var result = new Map();\n  var lines = str.split(\'\\n\').map(function (line) {\n    return line.replace(\'\\r\', \'\');\n  });\n  var ignoreFirst = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(columnTitles) || columnTitles.length === 0;\n  var titles = !ignoreFirst ? columnTitles : lines[0].split(separator);\n  lines.slice(ignoreFirst ? 1 : 0).forEach(function (line) {\n    var cells = line.split(separator);\n    // ignore empty line\n    if (cells.join(\'\').trim() === \'\') return;\n    cells.forEach(function (text, i) {\n      if (!titles[i]) return;\n      var columnTexts = result.get(titles[i]) || [];\n      columnTexts.push(text);\n      result.set(titles[i], columnTexts);\n    });\n  });\n  return result;\n};\n\n/**\n * @name    hexToBytes\n * @summary convert hex string to bytes array\n * \n * @param   {String} hex \n * @param   {Number} bitLength \n * \n * @returns {Uint8Array}\n */\nvar hexToBytes = function hexToBytes(hex, bitLength) {\n  // no need to convert\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUint8Arr)(hex)) return hex;\n  var _require2 = __webpack_require__("./node_modules/@polkadot/util/index.js"),\n    hexToU8a = _require2.hexToU8a;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(hexToU8a, [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(hex) && !hex.startsWith(\'0x\') ? \'0x\' + hex : hex, bitLength]);\n};\n\n/**\n * @name    hexToStr\n * \n * @param   {String} hex \n * \n * @returns {String}\n */\nvar hexToStr = function hexToStr(hex) {\n  if (!"".concat(hex).startsWith(\'0x\')) hex = "0x".concat(hex);\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isHex)(hex)) return \'\';\n  var _require3 = __webpack_require__("./node_modules/@polkadot/util/index.js"),\n    hexToString = _require3.hexToString;\n  return hexToString(hex);\n};\n\n/**\n * @name    ss58Encode\n * @summary convert identity/address from bytes to string\n * \n * @param   {Uint8Array} address \n * @param   {Number}     ss58Format (optional) use to generate address for any supported parachain identity.\n *                                  Default: undefined\n * \n * @returns {String}     null if invalid address supplied\n */\nvar ss58Encode = function ss58Encode(address, ss58Format) {\n  var _require4 = __webpack_require__("./node_modules/@polkadot/util-crypto/index.js"),\n    encodeAddress = _require4.encodeAddress;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(encodeAddress, [address, ss58Format]);\n};\n\n/**\n * @name    ss58Decode\n * @summary convert identity/address from string to bytes\n * \n * @param {String} address\n * \n * @returns {Uint8Array}    null if invalid address supplied\n */\nvar ss58Decode = function ss58Decode(address, ignoreChecksum, ss58Format) {\n  var _require5 = __webpack_require__("./node_modules/@polkadot/util-crypto/index.js"),\n    decodeAddress = _require5.decodeAddress;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(decodeAddress, [address, ignoreChecksum, ss58Format]);\n};\n\n/**\n * @name    strToHex\n * @summary converts string to hexadecimal string\n * \n * @param   {String} str \n * \n * @returns {String}\n */\nvar strToHex = function strToHex(str) {\n  var _require6 = __webpack_require__("./node_modules/@polkadot/util/index.js"),\n    stringToHex = _require6.stringToHex;\n  return stringToHex("".concat(str));\n};\n\n/**\n * @name    strToU8a\n * @summary converts any input Uint8Array\n * \n * @param   {*} value any non-string value will be stringified.\n *                    Objects and Arrays will be stringified using `JSON.stringify(value)`.\n *                    Any Map or Set will be converted to Array first using `Array.from(value)`.\n */\nvar strToU8a = function strToU8a(value) {\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isUint8Arr)(value)) return value;\n  var _require7 = __webpack_require__("./node_modules/@polkadot/util/index.js"),\n    stringToU8a = _require7.stringToU8a;\n  var str = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArrLike)(value) ? JSON.stringify(Array.from(value)) : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(value) ? JSON.stringify(value) : "".concat(value);\n  return stringToU8a(str);\n};\n\n/**\n * @name    u8aToStr\n * \n * @param {Uint8Array} value \n * \n * @returns {String}\n */\nvar u8aToStr = function u8aToStr(value) {\n  var _require8 = __webpack_require__("./node_modules/@polkadot/util/index.js"),\n    u8aToString = _require8.u8aToString;\n  return u8aToString(value);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  addressToStr: addressToStr,\n  bytesToHex: bytesToHex,\n  csvToArr: csvToArr,\n  csvToMap: csvToMap,\n  decodeUTF8: decodeUTF8,\n  encodeUTF8: encodeUTF8,\n  hexToBytes: hexToBytes,\n  ss58Decode: ss58Decode,\n  ss58Encode: ss58Encode,\n  strToU8a: strToU8a,\n  u8aToStr: u8aToStr\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/convert.js\n')},"./src/utils/languageHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "APP_LANG": () => (/* binding */ APP_LANG),\n/* harmony export */   "BUILD_MODE": () => (/* binding */ BUILD_MODE),\n/* harmony export */   "MODULE_KEY": () => (/* binding */ MODULE_KEY),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "digitsTranslated": () => (/* binding */ digitsTranslated),\n/* harmony export */   "downloadTextListCSV": () => (/* binding */ downloadTextListCSV),\n/* harmony export */   "fetchNSaveTexts": () => (/* binding */ fetchNSaveTexts),\n/* harmony export */   "getSelected": () => (/* binding */ getSelected),\n/* harmony export */   "getTexts": () => (/* binding */ getTexts),\n/* harmony export */   "languages": () => (/* binding */ languages),\n/* harmony export */   "setSelected": () => (/* binding */ setSelected),\n/* harmony export */   "setTexts": () => (/* binding */ setTexts),\n/* harmony export */   "translated": () => (/* binding */ translated),\n/* harmony export */   "translations": () => (/* binding */ translations)\n/* harmony export */ });\n/* harmony import */ var _DataStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/DataStorage.js");\n/* harmony import */ var _utils_storageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/storageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\nvar translations = new _DataStorage__WEBPACK_IMPORTED_MODULE_0__["default"](\'totem_static_translations\');\n// language the app texts are written\nvar APP_LANG = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.fallbackIfFails)(function () {\n  return "EN";\n}) || \'EN\';\nvar MODULE_KEY = \'language\';\nvar rw = function rw(value) {\n  return _utils_storageHelper__WEBPACK_IMPORTED_MODULE_1__["default"].settings.module(MODULE_KEY, value) || {};\n};\nvar _selected = rw().selected || APP_LANG;\nvar _window = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.fallbackIfFails)(function () {\n  return window;\n}, [], {});\nvar BUILD_MODE = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isNodeJS)() ? "MISSING_ENV_VAR".BUILD_MODE : (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getUrlParam)(\'build-mode\', _window.location.href).toLowerCase() === \'true\' && _window.location.hostname !== \'totem.live\';\nvar languages = Object.freeze({\n  // AR: \'Arabic - عربي\',\n  BN: \'Bengali - বাংলা\',\n  DE: \'German - Deutsch\',\n  EN: \'English\',\n  ES: \'Spanish - Español\',\n  FR: \'French - Français\',\n  HI: \'Hindi - हिन्दी\',\n  ID: \'Indonesian - Bahasa Indonesia\',\n  IT: \'Italian - Italiano\',\n  JA: \'Japanese - 日本\',\n  KO: \'Korean - 한국인\',\n  NL: \'Dutch - Nederlandse Taal\',\n  PL: \'Polish - Polski\',\n  PT: \'Portuguese - Português\',\n  RU: \'Russian - Русский\',\n  TR: \'Turkish - Türkçe\',\n  UK: \'Ukrainian - українська\',\n  VI: \'Vietnamese - Tiếng Việt\',\n  ZH: \'Chinese - 中国人\'\n});\nvar digits = {\n  // AR: [\'٠\', \'١\', \'٢\', \'٣\', \'٤\', \'٥\', \'٦\', \'٧\', \'٨\', \'٩\'],\n  // BN: [\'০\', \'১\', \'২\', \'৩\', \'৪\', \'৫\', \'৬\', \'৭\', \'৮\', \'৯\'],\n  // HI: [\'०\', \'१\', \'२\', \'३\', \'४\', \'५\', \'६\', \'७\', \'८\', \'९\'],\n  // ZH: [\'〇\', \'一\', \'二\', \'三\', \'四\', \'五\', \'六\', \'七\', \'八\', \'九\'],\n};\nvar digitsTranslated = function digitsTranslated() {\n  var texts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var langCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSelected();\n  return !digits[langCode] ? texts : new Proxy(texts, {\n    get: function get(self, key) {\n      return "".concat(self[key]).replace(/[0-9]/g, function (n) {\n        return digits[langCode][n];\n      });\n    }\n  });\n};\n\n// downloadTextListCSV generates a CSV file with all the unique application texts\n// that can be used to translate by opening the file in Google Drive\n// NB: this function should not be used when BUILD_MODE is false (URL param \'build-mode\' not \'true\')\nvar downloadTextListCSV = !BUILD_MODE ? null : function () {\n  var seperator = \',\';\n  var langCodes = [APP_LANG].concat(_toConsumableArray(Object.keys(languages).filter(function (x) {\n    return x != APP_LANG;\n  })));\n  var rest = langCodes.slice(1);\n  var cols = \'abcdefghijklmnopqrstuvwxyz\'.repeat(5).toUpperCase().split(\'\');\n  var maxRows = _window.enList.length + 1;\n  // use batch functions so that translation request is only executed once.\n  // only the first data cell in each column needs this function.\n  // To avoid being rate limited, manuall set "=" when opening in Google Sheets\n  var getRowTranslateFunction = function getRowTranslateFunction(colName) {\n    return "BYROW(A2:INDEX(A:A, ".concat(maxRows, "), LAMBDA(x, GOOGLETRANSLATE(x, A1, ").concat(colName, "1)))");\n  };\n  //\n  // `=BYROW(A2:INDEX(A:A, MAX((A:A<>"")*ROW(A:A))), LAMBDA(x, GOOGLETRANSLATE(x, A1, ${colName}1)))`\n\n  var str = langCodes.join(seperator) + \'\\n\' + (_window.enList || []).map(function (x, i) {\n    // const rowNo = i + 2\n    // const functions = rest.map((_, c) => `"=GOOGLETRANSLATE($A${rowNo}, $A$1, ${cols[c + 1]}$1)"`).join(\',\')\n    var functions = i >= 1 ? langCodes.map(function (_) {\n      return \'\';\n    }) // empty cells\n    : rest.map(function (_, j) {\n      return "\\"".concat(getRowTranslateFunction(cols[j + 1]), "\\"");\n    });\n    return "\\"".concat((0,_utils__WEBPACK_IMPORTED_MODULE_2__.clearClutter)(x), "\\"").concat(seperator).concat(functions.join(seperator));\n  }).join(\',\\n\');\n  (0,_utils__WEBPACK_IMPORTED_MODULE_2__.downloadFile)(str, "English-texts-".concat(new Date().toISOString(), ".csv"), \'text/csv\');\n};\n\n/**\n * @name    fetchNSaveTexts\n * @summary retrieve and cache English and translated texts based on selected language\n * \n * @param   {Object}    client  Messaging server client\n * \n * @returns {Boolean}   true: data freshly updated. Falsy: using cache or update not required\n */\nvar fetchNSaveTexts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var client,\n      selected,\n      selectedHash,\n      engHash,\n      func,\n      _yield$Promise$all,\n      _yield$Promise$all2,\n      textsEn,\n      _yield$Promise$all2$,\n      texts,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          client = _args.length > 0 && _args[0] !== undefined ? _args[0] : (__webpack_require__("./src/utils/chatClient.js")["default"]);\n          if (client) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt("return", console.trace(\'ChatClient not specified\'));\n        case 3:\n          selected = getSelected();\n          if (!(selected === APP_LANG)) {\n            _context.next = 7;\n            break;\n          }\n          setTexts(selected, null, null);\n          return _context.abrupt("return");\n        case 7:\n          selectedHash = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.generateHash)(getTexts(selected) || \'\');\n          engHash = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.generateHash)(getTexts(APP_LANG) || \'\');\n          func = client.languageTranslations;\n          _context.next = 12;\n          return Promise.all([func(APP_LANG, engHash), APP_LANG === selected ? undefined : func(selected, selectedHash)]);\n        case 12:\n          _yield$Promise$all = _context.sent;\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n          textsEn = _yield$Promise$all2[0];\n          _yield$Promise$all2$ = _yield$Promise$all2[1];\n          texts = _yield$Promise$all2$ === void 0 ? textsEn : _yield$Promise$all2$;\n          if (!(!texts && !textsEn)) {\n            _context.next = 19;\n            break;\n          }\n          return _context.abrupt("return");\n        case 19:\n          console.log(\'Language text list updated\', {\n            selected: selected,\n            texts: texts,\n            textsEn: textsEn\n          });\n          // save only if update required\n          setTexts(selected, texts, textsEn);\n          // success\n          return _context.abrupt("return", true);\n        case 22:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function fetchNSaveTexts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// get selected language code\nvar getSelected = function getSelected() {\n  return _selected;\n};\nvar getTexts = function getTexts(langCode) {\n  return translations.get(langCode);\n};\n\n/**\n * @name    setSelected\n * @summary set selected language code and retrieve translated texts (if required and `client` is supplied)\n * \n * @param   {String}    selected \n * @param   {Object}    client      Messaging server client\n *\n * @returns {Array}\n */\nvar setSelected = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(selected, client) {\n    var _client;\n    var listUpdated;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          rw({\n            selected: selected\n          });\n          _selected = selected;\n          // retrieve translated texts from server\n          (_client = client) !== null && _client !== void 0 ? _client : client = (__webpack_require__("./src/utils/chatClient.js")["default"]);\n          _context2.next = 5;\n          return fetchNSaveTexts(client);\n        case 5:\n          listUpdated = _context2.sent;\n          return _context2.abrupt("return", listUpdated);\n        case 7:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function setSelected(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n// save translated list of texts retrieved from server\nvar setTexts = function setTexts(langCode, texts, enTexts) {\n  return translations.setAll(new Map(\n  // remove all language cache if selected is English\n  langCode === APP_LANG ? [] : [[APP_LANG, enTexts || translations.get(APP_LANG)], [langCode, texts || translations.get(langCode)]].filter(Boolean)), true);\n};\nvar Translated = /*#__PURE__*/function (_String) {\n  _inherits(Translated, _String);\n  var _super = _createSuper(Translated);\n  function Translated(text) {\n    _classCallCheck(this, Translated);\n    return _super.call(this, text);\n  }\n  _createClass(Translated, [{\n    key: "toLowerCase",\n    value: function toLowerCase() {\n      return "".concat(this).toLowerCase();\n    }\n  }]);\n  return Translated;\n}( /*#__PURE__*/_wrapNativeSuper(String));\n_window.Translated = Translated;\nvar translated = function translated() {\n  var texts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var capitalized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var fullSentence = arguments.length > 2 ? arguments[2] : undefined;\n  var forceLowercase = arguments.length > 3 ? arguments[3] : undefined;\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(texts)) {\n    var result = translated({\n      texts: texts\n    }, capitalized);\n    return result[capitalized ? 1 : 0].texts;\n  }\n\n  // gets rid of extra spacing etc.\n  Object.keys(texts).forEach(function (key) {\n    texts[key] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.clearClutter)(texts[key]);\n  });\n  var langCode = getSelected();\n  if (langCode !== APP_LANG || BUILD_MODE) {\n    var en = translations.get(APP_LANG) || [];\n    // list of selected language texts\n    var selected = translations.get(langCode) || [];\n    // attempt to build a single list of english texts for translation\n    if (BUILD_MODE) {\n      _window.enList = _window.enList || [];\n      Object.values(texts).forEach(function (text) {\n        if (!text) return;\n        // text = clearClutter(text)\n        enList.indexOf(text) === -1 && enList.push(text);\n      });\n      _window.enList = enList.sort();\n    }\n    Object.keys(texts).forEach(function (key) {\n      if (!texts[key]) return;\n      var text = texts[key];\n      var enIndex = en.indexOf(text);\n      var translatedText = selected[enIndex];\n      // fall back to original/English,\n      // if selected language is not supported \n      // or due to network error language data download failed\n      // or somehow supplied text wasn\'t translated\n      if (!translatedText) return;\n      texts[key] = translatedText;\n    });\n  } else {}\n  texts = digitsTranslated(texts, langCode);\n  if (capitalized) {\n    var textsNoCaps = _objectSpread({}, texts);\n    capitalized = digitsTranslated((0,_utils__WEBPACK_IMPORTED_MODULE_2__.textCapitalize)(texts, fullSentence, forceLowercase), langCode);\n    texts = textsNoCaps;\n  }\n  return [texts, capitalized];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  digitsTranslated: digitsTranslated,\n  translations: translations,\n  translated: translated,\n  setTexts: setTexts,\n  getSelected: getSelected,\n  setSelected: setSelected\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/languageHelper.js\n')},"./src/utils/log.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "debug": () => (/* binding */ debug),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "isDebug": () => (/* binding */ isDebug),\n/* harmony export */   "report": () => (/* binding */ report)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n\nfunction debug() {\n  if (!isDebug) return;\n  var logger = this || console.log;\n  logger.apply(void 0, arguments);\n}\nvar isDebug = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(function () {\n  return [\'YES\', \'TRUE\'].includes("".concat("MISSING_ENV_VAR".DEBUG || "MISSING_ENV_VAR".REACT_APP_DEBUG).toUpperCase());\n}) || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(function () {\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getUrlParam)(\'debug\') === \'true\';\n});\n\n// ToDo: add error reporting?\nvar report = function report() {\n  var _console;\n  return (_console = console).error.apply(_console, arguments);\n};\nconsole.errorDebug = debug.bind(console.error);\nconsole.infoDebug = debug.bind(console.info);\nconsole.logDebug = debug.bind(console.log);\nconsole.traceDebug = debug.bind(console.trace);\nconsole.warnDebug = debug.bind(console.warn);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  ifDebug: debug,\n  isDebug: isDebug,\n  report: report\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvbG9nLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNEO0FBRS9DLFNBQVNFLEtBQUtBLENBQUEsRUFBVTtFQUMzQixJQUFJLENBQUNDLE9BQU8sRUFBRTtFQUNkLElBQU1DLE1BQU0sR0FBRyxJQUFJLElBQUlDLE9BQU8sQ0FBQ0MsR0FBRztFQUNsQ0YsTUFBTSxDQUFBRyxLQUFBLFNBQUFDLFNBQVEsQ0FBQztBQUNuQjtBQUVPLElBQU1MLE9BQU8sR0FBR0gsdURBQWUsQ0FDbEM7RUFBQSxPQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDUyxRQUFRLENBQzFCLEdBQUFDLE1BQUEsQ0FBR0MsaUJBQVcsQ0FBQ0UsS0FBSyxJQUFJRixpQkFBVyxDQUFDRyxlQUFlLEVBQzlDQyxXQUFXLENBQUMsQ0FDckIsQ0FBQztBQUFBLENBQ0wsQ0FBQyxJQUFJZix1REFBZSxDQUFDO0VBQUEsT0FBTUMsbURBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxNQUFNO0FBQUEsRUFBQzs7QUFFM0Q7QUFDTyxJQUFNZSxNQUFNLEdBQUcsU0FBVEEsTUFBTUEsQ0FBQTtFQUFBLElBQUFDLFFBQUE7RUFBQSxPQUFnQixDQUFBQSxRQUFBLEdBQUFaLE9BQU8sRUFBQ2EsS0FBSyxDQUFBWCxLQUFBLENBQUFVLFFBQUEsRUFBQVQsU0FBUSxDQUFDO0FBQUE7QUFFekRILE9BQU8sQ0FBQ2MsVUFBVSxHQUFHakIsS0FBSyxDQUFDa0IsSUFBSSxDQUFDZixPQUFPLENBQUNhLEtBQUssQ0FBQztBQUM5Q2IsT0FBTyxDQUFDZ0IsU0FBUyxHQUFHbkIsS0FBSyxDQUFDa0IsSUFBSSxDQUFDZixPQUFPLENBQUNpQixJQUFJLENBQUM7QUFDNUNqQixPQUFPLENBQUNrQixRQUFRLEdBQUdyQixLQUFLLENBQUNrQixJQUFJLENBQUNmLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO0FBQzFDRCxPQUFPLENBQUNtQixVQUFVLEdBQUd0QixLQUFLLENBQUNrQixJQUFJLENBQUNmLE9BQU8sQ0FBQ29CLEtBQUssQ0FBQztBQUM5Q3BCLE9BQU8sQ0FBQ3FCLFNBQVMsR0FBR3hCLEtBQUssQ0FBQ2tCLElBQUksQ0FBQ2YsT0FBTyxDQUFDc0IsSUFBSSxDQUFDO0FBRTVDLGlFQUFlO0VBQ1hDLE9BQU8sRUFBRTFCLEtBQUs7RUFDZEMsT0FBTyxFQUFQQSxPQUFPO0VBQ1BhLE1BQU0sRUFBTkE7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9sb2cuanM/MzcxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmYWxsYmFja0lmRmFpbHMsIGdldFVybFBhcmFtIH0gZnJvbSAnLi91dGlscydcblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICBpZiAoIWlzRGVidWcpIHJldHVyblxuICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMgfHwgY29uc29sZS5sb2dcbiAgICBsb2dnZXIoLi4uYXJncylcbn1cblxuZXhwb3J0IGNvbnN0IGlzRGVidWcgPSBmYWxsYmFja0lmRmFpbHMoXG4gICAgKCkgPT4gWydZRVMnLCAnVFJVRSddLmluY2x1ZGVzKFxuICAgICAgICBgJHtwcm9jZXNzLmVudi5ERUJVRyB8fCBwcm9jZXNzLmVudi5SRUFDVF9BUFBfREVCVUd9YFxuICAgICAgICAgICAgLnRvVXBwZXJDYXNlKClcbiAgICApXG4pIHx8IGZhbGxiYWNrSWZGYWlscygoKSA9PiBnZXRVcmxQYXJhbSgnZGVidWcnKSA9PT0gJ3RydWUnKVxuXG4vLyBUb0RvOiBhZGQgZXJyb3IgcmVwb3J0aW5nP1xuZXhwb3J0IGNvbnN0IHJlcG9ydCA9ICguLi5hcmdzKSA9PiBjb25zb2xlLmVycm9yKC4uLmFyZ3MpXG5cbmNvbnNvbGUuZXJyb3JEZWJ1ZyA9IGRlYnVnLmJpbmQoY29uc29sZS5lcnJvcilcbmNvbnNvbGUuaW5mb0RlYnVnID0gZGVidWcuYmluZChjb25zb2xlLmluZm8pXG5jb25zb2xlLmxvZ0RlYnVnID0gZGVidWcuYmluZChjb25zb2xlLmxvZylcbmNvbnNvbGUudHJhY2VEZWJ1ZyA9IGRlYnVnLmJpbmQoY29uc29sZS50cmFjZSlcbmNvbnNvbGUud2FybkRlYnVnID0gZGVidWcuYmluZChjb25zb2xlLndhcm4pXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBpZkRlYnVnOiBkZWJ1ZyxcbiAgICBpc0RlYnVnLFxuICAgIHJlcG9ydCxcbn1cbiJdLCJuYW1lcyI6WyJmYWxsYmFja0lmRmFpbHMiLCJnZXRVcmxQYXJhbSIsImRlYnVnIiwiaXNEZWJ1ZyIsImxvZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsImFyZ3VtZW50cyIsImluY2x1ZGVzIiwiY29uY2F0IiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwiUkVBQ1RfQVBQX0RFQlVHIiwidG9VcHBlckNhc2UiLCJyZXBvcnQiLCJfY29uc29sZSIsImVycm9yIiwiZXJyb3JEZWJ1ZyIsImJpbmQiLCJpbmZvRGVidWciLCJpbmZvIiwibG9nRGVidWciLCJ0cmFjZURlYnVnIiwidHJhY2UiLCJ3YXJuRGVidWciLCJ3YXJuIiwiaWZEZWJ1ZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/log.js\n')},"./src/utils/naclHelper-to-be-deprecated.js":()=>{eval("// import { blake2b } from 'blakejs'\n// import {\n//     // secret key encryption\n//     naclDecrypt as naclDecrypt1,\n//     naclEncrypt as naclEncrypt1,\n//     naclKeypairFromString,\n//     naclKeypairFromSeed,\n//     naclKeypairFromSecret,\n//     // box encrypt\n//     naclBoxKeypairFromSecret,\n//     naclSeal,\n//     naclOpen,\n//     // singature\n//     naclSign,\n//     naclVerify,\n//     randomAsU8a,\n// } from '@polkadot/util-crypto'\n// import { generateHash, isArr, isHex, isMap, isObj, isUint8Arr, objCopy } from './utils'\n// import {\n//     bytesToHex,\n//     hexToBytes,\n//     ss58Encode,\n//     u8aToStr,\n//     strToU8a,\n// } from './convert'\n\n// /**\n//  * @name    decrypt\n//  * @summary decrypted a message encrypted using TweetNacl Box depryption (open) mechanism\n//  *\n//  * @param   {String|Uint8Array} sealed  data to encrypt\n//  * @param   {String|Uint8Array} nonce\n//  * @param   {String|Uint8Array} senderPublicKey\n//  * @param   {String|Uint8Array} recipientSecretKey\n//  * @param   {Boolean}\n//  *\n//  * @returns {String|Uint8Array} decrypted message\n//  */\n// export const decrypt = (sealed, nonce, senderPublicKey, recipientSecretKey, asString = true) => {\n//     const decrypted = naclOpen(\n//         hexToBytes(sealed),\n//         hexToBytes(nonce),\n//         hexToBytes(senderPublicKey),\n//         hexToBytes(recipientSecretKey),\n//     )\n//     if (!decrypted) return decrypted\n//     return !asString\n//         ? decrypted\n//         : u8aToStr(decrypted)\n// }\n\n// /**\n//  * @name    decryptObj\n//  * @summary recursively decrypt objects encrypted using `encryptObj()` function. \n//  * @description see see `encryptObj()` function documentation for examples\n//  * \n//  * @param   {Object}            obj         data object to decrypt\n//  * @param   {String|Uint8Array} senderPublicKey \n//  * @param   {String|Uint8Array} recipientSecretKey \n//  * @param   {Array}             keys        (optional) `obj` property names, to be decrypted. \n//  *                                          If valid array, unlisted properties will not be decrypted.\n//  *                                          g9i, will attempt to decrypt all properties.\n//  *                                          See examples for different usage cases.\n//  * @param   {Boolean}           asString    (optional) whether to convert result bytes to string.\n//  *                                          Default: true\n//  * \n//  * @returns {Object} decrypted object\n//  */\n// export const decryptObj = (obj, senderPublicKey, recipientSecretKey, keys, asString = true) => {\n//     if (!isObj(obj)) return\n\n//     const result = { ...obj }\n//     const isBox = !!senderPublicKey\n//     const open = isBox\n//         ? decrypt\n//         : secretBoxDecrypt\n//     const validKeys = !isArr(keys)\n//         // decrypt all properties\n//         ? Object.keys(result)\n//         // decrypt only specified properties\n//         : keys.filter(k => result.hasOwnProperty(k))\n\n//     for (let i = 0; i < validKeys.length; i++) {\n//         const key = validKeys[i]\n//         const value = result[key]\n//         if (!obj.hasOwnProperty(key)) continue\n\n//         // value is an object => recursively decrypt\n//         if (isObj(value)) {\n//             const childKeyPrefix = `${key}.`\n//             const childKeys = validKeys\n//                 .filter(k => k.startsWith(childKeyPrefix))\n//                 // get rid of prefix\n//                 .map(k => k.replace(new RegExp(childKeyPrefix), ''))\n\n//             result[key] = decryptObj(\n//                 value,\n//                 senderPublicKey,\n//                 recipientSecretKey,\n//                 childKeys.length > 0\n//                     ? childKeys // decrypt only specified child keys\n//                     : null,     // decrypt all child keys\n//                 asString,\n//             )\n//             continue\n//         }\n\n//         const bytes = hexToBytes(value)\n//         if (!bytes || bytes.length <= 24) throw new Error('Decryption failed')\n//         const args = [\n//             new Uint8Array(bytes.slice(24)),\n//             new Uint8Array(bytes.slice(0, 24)),\n//             ...[isBox && senderPublicKey].filter(Boolean),\n//             recipientSecretKey,\n//             asString,\n//         ]\n//         result[key] = open(...args)\n//     }\n\n//     return result\n// }\n\n// /**\n//  * @name encrypt\n//  * @description encrypt a message using TweetNacl Box seal encryption\n//  *\n//  * @param   {String|Uint8Array} message data to encrypt. String|Uint8Array\n//  * @param   {String|Uint8Array} senderSecretKey\n//  * @param   {String|Uint8Array} recipientPublicKey \n//  * @param   {String|Uint8Array} nonce (optional) if undefined, will generate new nonce\n//  * @param   {Boolean}           asHex whether to convert to hex or reutrn Uint8Array\n//  *\n//  * @returns Object `{sealed, nonce}`\n//  */\n// export const encrypt = (message, senderSecretKey, recipientPublicKey, nonce, asHex = true) => {\n//     const result = naclSeal(\n//         strToU8a(message),\n//         hexToBytes(senderSecretKey),\n//         hexToBytes(recipientPublicKey),\n//         !!nonce\n//             ? hexToBytes(nonce)\n//             : newNonce(false),\n//     )\n//     return !asHex ? result : {\n//         sealed: bytesToHex(result.sealed),\n//         nonce: bytesToHex(result.nonce)\n//     }\n// }\n\n// export const mapDecrypt = (map, senderPublicKey, recipientSecretKey, keys) => isMap(map)\n//     && new Map(\n//         Array\n//             .from(map)\n//             .map(([key, value]) => {\n//                 value = !isObj(value)\n//                     ? value\n//                     : decryptObj(value, senderPublicKey, recipientSecretKey, keys)\n//                 return [key, value]\n//             })\n//     )\n\n// export const mapEncrypt = (map, secretKey, recipientPublicKey, keys, asHex = true) => isMap(map)\n//     && new Map(\n//         Array\n//             .from(map)\n//             .map(([key, value]) => {\n//                 value = !isObj(value)\n//                     ? value\n//                     : encryptObj(\n//                         value,\n//                         secretKey,\n//                         recipientPublicKey,\n//                         keys,\n//                         asHex\n//                     )[0]\n//                 return [key, value]\n//             })\n//     )\n\n// /**\n//  * @name    encryptObj\n//  * @summary recursively encrypt specified or all properties of an object.\n//  * \n//  * @param   {Object}            result  object to encrypt\n//  * @param   {String|Uint8Array} secretKey \n//  * @param   {String|Uint8Array} recipientPublicKey (optional) if not supplied, will encrypt using SecretBox. \n//  *                                      Otherwise, will use Box encryption.\n//  * @param   {Array}             keys    (optional) to encrypt only specified object properties. \n//  *                                      If valid array, unlisted properties will not be encrypted.\n//  *                                      If not a valid array, will attempt to encrypt all properties.\n//  *                                      See examples for different usage cases.\n//  * @param   {Boolean}           asHex   (optional) Default: true\n//  * \n//  * @returns {Object} ```javascript\n//  *     [\n//  *         result, // encrypted object. \n//  *         isBox,  // indicates whether encrypted using SecretBox or Box\n//  *     ]\n//  * ```\n//  * \n//  * @example ```javascript\n//  * // object to encrypt\n//  * const obj = {\n//  *     first: 'some text',\n//  *     second: 1, // will be converted to string: '1'\n//  *     third: 'ignored property',\n//  *     fifth: null, // will be converted to string: 'null'\n//  * }\n//  * \n//  * // secondary object for recursive encryption\n//  * obj.fourth = {\n//  *     a: [1, 2, 3], // will be converted to string\n//  *     b: new Map([[1,1], [2,3]]), // will be converted to 2D Array and then to string\n//  *     c: 'not to be encrypted', // will not be touched\n//  *  }\n//  * \n//  * // specify which properties to encrypt. If `keys` is falsy, will encrypt everything.\n//  * const keys = [\n//  *     'first',\n//  *     'second',\n//  *     'fifth',\n//  *     'fourth',\n//  *     // removing the below two items will encrypt the entire `fourth` object\n//  *     'fourth.a',\n//  *     'fourth.b',\n//  * ]\n//  * \n//  * // generate random sender's encryption keypair\n//  * const keyPair = encryptionKeypair(randomBytes(117))\n//  * \n//  * // generate random recipient's encryption keypair\n//  * const keyPairRecipient = encryptionKeypair(randomBytes(117))\n//  * \n//  * // encrypt using Box encryption\n//  * const [ box ] = encryptObj(\n//  *     obj,\n//  *     keyPair.secretKey,\n//  *     keyPairRecipient.publicKey,\n//  *     keys,\n//  * )\n//  * \n//  * // now attempt to decrypt the encrypted `box` object\n//  * const boxDecrypted = decryptObj(\n//  *     box,\n//  *     keyPairRecipient.publicKey,\n//  *     keyPair.secretKey,\n//  *     keys,\n//  * )\n//  * \n//  * \n//  * // encrypt using SecretBox/Secretkey encryption\n//  * const [ secretBox ] = encryptObj(\n//  *     obj,\n//  *     keyPair.secretKey,\n//  *     null,\n//  *     keys,\n//  * )\n//  * \n//  * // now attempt to decrypt the encrypted `box` object\n//  * const secretBoxDecrypted = decryptObj(\n//  *     secretBox,\n//  *     null,\n//  *     keyPair.secretKey,\n//  *     keys,\n//  * )\n//  * \n//  * // if sealed is null encryption has failed\n//  * console.log({ \n//  *     box,\n//  *     boxDecrypted,\n//  *     secretBox,\n//  *     secretBoxDecrypted,\n//  * })\n//  * ```\n//  */\n// export const encryptObj = (obj, secretKey, recipientPublicKey, keys, asHex = true) => {\n//     if (!isObj(obj)) return\n\n//     const result = objCopy(obj, {}, [])\n//     const isBox = isHex(recipientPublicKey) || isUint8Arr(recipientPublicKey)\n//     const encryptFn = isBox\n//         ? encrypt\n//         : secretBoxEncrypt\n//     const validKeys = !isArr(keys)\n//         // encrypt all properties\n//         ? Object.keys(result)\n//         //  encrypt only specified properties\n//         : keys.filter(k => result.hasOwnProperty(k))\n\n//     for (let i = 0; i < validKeys.length; i++) {\n//         const key = validKeys[i]\n//         const value = result[key]\n//         if (!obj.hasOwnProperty(key)) continue\n\n//         // value is an object => recursively encrypt\n//         if (isObj(value)) {\n//             const childKeyPrefix = `${key}.`\n//             const childKeys = validKeys\n//                 .filter(k => k.startsWith(childKeyPrefix))\n//                 // get rid of prefix\n//                 .map(k => k.replace(new RegExp(childKeyPrefix), ''))\n\n//             result[key] = encryptObj(\n//                 value,\n//                 secretKey,\n//                 recipientPublicKey,\n//                 childKeys.length > 0\n//                     ? childKeys // encrypt only specified child keys\n//                     : null,     // encrypt all child keys\n//             )[0]\n//             continue\n//         }\n\n//         const { encrypted, nonce, sealed } = encryptFn(\n//             value,\n//             secretKey,\n//             // only include recipient public key if not secretBox encrption\n//             ...[isBox && recipientPublicKey].filter(Boolean),\n//             newNonce(false), // generate new nonce\n//             false,\n//         )\n//         if (!encrypted && !sealed) {\n//             console.log('Encryption failed!', { value })\n//             throw new Error('Encryption failed!')\n//         }\n\n//         const bytes = new Uint8Array([...nonce, ...(encrypted || sealed)])\n//         result[key] = !asHex\n//             ? bytes\n//             : bytesToHex(bytes)\n//     }\n//     return [\n//         result,\n//         isBox,\n//     ]\n// }\n\n// /**\n//  * @name    encryptionKeypair\n//  * @summary generate encryption keypair from oo7-substrate library's `keyData` or PolkadotJS's `encoded`\n//  * \n//  * @param   {String}    keyData hex string\n//  * @param   {Boolean}   asHex   whether to convert to `publicKey` and `secretKey` to hex string or keep as Uint8Array\n//  * \n//  * @returns {Object}    { publicKey, secretKey }\n//  */\n// export const encryptionKeypair = (keyData, asHex = true) => {\n//     const bytes = keyDataFromEncoded(keyData)\n//     const pair = naclBoxKeypairFromSecret(blake2b(bytes, null, 32))\n//     return !asHex\n//         ? pair\n//         : {\n//             publicKey: bytesToHex(pair.publicKey),\n//             secretKey: bytesToHex(pair.secretKey),\n//         }\n// }\n\n// /**\n//  * @name    keyDateFromEncoded\n//  * @summary converts PolkadotJS keyring's `encoded` hex string to oo7-substrate style `keyData`, if required\n//  * \n//  * @param   {String|Uint8Array} encoded hex string or bytes array. (Encoded: 117 bytes, KeyData: 96 bytes)\n//  * @param   {Boolean}           asHex   (optional) Default: false\n//  * \n//  * @returns Uint8Array/String\n//  */\n// export const keyDataFromEncoded = (encoded, asHex = false) => {\n//     // convert to Uint8Array if required\n//     encoded = hexToBytes(encoded)\n\n//     // Convert PolkadotJS keyring's `encoded` to oo7-substrate `keyData`\n//     if (encoded.length > 96) {\n//         encoded = new Uint8Array([\n//             ...encoded.slice(16, 80),\n//             ...encoded.slice(85)\n//         ])\n//     }\n//     return !asHex\n//         ? encoded\n//         : bytesToHex(encoded)\n// }\n\n// /**\n//  * @name    keyInfoFromKeyData\n//  * @summary generates keypair and Polkadot address from encoded or keyData.\n//  * @description FYI: the generated keypair is not an encryption or signing keypair.\n//  * \n//  * @param   {String|Uint8Array} keyData \n//  * @param   {Number}            ss58Format (optional) use to generate address for any supported parachain identity.\n//  *                                         Default: 0 (Polkadot)\n//  * @param   {Boolean}           asHex      (optional) if true, will convert `publicKey` and `secretKey` to hex string.\n//  *                                         Otherwise, will leave as Uint8Array.\n//  *                                         Default: false\n//  * \n//  * @returns {Object}    { address, publicKey, secretKey }\n//  */\n// export const keyInfoFromKeyData = (keyData = '', ss58Format, asHex = false) => {\n//     let bytes = keyDataFromEncoded(keyData, false)\n//     const publicKey = bytes.slice(64, 96)\n//     const secretKey = bytes.slice(0, 64)\n//     return {\n//         address: ss58Encode(publicKey, ss58Format),\n//         publicKey: asHex\n//             ? bytesToHex(publicKey)\n//             : publicKey,\n//         secretKey: asHex\n//             ? bytesToHex(secretKey)\n//             : secretKey\n//     }\n// }\n\n// /**\n//  * @name    newNonce\n//  * @summary generate a new random 24 bytes nonce\n//  * \n//  * @param   {Boolean}   (optional) Default: true\n//  * \n//  * @returns {Uint8Array|String}\n//  */\n// export const newNonce = (asHex = true) => randomBytes(24, asHex)\n\n// /**\n//  * @name    newSignature\n//  * @summary generate a new signature using keypair and a message\n//  * \n//  * @param   {String}    message \n//  * @param   {String}    publicKey \n//  * @param   {String}    secretKey   \n//  * @param   {Boolean}   asHex       (optional) Default: true\n//  * \n//  * @returns {String|Uint8Array} String Hex if `asHex = true`, otherwise, Uint8Array\n//  */\n// export const newSignature = (message, publicKey, secretKey, asHex = true) => {\n//     const signature = naclSign(\n//         message,\n//         {\n//             publicKey: hexToBytes(publicKey),\n//             secretKey: hexToBytes(secretKey),\n//         }\n//     )\n//     return !asHex ? signature : bytesToHex(signature)\n// }\n\n// /**\n//  * @name    randomBytes\n//  * @summary generate random bytes for use as nonce or bytes for keypair generation\n//  * \n//  * @param   {Number} length \n//  * @param   {Boolean} asHex \n//  * \n//  * @returns {Uint8Array|String}\n//  * \n//  * @example\n//  * ```javascript\n//  * // generate random bytes to be used to generate encryption or signing keypair\n//  * const keyData = randomBytes(96, true)  // equivalent to oo7-substrate's `keyData`\n//  * const encryptKP = encryptionKeypair(keyData, true)\n//  * console.log({ keyData, encryptKP })\n//  * \n//  * const encoded = randomBytes(117) // equivalent to PolkadotJS keyring's `encoded`\n//  * const signKP = signingKeyPair(encoded, true)\n//  * console.log({ encoded, signKP})\n//  * ```\n//  */\n// export const randomBytes = (length, asHex = true) => {\n//     const bytes = randomAsU8a(length)\n//     return !asHex\n//         ? bytes\n//         : bytesToHex(bytes)\n// }\n\n// /**\n//  * @name    naclDecrypt\n//  * @summary decrypt an message that was encrytped using TweetNaclJS SecretBox (AKA secret key) encryption\n//  * \n//  * @param   {Sting|Uint8Array}  encrypted   encrypted message (hex string or Uint8Array)\n//  * @param   {Sting|Uint8Array}  nonce       random nonce to decrypt the message (hex string or Uint8Array)\n//  * @param   {Sting|Uint8Array}  secret      encryption secret (hex string or Uint8Array)\n//  * @param   {Boolean}           asString    (optional) whether to return decrypted message as string or Uint8Array\n//  * \n//  * @returns {String|Uint8Array} decrypted message, null if decryption failed\n//  */\n// export const secretBoxDecrypt = (encrypted, nonce, secret, asString = true) => {\n//     const decrypted = naclDecrypt1(\n//         hexToBytes(encrypted),\n//         hexToBytes(nonce),\n//         hexToBytes(secret),\n//     )\n//     return !decrypted || !asString\n//         ? decrypted\n//         : u8aToStr(decrypted)\n// }\n\n// /**\n//  * @name    naclEncrypt\n//  * @summary encrypt a message using TweetNaclJS SecretBox (AKA secret key) encryption.\n//  *          All strings in the params are expected to be valid hex.\n//  * \n//  * @param   {String|Uint8Array} message message to encrypt\n//  * @param   {String|Uint8Array} secret  secret key\n//  * @param   {String|Uint8Array} nonce   (optional) if falsy, a new nonce will be generated\n//  * @param   {Boolean}           asHex   (optional) whether to return encrypted message as bytes or hex string\n//  *                                      Default: true\n//  * \n//  * @returns {Object}    `{ encrypted, nonce }` | null if encryption fails\n//  */\n// export const secretBoxEncrypt = (message, secret, nonce, asHex = true) => {\n//     nonce = nonce || newNonce(false) // generate new nonce\n//     const result = naclEncrypt1(\n//         strToU8a(message),\n//         hexToBytes(secret),\n//         hexToBytes(nonce),\n//     )\n//     if (!asHex || !result.encrypted) return result\n\n//     return {\n//         encrypted: bytesToHex(result.encrypted),\n//         nonce: bytesToHex(result.nonce),\n//     }\n// }\n\n// /**\n//  * @name    secretBoxKeyFromPW\n//  * @summary generates a TweetNacl SecretBox compatible secret key (hex string) from supplied seed/password\n//  * \n//  * @param   {String}    password\n//  * \n//  * @returns {String}    hex string\n//  */\n// export const secretBoxKeyFromPW = password => generateHash(\n//     password,\n//     'blake2',\n//     256, // DO NOT CHANGE\n// )\n\n// /**\n//  * @name    signingKeyPair\n//  * @summary generate TweetNacl signing keypair using `keyData` (oo7-substrate) or `encoded` (PolkadotJS) hex string.\n//  * \n//  * @param   {String|Uint8Array} keyData \n//  * @param   {Boolean}           asHex   (optional) Default: true\n//  * \n//  * @returns {Object}            `{ publicKey, secretKey }`\n//  */\n// export const signingKeyPair = (keyData, asHex = true) => {\n//     const bytes = keyDataFromEncoded(keyData)\n//     const pair = naclKeypairFromSeed(blake2b(bytes, null, 32))\n//     return !asHex\n//         ? pair\n//         : {\n//             publicKey: bytesToHex(pair.publicKey),\n//             secretKey: bytesToHex(pair.secretKey),\n//         }\n// }\n\n// /**\n//  * @name    verifySignature\n//  * @summary verify if a signature is valid\n//  *\n//  * @param   {String|Uint8Array} message \n//  * @param   {String|Uint8Array} signature\n//  * @param   {String|Uint8Array} publicKey\n//  *\n//  * @returns {Boolean}\n//  */\n// export const verifySignature = naclVerify\n\n// export default {\n//     decrypt,\n//     encrypt,\n//     encryptObj,\n//     encryptionKeypair,\n//     keyDataFromEncoded,\n//     keyInfoFromKeyData,\n//     newNonce,\n//     newSignature,\n//     randomBytes,\n//     secretBoxDecrypt,\n//     secretBoxEncrypt,\n//     signingKeyPair,\n//     verifySignature,\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/naclHelper-to-be-deprecated.js\n")},"./src/utils/naclHelper/box.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "decrypt": () => (/* binding */ decrypt),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "encrypt": () => (/* binding */ encrypt),\n/* harmony export */   "encryptionKeypair": () => (/* binding */ encryptionKeypair)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/naclHelper/utils.js");\n\n\n\n/**\n * @name    decrypt\n * @summary decrypted a message encrypted using TweetNacl Box depryption (open) mechanism\n *\n * @param   {String|Uint8Array} sealed  data to encrypt\n * @param   {String|Uint8Array} nonce\n * @param   {String|Uint8Array} senderPublicKey\n * @param   {String|Uint8Array} recipientSecretKey\n * @param   {Boolean}\n *\n * @returns {String|Uint8Array} decrypted message\n */\nvar decrypt = function decrypt(sealed, nonce, senderPublicKey, recipientSecretKey) {\n  var asString = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var decrypted = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").box.open)((0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(sealed), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(nonce), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(senderPublicKey), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(recipientSecretKey));\n  if (!decrypted) return decrypted;\n  return !asString ? decrypted : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.u8aToStr)(decrypted);\n};\n\n/**\n * @name encrypt\n * @description encrypt a message using TweetNacl Box seal encryption\n *\n * @param   {String|Uint8Array} message             data to encrypt\n * @param   {String|Uint8Array} senderSecretKey     hex string or bytes array\n * @param   {String|Uint8Array} recipientPublicKey  hex string or bytes array\n * @param   {String|Uint8Array} nonce               (optional) if undefined, will generate new nonce\n * @param   {Boolean}           asHex               whether to convert to hex or reutrn Uint8Array\n *\n * @returns Object `{sealed, nonce}`\n */\nvar encrypt = function encrypt(message, senderSecretKey, recipientPublicKey, nonce) {\n  var asHex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  nonce = !!nonce ? (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(nonce) : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.newNonce)(false);\n  var result = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").box)((0,_convert__WEBPACK_IMPORTED_MODULE_0__.strToU8a)(message), nonce, (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(recipientPublicKey), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(senderSecretKey));\n  return {\n    sealed: !asHex ? result : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(result),\n    nonce: asHex ? (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(nonce) : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(nonce)\n  };\n};\n\n/**\n * @name    encryptionKeypair\n * @summary generate encryption keypair from identity (oo7-substrate library\'s `keyData` or PolkadotJS\'s `encoded`)\n * \n * @param   {String}    keyData hex string (keyData or encoded)\n * @param   {Boolean}   asHex   whether to convert to `publicKey` and `secretKey` to hex string or keep as Uint8Array\n *  \n * @returns {Object}    { publicKey, secretKey }\n */\nvar encryptionKeypair = function encryptionKeypair(keyData) {\n  var asHex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var bytes = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.keyDataFromEncoded)(keyData);\n  var fromSecretKey = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").box.keyPair.fromSecretKey);\n  var _require = __webpack_require__("./node_modules/blakejs/index.js"),\n    blake2b = _require.blake2b;\n  var pair = fromSecretKey(blake2b(bytes, null, 32));\n  return !asHex ? pair : {\n    publicKey: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pair.publicKey),\n    secretKey: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pair.secretKey)\n  };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  decrypt: decrypt,\n  encrypt: encrypt,\n  keypairFromIdentity: encryptionKeypair\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFlO0VBQ1g1QixPQUFPLEVBQVBBLE9BQU87RUFDUGEsT0FBTyxFQUFQQSxPQUFPO0VBQ1BnQixtQkFBbUIsRUFBRVY7QUFDekIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvbmFjbEhlbHBlci9ib3guanM/NjI1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGJ5dGVzVG9IZXgsXG4gICAgaGV4VG9CeXRlcyxcbiAgICB1OGFUb1N0cixcbiAgICBzdHJUb1U4YSxcbn0gZnJvbSAnLi4vY29udmVydCdcbmltcG9ydCB7XG4gICAga2V5RGF0YUZyb21FbmNvZGVkLFxuICAgIG5ld05vbmNlLFxufSBmcm9tICcuL3V0aWxzJ1xuXG4vKipcbiAqIEBuYW1lICAgIGRlY3J5cHRcbiAqIEBzdW1tYXJ5IGRlY3J5cHRlZCBhIG1lc3NhZ2UgZW5jcnlwdGVkIHVzaW5nIFR3ZWV0TmFjbCBCb3ggZGVwcnlwdGlvbiAob3BlbikgbWVjaGFuaXNtXG4gKlxuICogQHBhcmFtICAge1N0cmluZ3xVaW50OEFycmF5fSBzZWFsZWQgIGRhdGEgdG8gZW5jcnlwdFxuICogQHBhcmFtICAge1N0cmluZ3xVaW50OEFycmF5fSBub25jZVxuICogQHBhcmFtICAge1N0cmluZ3xVaW50OEFycmF5fSBzZW5kZXJQdWJsaWNLZXlcbiAqIEBwYXJhbSAgIHtTdHJpbmd8VWludDhBcnJheX0gcmVjaXBpZW50U2VjcmV0S2V5XG4gKiBAcGFyYW0gICB7Qm9vbGVhbn1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfFVpbnQ4QXJyYXl9IGRlY3J5cHRlZCBtZXNzYWdlXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNyeXB0ID0gKHNlYWxlZCwgbm9uY2UsIHNlbmRlclB1YmxpY0tleSwgcmVjaXBpZW50U2VjcmV0S2V5LCBhc1N0cmluZyA9IHRydWUpID0+IHtcbiAgICBjb25zdCBkZWNyeXB0ZWQgPSByZXF1aXJlKCd0d2VldG5hY2wnKS5ib3gub3BlbihcbiAgICAgICAgaGV4VG9CeXRlcyhzZWFsZWQpLFxuICAgICAgICBoZXhUb0J5dGVzKG5vbmNlKSxcbiAgICAgICAgaGV4VG9CeXRlcyhzZW5kZXJQdWJsaWNLZXkpLFxuICAgICAgICBoZXhUb0J5dGVzKHJlY2lwaWVudFNlY3JldEtleSksXG4gICAgKVxuICAgIGlmICghZGVjcnlwdGVkKSByZXR1cm4gZGVjcnlwdGVkXG4gICAgcmV0dXJuICFhc1N0cmluZ1xuICAgICAgICA/IGRlY3J5cHRlZFxuICAgICAgICA6IHU4YVRvU3RyKGRlY3J5cHRlZClcbn1cblxuLyoqXG4gKiBAbmFtZSBlbmNyeXB0XG4gKiBAZGVzY3JpcHRpb24gZW5jcnlwdCBhIG1lc3NhZ2UgdXNpbmcgVHdlZXROYWNsIEJveCBzZWFsIGVuY3J5cHRpb25cbiAqXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IG1lc3NhZ2UgICAgICAgICAgICAgZGF0YSB0byBlbmNyeXB0XG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHNlbmRlclNlY3JldEtleSAgICAgaGV4IHN0cmluZyBvciBieXRlcyBhcnJheVxuICogQHBhcmFtICAge1N0cmluZ3xVaW50OEFycmF5fSByZWNpcGllbnRQdWJsaWNLZXkgIGhleCBzdHJpbmcgb3IgYnl0ZXMgYXJyYXlcbiAqIEBwYXJhbSAgIHtTdHJpbmd8VWludDhBcnJheX0gbm9uY2UgICAgICAgICAgICAgICAob3B0aW9uYWwpIGlmIHVuZGVmaW5lZCwgd2lsbCBnZW5lcmF0ZSBuZXcgbm9uY2VcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgICAgICAgICAgYXNIZXggICAgICAgICAgICAgICB3aGV0aGVyIHRvIGNvbnZlcnQgdG8gaGV4IG9yIHJldXRybiBVaW50OEFycmF5XG4gKlxuICogQHJldHVybnMgT2JqZWN0IGB7c2VhbGVkLCBub25jZX1gXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNyeXB0ID0gKG1lc3NhZ2UsIHNlbmRlclNlY3JldEtleSwgcmVjaXBpZW50UHVibGljS2V5LCBub25jZSwgYXNIZXggPSB0cnVlKSA9PiB7XG4gICAgbm9uY2UgPSAhIW5vbmNlXG4gICAgICAgID8gaGV4VG9CeXRlcyhub25jZSlcbiAgICAgICAgOiBuZXdOb25jZShmYWxzZSlcbiAgICBjb25zdCByZXN1bHQgPSByZXF1aXJlKCd0d2VldG5hY2wnKS5ib3goXG4gICAgICAgIHN0clRvVThhKG1lc3NhZ2UpLFxuICAgICAgICBub25jZSxcbiAgICAgICAgaGV4VG9CeXRlcyhyZWNpcGllbnRQdWJsaWNLZXkpLFxuICAgICAgICBoZXhUb0J5dGVzKHNlbmRlclNlY3JldEtleSksXG4gICAgKVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlYWxlZDogIWFzSGV4XG4gICAgICAgICAgICA/IHJlc3VsdFxuICAgICAgICAgICAgOiBieXRlc1RvSGV4KHJlc3VsdCksXG4gICAgICAgIG5vbmNlOiBhc0hleFxuICAgICAgICAgICAgPyBieXRlc1RvSGV4KG5vbmNlKVxuICAgICAgICAgICAgOiBoZXhUb0J5dGVzKG5vbmNlKVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbmFtZSAgICBlbmNyeXB0aW9uS2V5cGFpclxuICogQHN1bW1hcnkgZ2VuZXJhdGUgZW5jcnlwdGlvbiBrZXlwYWlyIGZyb20gaWRlbnRpdHkgKG9vNy1zdWJzdHJhdGUgbGlicmFyeSdzIGBrZXlEYXRhYCBvciBQb2xrYWRvdEpTJ3MgYGVuY29kZWRgKVxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSAgICBrZXlEYXRhIGhleCBzdHJpbmcgKGtleURhdGEgb3IgZW5jb2RlZClcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgIGFzSGV4ICAgd2hldGhlciB0byBjb252ZXJ0IHRvIGBwdWJsaWNLZXlgIGFuZCBgc2VjcmV0S2V5YCB0byBoZXggc3RyaW5nIG9yIGtlZXAgYXMgVWludDhBcnJheVxuICogIFxuICogQHJldHVybnMge09iamVjdH0gICAgeyBwdWJsaWNLZXksIHNlY3JldEtleSB9XG4gKi9cbmV4cG9ydCBjb25zdCBlbmNyeXB0aW9uS2V5cGFpciA9IChrZXlEYXRhLCBhc0hleCA9IHRydWUpID0+IHtcbiAgICBjb25zdCBieXRlcyA9IGtleURhdGFGcm9tRW5jb2RlZChrZXlEYXRhKVxuICAgIGNvbnN0IHsgZnJvbVNlY3JldEtleSB9ID0gcmVxdWlyZSgndHdlZXRuYWNsJykuYm94LmtleVBhaXJcbiAgICBjb25zdCB7IGJsYWtlMmIgfSA9IHJlcXVpcmUoJ2JsYWtlanMnKVxuICAgIGNvbnN0IHBhaXIgPSBmcm9tU2VjcmV0S2V5KGJsYWtlMmIoYnl0ZXMsIG51bGwsIDMyKSlcbiAgICByZXR1cm4gIWFzSGV4XG4gICAgICAgID8gcGFpclxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogYnl0ZXNUb0hleChwYWlyLnB1YmxpY0tleSksXG4gICAgICAgICAgICBzZWNyZXRLZXk6IGJ5dGVzVG9IZXgocGFpci5zZWNyZXRLZXkpLFxuICAgICAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkZWNyeXB0LFxuICAgIGVuY3J5cHQsXG4gICAga2V5cGFpckZyb21JZGVudGl0eTogZW5jcnlwdGlvbktleXBhaXIsXG59Il0sIm5hbWVzIjpbImJ5dGVzVG9IZXgiLCJoZXhUb0J5dGVzIiwidThhVG9TdHIiLCJzdHJUb1U4YSIsImtleURhdGFGcm9tRW5jb2RlZCIsIm5ld05vbmNlIiwiZGVjcnlwdCIsInNlYWxlZCIsIm5vbmNlIiwic2VuZGVyUHVibGljS2V5IiwicmVjaXBpZW50U2VjcmV0S2V5IiwiYXNTdHJpbmciLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJkZWNyeXB0ZWQiLCJyZXF1aXJlIiwiYm94Iiwib3BlbiIsImVuY3J5cHQiLCJtZXNzYWdlIiwic2VuZGVyU2VjcmV0S2V5IiwicmVjaXBpZW50UHVibGljS2V5IiwiYXNIZXgiLCJyZXN1bHQiLCJlbmNyeXB0aW9uS2V5cGFpciIsImtleURhdGEiLCJieXRlcyIsImZyb21TZWNyZXRLZXkiLCJrZXlQYWlyIiwiX3JlcXVpcmUiLCJibGFrZTJiIiwicGFpciIsInB1YmxpY0tleSIsInNlY3JldEtleSIsImtleXBhaXJGcm9tSWRlbnRpdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/box.js\n')},"./src/utils/naclHelper/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "box": () => (/* binding */ box),\n/* harmony export */   "decrypt": () => (/* reexport safe */ _box__WEBPACK_IMPORTED_MODULE_0__.decrypt),\n/* harmony export */   "decryptObj": () => (/* reexport safe */ _object__WEBPACK_IMPORTED_MODULE_2__.decryptObj),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "encrypt": () => (/* reexport safe */ _box__WEBPACK_IMPORTED_MODULE_0__.encrypt),\n/* harmony export */   "encryptObj": () => (/* reexport safe */ _object__WEBPACK_IMPORTED_MODULE_2__.encryptObj),\n/* harmony export */   "encryptionKeypair": () => (/* reexport safe */ _box__WEBPACK_IMPORTED_MODULE_0__.encryptionKeypair),\n/* harmony export */   "keyDataFromEncoded": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_5__.keyDataFromEncoded),\n/* harmony export */   "keyInfoFromKeyData": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_5__.keyInfoFromKeyData),\n/* harmony export */   "map": () => (/* binding */ map),\n/* harmony export */   "mapDecrypt": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_1__.mapDecrypt),\n/* harmony export */   "mapEncrypt": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_1__.mapEncrypt),\n/* harmony export */   "newNonce": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_5__.newNonce),\n/* harmony export */   "newSignature": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_4__.newSignature),\n/* harmony export */   "object": () => (/* binding */ object),\n/* harmony export */   "randomBytes": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_5__.randomBytes),\n/* harmony export */   "randomKeypair": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_4__.randomKeypair),\n/* harmony export */   "secretBox": () => (/* binding */ secretBox),\n/* harmony export */   "secretBoxDecrypt": () => (/* reexport safe */ _secretBox__WEBPACK_IMPORTED_MODULE_3__.secretBoxDecrypt),\n/* harmony export */   "secretBoxEncrypt": () => (/* reexport safe */ _secretBox__WEBPACK_IMPORTED_MODULE_3__.secretBoxEncrypt),\n/* harmony export */   "secretBoxKeyFromPW": () => (/* reexport safe */ _secretBox__WEBPACK_IMPORTED_MODULE_3__.secretBoxKeyFromPW),\n/* harmony export */   "sign": () => (/* binding */ sign),\n/* harmony export */   "signingKeyPair": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_4__.signingKeyPair),\n/* harmony export */   "utils": () => (/* binding */ utils),\n/* harmony export */   "verifySignature": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_4__.verifySignature)\n/* harmony export */ });\n/* harmony import */ var _box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/naclHelper/box.js");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/naclHelper/map.js");\n/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/naclHelper/object.js");\n/* harmony import */ var _secretBox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/naclHelper/secretBox.js");\n/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/naclHelper/sign.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/naclHelper/utils.js");\n\n\n\n\n\n\nvar box = (__webpack_require__("./src/utils/naclHelper/box.js")["default"]);\nvar map = (__webpack_require__("./src/utils/naclHelper/map.js")["default"]);\nvar object = (__webpack_require__("./src/utils/naclHelper/object.js")["default"]);\nvar secretBox = (__webpack_require__("./src/utils/naclHelper/secretBox.js")["default"]);\nvar sign = (__webpack_require__("./src/utils/naclHelper/sign.js")["default"]);\nvar utils = (__webpack_require__("./src/utils/naclHelper/utils.js")["default"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  box: box,\n  map: map,\n  object: object,\n  secretBox: secretBox,\n  sign: sign\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvbmFjbEhlbHBlci9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFCO0FBQ0E7QUFDRztBQUNHO0FBQ0w7QUFDQztBQUVoQixJQUFNQSxHQUFHLEdBQUdDLGlFQUF3QjtBQUNwQyxJQUFNRSxHQUFHLEdBQUdGLGlFQUF3QjtBQUNwQyxJQUFNRyxNQUFNLEdBQUdILG9FQUEyQjtBQUMxQyxJQUFNSSxTQUFTLEdBQUdKLHVFQUE4QjtBQUNoRCxJQUFNSyxJQUFJLEdBQUdMLGtFQUF5QjtBQUN0QyxJQUFNTSxLQUFLLEdBQUdOLG1FQUEwQjtBQUUvQyxpRUFBZTtFQUNYRCxHQUFHLEVBQUhBLEdBQUc7RUFDSEcsR0FBRyxFQUFIQSxHQUFHO0VBQ0hDLE1BQU0sRUFBTkEsTUFBTTtFQUNOQyxTQUFTLEVBQVRBLFNBQVM7RUFDVEMsSUFBSSxFQUFKQTtBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL25hY2xIZWxwZXIvaW5kZXguanM/ODk1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2JveCdcbmV4cG9ydCAqIGZyb20gJy4vbWFwJ1xuZXhwb3J0ICogZnJvbSAnLi9vYmplY3QnXG5leHBvcnQgKiBmcm9tICcuL3NlY3JldEJveCdcbmV4cG9ydCAqIGZyb20gJy4vc2lnbidcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMnXG5cbmV4cG9ydCBjb25zdCBib3ggPSByZXF1aXJlKCcuL2JveCcpLmRlZmF1bHRcbmV4cG9ydCBjb25zdCBtYXAgPSByZXF1aXJlKCcuL21hcCcpLmRlZmF1bHRcbmV4cG9ydCBjb25zdCBvYmplY3QgPSByZXF1aXJlKCcuL29iamVjdCcpLmRlZmF1bHRcbmV4cG9ydCBjb25zdCBzZWNyZXRCb3ggPSByZXF1aXJlKCcuL3NlY3JldEJveCcpLmRlZmF1bHRcbmV4cG9ydCBjb25zdCBzaWduID0gcmVxdWlyZSgnLi9zaWduJykuZGVmYXVsdFxuZXhwb3J0IGNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpLmRlZmF1bHRcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGJveCxcbiAgICBtYXAsXG4gICAgb2JqZWN0LFxuICAgIHNlY3JldEJveCxcbiAgICBzaWduLFxufSJdLCJuYW1lcyI6WyJib3giLCJyZXF1aXJlIiwiZGVmYXVsdCIsIm1hcCIsIm9iamVjdCIsInNlY3JldEJveCIsInNpZ24iLCJ1dGlscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/index.js\n')},"./src/utils/naclHelper/map.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "mapDecrypt": () => (/* binding */ mapDecrypt),\n/* harmony export */   "mapEncrypt": () => (/* binding */ mapEncrypt)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/naclHelper/object.js");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n/**\n * @name    mapDecrypt\n * @summary recursively decrypt objects encrypted using the `encryptObj()` function. \n * \n * @param   {Map}               map         data to decrypt\n * @param   {String|Uint8Array} senderPublicKey (optional) if not supplied, will decrypt using SecretBox. \n *                                          Otherwise, will use Box encryption.\n * @param   {String|Uint8Array} secretKey   recipient secret key (box encrypted) or shared secret (secret box encrypted)\n * @param   {Array}             keys        (optional) `obj` property names, to be decrypted. \n *                                          If valid array, unlisted properties will not be decrypted.\n *                                          Otherwise, will attempt to decrypt all String (hex) or Uint8Array values.\n *                                          See examples for different usage cases.\n * \n * @returns {Object} decrypted object\n * \n * @example see see `encryptObj()` function documentation for examples\n */\nvar mapDecrypt = function mapDecrypt(map, senderPublicKey, recipientSecretKey, keys) {\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isMap)(map) && new Map(Array.from(map).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    value = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(value) ? value : (0,_object__WEBPACK_IMPORTED_MODULE_1__.decryptObj)(value, senderPublicKey, recipientSecretKey, keys, true);\n    return [key, value];\n  }));\n};\n\n/**\n * @name    mapEncrypt\n * @summary recursively encrypt specified or all properties of an object using TweetNacl Box or SecretBox encryption.\n * @description For Box encryption `recipientPublicKey` is required. All values are stringified before encryption. \n * Make sure to parse into appropriate types after decryption. Encryption examples available below.\n * \n * @param   {Map}               map       data to encrypt\n * @param   {String|Uint8Array} secretKey sender secret key (box encrypted) or shared secret (secret box encrypted)\n * @param   {String|Uint8Array} recipientPublicKey (optional) if not supplied, will encrypt using SecretBox. \n *                                      Otherwise, will use Box encryption.\n * @param   {Array}             keys    (optional) to encrypt only specified object properties. \n *                                      If valid array, unlisted properties will not be encrypted.\n *                                      If not a valid array, will attempt to encrypt all properties.\n *                                      See examples for different usage cases.\n * @param   {Boolean}           asHex   (optional) Default: `true`\n * \n * @returns {Array} `[result, isBox]`\n */\nvar mapEncrypt = function mapEncrypt(map, secretKey, recipientPublicKey, keys) {\n  var asHex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isMap)(map) && new Map(Array.from(map).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      key = _ref4[0],\n      value = _ref4[1];\n    value = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(value) ? value : (0,_object__WEBPACK_IMPORTED_MODULE_1__.encryptObj)(value, secretKey, recipientPublicKey, keys, asHex)[0];\n    return [key, value];\n  }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  decrypt: mapDecrypt,\n  encrypt: mapEncrypt\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvbmFjbEhlbHBlci9tYXAuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDVTs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1JLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFJQyxHQUFHLEVBQUVDLGVBQWUsRUFBRUMsa0JBQWtCLEVBQUVDLElBQUk7RUFBQSxPQUFLUiw2Q0FBSyxDQUFDSyxHQUFHLENBQUMsSUFDakYsSUFBSUksR0FBRyxDQUNOQyxLQUFLLENBQ0FDLElBQUksQ0FBQ04sR0FBRyxDQUFDLENBQ1RBLEdBQUcsQ0FBQyxVQUFBTyxJQUFBLEVBQWtCO0lBQUEsSUFBQUMsS0FBQSxHQUFBQyxjQUFBLENBQUFGLElBQUE7TUFBaEJHLEdBQUcsR0FBQUYsS0FBQTtNQUFFRyxLQUFLLEdBQUFILEtBQUE7SUFDYkcsS0FBSyxHQUFHLENBQUNmLDZDQUFLLENBQUNlLEtBQUssQ0FBQyxHQUNmQSxLQUFLLEdBQ0xkLG1EQUFVLENBQ1JjLEtBQUssRUFDTFYsZUFBZSxFQUNmQyxrQkFBa0IsRUFDbEJDLElBQUksRUFDSixJQUNKLENBQUM7SUFDTCxPQUFPLENBQUNPLEdBQUcsRUFBRUMsS0FBSyxDQUFDO0VBQ3ZCLENBQUMsQ0FDVCxDQUFDO0FBQUE7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQUlaLEdBQUcsRUFBRWEsU0FBUyxFQUFFQyxrQkFBa0IsRUFBRVgsSUFBSTtFQUFBLElBQUVZLEtBQUssR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtFQUFBLE9BQUtyQiw2Q0FBSyxDQUFDSyxHQUFHLENBQUMsSUFDekYsSUFBSUksR0FBRyxDQUNOQyxLQUFLLENBQ0FDLElBQUksQ0FBQ04sR0FBRyxDQUFDLENBQ1RBLEdBQUcsQ0FBQyxVQUFBbUIsS0FBQSxFQUFrQjtJQUFBLElBQUFDLEtBQUEsR0FBQVgsY0FBQSxDQUFBVSxLQUFBO01BQWhCVCxHQUFHLEdBQUFVLEtBQUE7TUFBRVQsS0FBSyxHQUFBUyxLQUFBO0lBQ2JULEtBQUssR0FBRyxDQUFDZiw2Q0FBSyxDQUFDZSxLQUFLLENBQUMsR0FDZkEsS0FBSyxHQUNMYixtREFBVSxDQUNSYSxLQUFLLEVBQ0xFLFNBQVMsRUFDVEMsa0JBQWtCLEVBQ2xCWCxJQUFJLEVBQ0pZLEtBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLE9BQU8sQ0FBQ0wsR0FBRyxFQUFFQyxLQUFLLENBQUM7RUFDdkIsQ0FBQyxDQUNULENBQUM7QUFBQTtBQUdMLGlFQUFlO0VBQ1hVLE9BQU8sRUFBRXRCLFVBQVU7RUFDbkJ1QixPQUFPLEVBQUVWO0FBQ2IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvbmFjbEhlbHBlci9tYXAuanM/NjNmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01hcCwgaXNPYmogfSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7IGRlY3J5cHRPYmosIGVuY3J5cHRPYmogfSBmcm9tICcuL29iamVjdCdcblxuLyoqXG4gKiBAbmFtZSAgICBtYXBEZWNyeXB0XG4gKiBAc3VtbWFyeSByZWN1cnNpdmVseSBkZWNyeXB0IG9iamVjdHMgZW5jcnlwdGVkIHVzaW5nIHRoZSBgZW5jcnlwdE9iaigpYCBmdW5jdGlvbi4gXG4gKiBcbiAqIEBwYXJhbSAgIHtNYXB9ICAgICAgICAgICAgICAgbWFwICAgICAgICAgZGF0YSB0byBkZWNyeXB0XG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHNlbmRlclB1YmxpY0tleSAob3B0aW9uYWwpIGlmIG5vdCBzdXBwbGllZCwgd2lsbCBkZWNyeXB0IHVzaW5nIFNlY3JldEJveC4gXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE90aGVyd2lzZSwgd2lsbCB1c2UgQm94IGVuY3J5cHRpb24uXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHNlY3JldEtleSAgIHJlY2lwaWVudCBzZWNyZXQga2V5IChib3ggZW5jcnlwdGVkKSBvciBzaGFyZWQgc2VjcmV0IChzZWNyZXQgYm94IGVuY3J5cHRlZClcbiAqIEBwYXJhbSAgIHtBcnJheX0gICAgICAgICAgICAga2V5cyAgICAgICAgKG9wdGlvbmFsKSBgb2JqYCBwcm9wZXJ0eSBuYW1lcywgdG8gYmUgZGVjcnlwdGVkLiBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdmFsaWQgYXJyYXksIHVubGlzdGVkIHByb3BlcnRpZXMgd2lsbCBub3QgYmUgZGVjcnlwdGVkLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdGhlcndpc2UsIHdpbGwgYXR0ZW1wdCB0byBkZWNyeXB0IGFsbCBTdHJpbmcgKGhleCkgb3IgVWludDhBcnJheSB2YWx1ZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlZSBleGFtcGxlcyBmb3IgZGlmZmVyZW50IHVzYWdlIGNhc2VzLlxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZWNyeXB0ZWQgb2JqZWN0XG4gKiBcbiAqIEBleGFtcGxlIHNlZSBzZWUgYGVuY3J5cHRPYmooKWAgZnVuY3Rpb24gZG9jdW1lbnRhdGlvbiBmb3IgZXhhbXBsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IG1hcERlY3J5cHQgPSAobWFwLCBzZW5kZXJQdWJsaWNLZXksIHJlY2lwaWVudFNlY3JldEtleSwga2V5cykgPT4gaXNNYXAobWFwKVxuICAgICYmIG5ldyBNYXAoXG4gICAgICAgIEFycmF5XG4gICAgICAgICAgICAuZnJvbShtYXApXG4gICAgICAgICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICFpc09iaih2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICA6IGRlY3J5cHRPYmooXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlclB1YmxpY0tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudFNlY3JldEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtrZXksIHZhbHVlXVxuICAgICAgICAgICAgfSlcbiAgICApXG5cbi8qKlxuICogQG5hbWUgICAgbWFwRW5jcnlwdFxuICogQHN1bW1hcnkgcmVjdXJzaXZlbHkgZW5jcnlwdCBzcGVjaWZpZWQgb3IgYWxsIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHVzaW5nIFR3ZWV0TmFjbCBCb3ggb3IgU2VjcmV0Qm94IGVuY3J5cHRpb24uXG4gKiBAZGVzY3JpcHRpb24gRm9yIEJveCBlbmNyeXB0aW9uIGByZWNpcGllbnRQdWJsaWNLZXlgIGlzIHJlcXVpcmVkLiBBbGwgdmFsdWVzIGFyZSBzdHJpbmdpZmllZCBiZWZvcmUgZW5jcnlwdGlvbi4gXG4gKiBNYWtlIHN1cmUgdG8gcGFyc2UgaW50byBhcHByb3ByaWF0ZSB0eXBlcyBhZnRlciBkZWNyeXB0aW9uLiBFbmNyeXB0aW9uIGV4YW1wbGVzIGF2YWlsYWJsZSBiZWxvdy5cbiAqIFxuICogQHBhcmFtICAge01hcH0gICAgICAgICAgICAgICBtYXAgICAgICAgZGF0YSB0byBlbmNyeXB0XG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHNlY3JldEtleSBzZW5kZXIgc2VjcmV0IGtleSAoYm94IGVuY3J5cHRlZCkgb3Igc2hhcmVkIHNlY3JldCAoc2VjcmV0IGJveCBlbmNyeXB0ZWQpXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHJlY2lwaWVudFB1YmxpY0tleSAob3B0aW9uYWwpIGlmIG5vdCBzdXBwbGllZCwgd2lsbCBlbmNyeXB0IHVzaW5nIFNlY3JldEJveC4gXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3RoZXJ3aXNlLCB3aWxsIHVzZSBCb3ggZW5jcnlwdGlvbi5cbiAqIEBwYXJhbSAgIHtBcnJheX0gICAgICAgICAgICAga2V5cyAgICAob3B0aW9uYWwpIHRvIGVuY3J5cHQgb25seSBzcGVjaWZpZWQgb2JqZWN0IHByb3BlcnRpZXMuIFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHZhbGlkIGFycmF5LCB1bmxpc3RlZCBwcm9wZXJ0aWVzIHdpbGwgbm90IGJlIGVuY3J5cHRlZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBub3QgYSB2YWxpZCBhcnJheSwgd2lsbCBhdHRlbXB0IHRvIGVuY3J5cHQgYWxsIHByb3BlcnRpZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIGV4YW1wbGVzIGZvciBkaWZmZXJlbnQgdXNhZ2UgY2FzZXMuXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICAgICAgICAgIGFzSGV4ICAgKG9wdGlvbmFsKSBEZWZhdWx0OiBgdHJ1ZWBcbiAqIFxuICogQHJldHVybnMge0FycmF5fSBgW3Jlc3VsdCwgaXNCb3hdYFxuICovXG5leHBvcnQgY29uc3QgbWFwRW5jcnlwdCA9IChtYXAsIHNlY3JldEtleSwgcmVjaXBpZW50UHVibGljS2V5LCBrZXlzLCBhc0hleCA9IHRydWUpID0+IGlzTWFwKG1hcClcbiAgICAmJiBuZXcgTWFwKFxuICAgICAgICBBcnJheVxuICAgICAgICAgICAgLmZyb20obWFwKVxuICAgICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAhaXNPYmoodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiBlbmNyeXB0T2JqKFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXRLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRQdWJsaWNLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNIZXhcbiAgICAgICAgICAgICAgICAgICAgKVswXVxuICAgICAgICAgICAgICAgIHJldHVybiBba2V5LCB2YWx1ZV1cbiAgICAgICAgICAgIH0pXG4gICAgKVxuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkZWNyeXB0OiBtYXBEZWNyeXB0LFxuICAgIGVuY3J5cHQ6IG1hcEVuY3J5cHQsXG59Il0sIm5hbWVzIjpbImlzTWFwIiwiaXNPYmoiLCJkZWNyeXB0T2JqIiwiZW5jcnlwdE9iaiIsIm1hcERlY3J5cHQiLCJtYXAiLCJzZW5kZXJQdWJsaWNLZXkiLCJyZWNpcGllbnRTZWNyZXRLZXkiLCJrZXlzIiwiTWFwIiwiQXJyYXkiLCJmcm9tIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJrZXkiLCJ2YWx1ZSIsIm1hcEVuY3J5cHQiLCJzZWNyZXRLZXkiLCJyZWNpcGllbnRQdWJsaWNLZXkiLCJhc0hleCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9yZWYzIiwiX3JlZjQiLCJkZWNyeXB0IiwiZW5jcnlwdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/map.js\n')},"./src/utils/naclHelper/object.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "decryptObj": () => (/* binding */ decryptObj),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "encryptObj": () => (/* binding */ encryptObj)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/naclHelper/box.js");\n/* harmony import */ var _secretBox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/naclHelper/secretBox.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/naclHelper/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n/**\n * @name    decryptObj\n * @summary recursively decrypt objects encrypted using the `encryptObj()` function. \n * \n * @param   {Object}            obj         data object to decrypt\n * @param   {String|Uint8Array} senderPublicKey (optional) if not supplied, will decrypt using SecretBox. \n *                                          Otherwise, will use Box encryption.\n * @param   {String|Uint8Array} secretKey   recipient secret key (box encrypted) or shared secret (secret box encrypted)\n * @param   {Array}             keys        (optional) `obj` property names, to be decrypted. \n *                                          If valid array, unlisted properties will not be decrypted.\n *                                          Otherwise, will attempt to decrypt all String (hex) or Uint8Array values.\n *                                          See examples for different usage cases.\n * @param   {Boolean}           asString    (optional) whether to convert result bytes to string.\n *                                          Default: `true`\n * \n * @returns {Object} decrypted object\n * \n * @example see see `encryptObj()` function documentation for examples\n */\nvar decryptObj = function decryptObj(obj, senderPublicKey, secretKey, keys) {\n  var asString = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(obj)) return;\n  var result = _objectSpread({}, obj);\n  var isBox = !!senderPublicKey;\n  var decrypt = isBox ? _box__WEBPACK_IMPORTED_MODULE_2__["default"].decrypt : _secretBox__WEBPACK_IMPORTED_MODULE_3__["default"].decrypt;\n  var validKeys = !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(keys)\n  // decrypt all properties\n  ? Object.keys(result)\n  // decrypt only specified properties\n  : keys.filter(function (k) {\n    return result.hasOwnProperty(k);\n  });\n  var _loop = function _loop() {\n    var key = validKeys[i];\n    var value = result[key];\n    if (!obj.hasOwnProperty(key)) return "continue";\n    // ignore unencrytped keys\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isHex)(value) && !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isUint8Arr)(value)) return "continue";\n\n    // value is an object => recursively decrypt\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(value)) {\n      var childKeyPrefix = "".concat(key, ".");\n      var childKeys = validKeys.filter(function (k) {\n        return k.startsWith(childKeyPrefix);\n      })\n      // get rid of prefix\n      .map(function (k) {\n        return k.replace(new RegExp(childKeyPrefix), \'\');\n      });\n      result[key] = decryptObj(value, senderPublicKey, secretKey, childKeys.length > 0 ? childKeys // decrypt only specified child keys\n      : null,\n      // decrypt all child keys\n      asString);\n      return "continue";\n    }\n    var bytes = (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(value);\n    if (!bytes || bytes.length <= 24) throw new Error(\'Decryption failed\');\n    var args = [new Uint8Array(bytes.slice(24)), new Uint8Array(bytes.slice(0, 24))].concat(_toConsumableArray([isBox && senderPublicKey].filter(Boolean)), [secretKey, asString]);\n    result[key] = decrypt.apply(void 0, _toConsumableArray(args));\n  };\n  for (var i = 0; i < validKeys.length; i++) {\n    var _ret = _loop();\n    if (_ret === "continue") continue;\n  }\n  return result;\n};\n\n/**\n * @name    encryptObj\n * @summary recursively encrypt specified or all properties of an object using TweetNacl Box or SecretBox encryption.\n * @description For Box encryption `recipientPublicKey` is required. All values are stringified before encryption. \n * Make sure to parse into appropriate types after decryption. Encryption examples available below.\n * \n * @param   {Object}            result  object to encrypt\n * @param   {String|Uint8Array} secretKey sender secret key (box encrypted) or shared secret (secret box encrypted)\n * @param   {String|Uint8Array} recipientPublicKey (optional) if not supplied, will encrypt using SecretBox. \n *                                      Otherwise, will use Box encryption.\n * @param   {Array}             keys    (optional) to encrypt only specified object properties. \n *                                      If valid array, unlisted properties will not be encrypted.\n *                                      If not a valid array, will attempt to encrypt all properties.\n *                                      See examples for different usage cases.\n * @param   {Boolean}           asHex   (optional) Default: `true`\n * \n * @returns {Array} `[result, isBox]`\n * \n * @example ```javascript\n * // object to encrypt\n * const obj = {\n *     first: \'some text\',\n *     second: 1, // will be converted to string: \'1\'\n *     third: \'ignored property\',\n *     fifth: null, // will be converted to string: \'null\'\n * }\n * \n * // secondary object for recursive encryption\n * obj.fourth = {\n *     a: [1, 2, 3], // will be converted to string\n *     b: new Map([[1,1], [2,3]]), // will be converted to 2D Array and then to string\n *     c: \'not to be encrypted\', // will not be touched\n *  }\n * \n * // specify which properties to encrypt. If `keys` is falsy, will encrypt everything.\n * const keys = [\n *     \'first\',\n *     \'second\',\n *     \'fifth\',\n *     \'fourth\',\n *     // removing the below two items will encrypt the entire `fourth` object\n *     \'fourth.a\',\n *     \'fourth.b\',\n * ]\n * \n * // generate random sender\'s encryption keypair\n * const keyPair = encryptionKeypair(randomBytes(117))\n * \n * // generate random recipient\'s encryption keypair\n * const keyPairRecipient = encryptionKeypair(randomBytes(117))\n * \n * // encrypt using Box encryption\n * const [ box ] = encryptObj(\n *     obj,\n *     keyPair.secretKey,\n *     keyPairRecipient.publicKey,\n *     keys,\n * )\n * \n * // now attempt to decrypt the encrypted `box` object\n * const boxDecrypted = decryptObj(\n *     box,\n *     keyPairRecipient.publicKey,\n *     keyPair.secretKey,\n *     keys,\n * )\n * \n * // encrypt using SecretBox/Secretkey encryption\n * const [ secretBox ] = encryptObj(\n *     obj,\n *     keyPair.secretKey,\n *     null,\n *     keys,\n * )\n * \n * // now attempt to decrypt the encrypted `box` object\n * const secretBoxDecrypted = decryptObj(\n *     secretBox,\n *     null,\n *     keyPair.secretKey,\n *     keys,\n * )\n * \n * // if sealed is null encryption has failed\n * console.log({ \n *     box,\n *     boxDecrypted,\n *     secretBox,\n *     secretBoxDecrypted,\n * })\n * ```\n */\nvar encryptObj = function encryptObj(obj, secretKey, recipientPublicKey, keys) {\n  var asHex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(obj)) return;\n  var result = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objCopy)(obj, {}, []);\n  var isBox = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isHex)(recipientPublicKey) || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isUint8Arr)(recipientPublicKey);\n  var encrypt = isBox ? _box__WEBPACK_IMPORTED_MODULE_2__["default"].encrypt : _secretBox__WEBPACK_IMPORTED_MODULE_3__["default"].encrypt;\n  var validKeys = !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(keys)\n  // encrypt all properties\n  ? Object.keys(result)\n  //  encrypt only specified properties\n  : keys.filter(function (k) {\n    return result.hasOwnProperty(k);\n  });\n  var _loop2 = function _loop2() {\n    var key = validKeys[i];\n    var value = result[key];\n    if (!obj.hasOwnProperty(key)) return "continue";\n\n    // value is an object => recursively encrypt\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(value)) {\n      var childKeyPrefix = "".concat(key, ".");\n      var childKeys = validKeys.filter(function (k) {\n        return k.startsWith(childKeyPrefix);\n      })\n      // get rid of prefix\n      .map(function (k) {\n        return k.replace(new RegExp(childKeyPrefix), \'\');\n      });\n      result[key] = encryptObj(value, secretKey, recipientPublicKey, childKeys.length > 0 ? childKeys // encrypt only specified child keys\n      : null // encrypt all child keys\n      )[0];\n      return "continue";\n    }\n    var _encrypt = encrypt.apply(void 0, [value, secretKey].concat(_toConsumableArray([isBox && recipientPublicKey].filter(Boolean)), [(0,_utils__WEBPACK_IMPORTED_MODULE_4__.newNonce)(false),\n      // generate new nonce\n      false])),\n      encrypted = _encrypt.encrypted,\n      nonce = _encrypt.nonce,\n      sealed = _encrypt.sealed;\n    if (!encrypted && !sealed) {\n      console.log(\'Encryption failed!\', {\n        value: value\n      });\n      throw new Error(\'Encryption failed!\');\n    }\n    var bytes = new Uint8Array([].concat(_toConsumableArray(nonce), _toConsumableArray(encrypted || sealed)));\n    result[key] = !asHex ? bytes : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(bytes);\n  };\n  for (var i = 0; i < validKeys.length; i++) {\n    var _ret2 = _loop2();\n    if (_ret2 === "continue") continue;\n  }\n  return [result, isBox];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  decrypt: decryptObj,\n  encrypt: encryptObj\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/object.js\n')},"./src/utils/naclHelper/secretBox.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "secretBoxDecrypt": () => (/* binding */ secretBoxDecrypt),\n/* harmony export */   "secretBoxEncrypt": () => (/* binding */ secretBoxEncrypt),\n/* harmony export */   "secretBoxKeyFromPW": () => (/* binding */ secretBoxKeyFromPW)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/naclHelper/utils.js");\n\n\n\n\n/**\n * @name    naclDecrypt\n * @summary decrypt an message that was encrytped using TweetNaclJS SecretBox (AKA "secret key") encryption\n * \n * @param   {String|Uint8Array} encrypted \n * @param   {String|Uint8Array} nonce \n * @param   {String|Uint8Array} secret\n * @param   {Boolean}           asString (optional) Default: `true`\n */\nvar secretBoxDecrypt = function secretBoxDecrypt(encrypted, nonce, secret) {\n  var asString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var decrypt = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").secretbox.open);\n  var decrypted = decrypt((0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(encrypted), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(nonce), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(secret));\n  return !asString ? decrypted : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.u8aToStr)(decrypted);\n};\n\n/**\n * @name    naclEncrypt\n * @summary encrypt a message using TweetNaclJS SecretBox (AKA "secret key") encryption.\n *          All strings in the params are expected to be valid hex.\n * \n * @param   {String|Uint8Array} message message to encrypt\n * @param   {String|Uint8Array} secret  32 bytes secret key (hex or bytes array)\n * @param   {String|Uint8Array} nonce   (optional) if falsy, a new nonce will be generated\n * @param   {Boolean}           asHex   (optional) whether to return encrypted message as bytes or hex string\n *                                      Default: true\n * \n * @returns {Object}    `{ encrypted, nonce }`\n */\nvar secretBoxEncrypt = function secretBoxEncrypt(message, secret, nonce) {\n  var asHex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  nonce = nonce || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.newNonce)(false); // generate new nonce\n  var encrypt = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").secretbox);\n  var result = encrypt((0,_convert__WEBPACK_IMPORTED_MODULE_0__.strToU8a)(message), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(nonce), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(secret));\n  if (!result) return result;\n  return {\n    encrypted: asHex ? (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(result) : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(result),\n    nonce: asHex ? (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(nonce) : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(nonce)\n  };\n};\n\n/**\n * @name    secretBoxKeyFromPW\n * @summary generates a TweetNacl SecretBox compatible secret key (hex string) from supplied seed/password\n * \n * @param   {String}    password\n * \n * @returns {String}    hex string\n */\nvar secretBoxKeyFromPW = function secretBoxKeyFromPW(password) {\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.generateHash)(password, \'blake2\', 256 // DO NOT CHANGE\n  );\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  decrypt: secretBoxDecrypt,\n  encrypt: secretBoxEncrypt,\n  keyFromPW: secretBoxKeyFromPW\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvbmFjbEhlbHBlci9zZWNyZXRCb3guanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUttQjtBQUNvQjtBQUNMOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNTSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFJQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFzQjtFQUFBLElBQXBCQyxRQUFRLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7RUFDdEUsSUFBTUcsT0FBTyxHQUFHQyw2RUFBbUM7RUFDbkQsSUFBTUcsU0FBUyxHQUFHSixPQUFPLENBQ3JCYixvREFBVSxDQUFDTSxTQUFTLENBQUMsRUFDckJOLG9EQUFVLENBQUNPLEtBQUssQ0FBQyxFQUNqQlAsb0RBQVUsQ0FBQ1EsTUFBTSxDQUNyQixDQUFDO0VBQ0QsT0FBTyxDQUFDQyxRQUFRLEdBQ1ZRLFNBQVMsR0FDVGhCLGtEQUFRLENBQUNnQixTQUFTLENBQUM7QUFDN0IsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUlDLE9BQU8sRUFBRVgsTUFBTSxFQUFFRCxLQUFLLEVBQW1CO0VBQUEsSUFBakJhLEtBQUssR0FBQVYsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtFQUNqRUgsS0FBSyxHQUFHQSxLQUFLLElBQUlILGdEQUFRLENBQUMsS0FBSyxDQUFDLEVBQUM7RUFDakMsSUFBTWlCLE9BQU8sR0FBR1Asd0VBQThCO0VBQzlDLElBQU1RLE1BQU0sR0FBR0QsT0FBTyxDQUNsQm5CLGtEQUFRLENBQUNpQixPQUFPLENBQUMsRUFDakJuQixvREFBVSxDQUFDTyxLQUFLLENBQUMsRUFDakJQLG9EQUFVLENBQUNRLE1BQU0sQ0FDckIsQ0FBQztFQUNELElBQUksQ0FBQ2MsTUFBTSxFQUFFLE9BQU9BLE1BQU07RUFFMUIsT0FBTztJQUNIaEIsU0FBUyxFQUFFYyxLQUFLLEdBQ1ZyQixvREFBVSxDQUFDdUIsTUFBTSxDQUFDLEdBQ2xCdEIsb0RBQVUsQ0FBQ3NCLE1BQU0sQ0FBQztJQUN4QmYsS0FBSyxFQUFFYSxLQUFLLEdBQ05yQixvREFBVSxDQUFDUSxLQUFLLENBQUMsR0FDakJQLG9EQUFVLENBQUNPLEtBQUs7RUFDMUIsQ0FBQztBQUNMLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1nQixrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFHQyxRQUFRO0VBQUEsT0FBSXJCLG9EQUFZLENBQ3REcUIsUUFBUSxFQUNSLFFBQVEsRUFDUixHQUFHLENBQUU7RUFDVCxDQUFDO0FBQUE7O0FBRUQsaUVBQWU7RUFDWFgsT0FBTyxFQUFFUixnQkFBZ0I7RUFDekJnQixPQUFPLEVBQUVILGdCQUFnQjtFQUN6Qk8sU0FBUyxFQUFFRjtBQUNmLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL25hY2xIZWxwZXIvc2VjcmV0Qm94LmpzPzFmYmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBieXRlc1RvSGV4LFxuICAgIGhleFRvQnl0ZXMsXG4gICAgdThhVG9TdHIsXG4gICAgc3RyVG9VOGEsXG59IGZyb20gJy4uL2NvbnZlcnQnXG5pbXBvcnQgeyBnZW5lcmF0ZUhhc2ggfSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7IG5ld05vbmNlIH0gZnJvbSAnLi91dGlscydcblxuLyoqXG4gKiBAbmFtZSAgICBuYWNsRGVjcnlwdFxuICogQHN1bW1hcnkgZGVjcnlwdCBhbiBtZXNzYWdlIHRoYXQgd2FzIGVuY3J5dHBlZCB1c2luZyBUd2VldE5hY2xKUyBTZWNyZXRCb3ggKEFLQSBcInNlY3JldCBrZXlcIikgZW5jcnlwdGlvblxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IGVuY3J5cHRlZCBcbiAqIEBwYXJhbSAgIHtTdHJpbmd8VWludDhBcnJheX0gbm9uY2UgXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHNlY3JldFxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgICAgICAgICBhc1N0cmluZyAob3B0aW9uYWwpIERlZmF1bHQ6IGB0cnVlYFxuICovXG5leHBvcnQgY29uc3Qgc2VjcmV0Qm94RGVjcnlwdCA9IChlbmNyeXB0ZWQsIG5vbmNlLCBzZWNyZXQsIGFzU3RyaW5nID0gdHJ1ZSkgPT4ge1xuICAgIGNvbnN0IGRlY3J5cHQgPSByZXF1aXJlKCd0d2VldG5hY2wnKS5zZWNyZXRib3gub3BlblxuICAgIGNvbnN0IGRlY3J5cHRlZCA9IGRlY3J5cHQoXG4gICAgICAgIGhleFRvQnl0ZXMoZW5jcnlwdGVkKSxcbiAgICAgICAgaGV4VG9CeXRlcyhub25jZSksXG4gICAgICAgIGhleFRvQnl0ZXMoc2VjcmV0KSxcbiAgICApXG4gICAgcmV0dXJuICFhc1N0cmluZ1xuICAgICAgICA/IGRlY3J5cHRlZFxuICAgICAgICA6IHU4YVRvU3RyKGRlY3J5cHRlZClcbn1cblxuLyoqXG4gKiBAbmFtZSAgICBuYWNsRW5jcnlwdFxuICogQHN1bW1hcnkgZW5jcnlwdCBhIG1lc3NhZ2UgdXNpbmcgVHdlZXROYWNsSlMgU2VjcmV0Qm94IChBS0EgXCJzZWNyZXQga2V5XCIpIGVuY3J5cHRpb24uXG4gKiAgICAgICAgICBBbGwgc3RyaW5ncyBpbiB0aGUgcGFyYW1zIGFyZSBleHBlY3RlZCB0byBiZSB2YWxpZCBoZXguXG4gKiBcbiAqIEBwYXJhbSAgIHtTdHJpbmd8VWludDhBcnJheX0gbWVzc2FnZSBtZXNzYWdlIHRvIGVuY3J5cHRcbiAqIEBwYXJhbSAgIHtTdHJpbmd8VWludDhBcnJheX0gc2VjcmV0ICAzMiBieXRlcyBzZWNyZXQga2V5IChoZXggb3IgYnl0ZXMgYXJyYXkpXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IG5vbmNlICAgKG9wdGlvbmFsKSBpZiBmYWxzeSwgYSBuZXcgbm9uY2Ugd2lsbCBiZSBnZW5lcmF0ZWRcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgICAgICAgICAgYXNIZXggICAob3B0aW9uYWwpIHdoZXRoZXIgdG8gcmV0dXJuIGVuY3J5cHRlZCBtZXNzYWdlIGFzIGJ5dGVzIG9yIGhleCBzdHJpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiB0cnVlXG4gKiBcbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgIGB7IGVuY3J5cHRlZCwgbm9uY2UgfWBcbiAqL1xuZXhwb3J0IGNvbnN0IHNlY3JldEJveEVuY3J5cHQgPSAobWVzc2FnZSwgc2VjcmV0LCBub25jZSwgYXNIZXggPSB0cnVlKSA9PiB7XG4gICAgbm9uY2UgPSBub25jZSB8fCBuZXdOb25jZShmYWxzZSkgLy8gZ2VuZXJhdGUgbmV3IG5vbmNlXG4gICAgY29uc3QgZW5jcnlwdCA9IHJlcXVpcmUoJ3R3ZWV0bmFjbCcpLnNlY3JldGJveFxuICAgIGNvbnN0IHJlc3VsdCA9IGVuY3J5cHQoXG4gICAgICAgIHN0clRvVThhKG1lc3NhZ2UpLFxuICAgICAgICBoZXhUb0J5dGVzKG5vbmNlKSxcbiAgICAgICAgaGV4VG9CeXRlcyhzZWNyZXQpLFxuICAgIClcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIHJlc3VsdFxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5jcnlwdGVkOiBhc0hleFxuICAgICAgICAgICAgPyBieXRlc1RvSGV4KHJlc3VsdClcbiAgICAgICAgICAgIDogaGV4VG9CeXRlcyhyZXN1bHQpLFxuICAgICAgICBub25jZTogYXNIZXhcbiAgICAgICAgICAgID8gYnl0ZXNUb0hleChub25jZSlcbiAgICAgICAgICAgIDogaGV4VG9CeXRlcyhub25jZSksXG4gICAgfVxufVxuXG4vKipcbiAqIEBuYW1lICAgIHNlY3JldEJveEtleUZyb21QV1xuICogQHN1bW1hcnkgZ2VuZXJhdGVzIGEgVHdlZXROYWNsIFNlY3JldEJveCBjb21wYXRpYmxlIHNlY3JldCBrZXkgKGhleCBzdHJpbmcpIGZyb20gc3VwcGxpZWQgc2VlZC9wYXNzd29yZFxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSAgICBwYXNzd29yZFxuICogXG4gKiBAcmV0dXJucyB7U3RyaW5nfSAgICBoZXggc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNyZXRCb3hLZXlGcm9tUFcgPSBwYXNzd29yZCA9PiBnZW5lcmF0ZUhhc2goXG4gICAgcGFzc3dvcmQsXG4gICAgJ2JsYWtlMicsXG4gICAgMjU2LCAvLyBETyBOT1QgQ0hBTkdFXG4pXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkZWNyeXB0OiBzZWNyZXRCb3hEZWNyeXB0LFxuICAgIGVuY3J5cHQ6IHNlY3JldEJveEVuY3J5cHQsXG4gICAga2V5RnJvbVBXOiBzZWNyZXRCb3hLZXlGcm9tUFcsXG59Il0sIm5hbWVzIjpbImJ5dGVzVG9IZXgiLCJoZXhUb0J5dGVzIiwidThhVG9TdHIiLCJzdHJUb1U4YSIsImdlbmVyYXRlSGFzaCIsIm5ld05vbmNlIiwic2VjcmV0Qm94RGVjcnlwdCIsImVuY3J5cHRlZCIsIm5vbmNlIiwic2VjcmV0IiwiYXNTdHJpbmciLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJkZWNyeXB0IiwicmVxdWlyZSIsInNlY3JldGJveCIsIm9wZW4iLCJkZWNyeXB0ZWQiLCJzZWNyZXRCb3hFbmNyeXB0IiwibWVzc2FnZSIsImFzSGV4IiwiZW5jcnlwdCIsInJlc3VsdCIsInNlY3JldEJveEtleUZyb21QVyIsInBhc3N3b3JkIiwia2V5RnJvbVBXIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/secretBox.js\n')},"./src/utils/naclHelper/sign.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "newSignature": () => (/* binding */ newSignature),\n/* harmony export */   "randomKeypair": () => (/* binding */ randomKeypair),\n/* harmony export */   "signingKeyPair": () => (/* binding */ signingKeyPair),\n/* harmony export */   "verifySignature": () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/naclHelper/utils.js");\n\n\n\n/**\n * @name    newSignature\n * @summary generate a new detached signature using keypair and a message\n * \n * @param   {String}    message \n * @param   {String}    secretKey   \n * @param   {Boolean}   asHex       (optional) Default: true\n * \n * @returns {String|Uint8Array} String Hex if `asHex = true`, otherwise, Uint8Array\n */\nvar newSignature = function newSignature(message, secretKey) {\n  var asHex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var signature = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").sign.detached)((0,_convert__WEBPACK_IMPORTED_MODULE_0__.strToU8a)(message), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(secretKey));\n  return !asHex ? signature : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(signature);\n};\n\n/**\n * @name    randomKeypair\n * @summary generate a random signing keypair\n * \n * @param   {Boolean}   asHex   (optional) Default: `true`\n * \n * @returns {Object}    `{ publicKey, secretKey }`\n */\nvar randomKeypair = function randomKeypair() {\n  var asHex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var keyPair = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").sign.keyPair);\n  var pair = keyPair();\n  return !asHex ? pair : {\n    publicKey: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pair.publicKey),\n    secretKey: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pair.secretKey)\n  };\n};\n\n/**\n * @name    signingKeyPair\n * @summary generate TweetNacl signing keypair using `keyData` (oo7-substrate) or `encoded` (PolkadotJS) hex string.\n * \n * @param   {String|Uint8Array} keyData \n * @param   {Boolean}           asHex   (optional) Default: true\n * \n * @returns {Object}            `{ publicKey, secretKey }`\n */\nvar signingKeyPair = function signingKeyPair(keyData) {\n  var asHex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var bytes = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.keyDataFromEncoded)(keyData);\n  var _require = __webpack_require__("./node_modules/blakejs/index.js"),\n    blake2b = _require.blake2b;\n  var fromSeed = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").sign.keyPair.fromSeed);\n  var pair = fromSeed(blake2b(bytes, null, 32));\n  return !asHex ? pair : {\n    publicKey: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pair.publicKey),\n    secretKey: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pair.secretKey)\n  };\n};\n\n/**\n * @name    verifySignature\n * @summary verify a detached signature\n *\n * @param   {String|Uint8Array} message \n * @param   {String|Uint8Array} signature\n * @param   {String|Uint8Array} publicKey\n *\n * @returns {Boolean}\n */\nvar verifySignature = function verifySignature(message, signature, publicKey) {\n  var verify = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").sign.detached.verify);\n  return verify((0,_convert__WEBPACK_IMPORTED_MODULE_0__.strToU8a)(message), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(signature), (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(publicKey));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  keypairFromEncoded: signingKeyPair,\n  randomKeypair: randomKeypair,\n  signDetached: newSignature,\n  verifyDetached: verifySignature\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL25hY2xIZWxwZXIvc2lnbi5qcz81MTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgYnl0ZXNUb0hleCxcbiAgICBoZXhUb0J5dGVzLFxuICAgIHN0clRvVThhLFxufSBmcm9tICcuLi9jb252ZXJ0J1xuaW1wb3J0IHsga2V5RGF0YUZyb21FbmNvZGVkIH0gZnJvbSAnLi91dGlscydcblxuLyoqXG4gKiBAbmFtZSAgICBuZXdTaWduYXR1cmVcbiAqIEBzdW1tYXJ5IGdlbmVyYXRlIGEgbmV3IGRldGFjaGVkIHNpZ25hdHVyZSB1c2luZyBrZXlwYWlyIGFuZCBhIG1lc3NhZ2VcbiAqIFxuICogQHBhcmFtICAge1N0cmluZ30gICAgbWVzc2FnZSBcbiAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgIHNlY3JldEtleSAgIFxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgYXNIZXggICAgICAgKG9wdGlvbmFsKSBEZWZhdWx0OiB0cnVlXG4gKiBcbiAqIEByZXR1cm5zIHtTdHJpbmd8VWludDhBcnJheX0gU3RyaW5nIEhleCBpZiBgYXNIZXggPSB0cnVlYCwgb3RoZXJ3aXNlLCBVaW50OEFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBuZXdTaWduYXR1cmUgPSAobWVzc2FnZSwgc2VjcmV0S2V5LCBhc0hleCA9IHRydWUpID0+IHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSByZXF1aXJlKCd0d2VldG5hY2wnKS5zaWduLmRldGFjaGVkKFxuICAgICAgICBzdHJUb1U4YShtZXNzYWdlKSxcbiAgICAgICAgaGV4VG9CeXRlcyhzZWNyZXRLZXkpLFxuICAgIClcbiAgICByZXR1cm4gIWFzSGV4XG4gICAgICAgID8gc2lnbmF0dXJlXG4gICAgICAgIDogYnl0ZXNUb0hleChzaWduYXR1cmUpXG59XG5cbi8qKlxuICogQG5hbWUgICAgcmFuZG9tS2V5cGFpclxuICogQHN1bW1hcnkgZ2VuZXJhdGUgYSByYW5kb20gc2lnbmluZyBrZXlwYWlyXG4gKiBcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgIGFzSGV4ICAgKG9wdGlvbmFsKSBEZWZhdWx0OiBgdHJ1ZWBcbiAqIFxuICogQHJldHVybnMge09iamVjdH0gICAgYHsgcHVibGljS2V5LCBzZWNyZXRLZXkgfWBcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmRvbUtleXBhaXIgPSAoYXNIZXggPSB0cnVlKSA9PiB7XG4gICAgY29uc3QgeyBrZXlQYWlyIH0gPSByZXF1aXJlKCd0d2VldG5hY2wnKS5zaWduXG4gICAgY29uc3QgcGFpciA9IGtleVBhaXIoKVxuICAgIHJldHVybiAhYXNIZXhcbiAgICAgICAgPyBwYWlyXG4gICAgICAgIDoge1xuICAgICAgICAgICAgcHVibGljS2V5OiBieXRlc1RvSGV4KHBhaXIucHVibGljS2V5KSxcbiAgICAgICAgICAgIHNlY3JldEtleTogYnl0ZXNUb0hleChwYWlyLnNlY3JldEtleSksXG4gICAgICAgIH1cbn1cblxuLyoqXG4gKiBAbmFtZSAgICBzaWduaW5nS2V5UGFpclxuICogQHN1bW1hcnkgZ2VuZXJhdGUgVHdlZXROYWNsIHNpZ25pbmcga2V5cGFpciB1c2luZyBga2V5RGF0YWAgKG9vNy1zdWJzdHJhdGUpIG9yIGBlbmNvZGVkYCAoUG9sa2Fkb3RKUykgaGV4IHN0cmluZy5cbiAqIFxuICogQHBhcmFtICAge1N0cmluZ3xVaW50OEFycmF5fSBrZXlEYXRhIFxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgICAgICAgICBhc0hleCAgIChvcHRpb25hbCkgRGVmYXVsdDogdHJ1ZVxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgICAgICAgICAgIGB7IHB1YmxpY0tleSwgc2VjcmV0S2V5IH1gXG4gKi9cbmV4cG9ydCBjb25zdCBzaWduaW5nS2V5UGFpciA9IChrZXlEYXRhLCBhc0hleCA9IHRydWUpID0+IHtcbiAgICBjb25zdCBieXRlcyA9IGtleURhdGFGcm9tRW5jb2RlZChrZXlEYXRhKVxuICAgIGNvbnN0IHsgYmxha2UyYiB9ID0gcmVxdWlyZSgnYmxha2VqcycpXG4gICAgY29uc3QgeyBmcm9tU2VlZCB9ID0gcmVxdWlyZSgndHdlZXRuYWNsJykuc2lnbi5rZXlQYWlyXG4gICAgY29uc3QgcGFpciA9IGZyb21TZWVkKGJsYWtlMmIoYnl0ZXMsIG51bGwsIDMyKSlcbiAgICByZXR1cm4gIWFzSGV4XG4gICAgICAgID8gcGFpclxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogYnl0ZXNUb0hleChwYWlyLnB1YmxpY0tleSksXG4gICAgICAgICAgICBzZWNyZXRLZXk6IGJ5dGVzVG9IZXgocGFpci5zZWNyZXRLZXkpLFxuICAgICAgICB9XG59XG5cbi8qKlxuICogQG5hbWUgICAgdmVyaWZ5U2lnbmF0dXJlXG4gKiBAc3VtbWFyeSB2ZXJpZnkgYSBkZXRhY2hlZCBzaWduYXR1cmVcbiAqXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IG1lc3NhZ2UgXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IHNpZ25hdHVyZVxuICogQHBhcmFtICAge1N0cmluZ3xVaW50OEFycmF5fSBwdWJsaWNLZXlcbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHZlcmlmeVNpZ25hdHVyZSA9IChtZXNzYWdlLCBzaWduYXR1cmUsIHB1YmxpY0tleSkgPT4ge1xuICAgIGNvbnN0IHsgdmVyaWZ5IH0gPSByZXF1aXJlKCd0d2VldG5hY2wnKS5zaWduLmRldGFjaGVkXG4gICAgcmV0dXJuIHZlcmlmeShcbiAgICAgICAgc3RyVG9VOGEobWVzc2FnZSksXG4gICAgICAgIGhleFRvQnl0ZXMoc2lnbmF0dXJlKSxcbiAgICAgICAgaGV4VG9CeXRlcyhwdWJsaWNLZXkpLFxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGtleXBhaXJGcm9tRW5jb2RlZDogc2lnbmluZ0tleVBhaXIsXG4gICAgcmFuZG9tS2V5cGFpcixcbiAgICBzaWduRGV0YWNoZWQ6IG5ld1NpZ25hdHVyZSxcbiAgICB2ZXJpZnlEZXRhY2hlZDogdmVyaWZ5U2lnbmF0dXJlLFxufSJdLCJuYW1lcyI6WyJieXRlc1RvSGV4IiwiaGV4VG9CeXRlcyIsInN0clRvVThhIiwia2V5RGF0YUZyb21FbmNvZGVkIiwibmV3U2lnbmF0dXJlIiwibWVzc2FnZSIsInNlY3JldEtleSIsImFzSGV4IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic2lnbmF0dXJlIiwicmVxdWlyZSIsInNpZ24iLCJkZXRhY2hlZCIsInJhbmRvbUtleXBhaXIiLCJrZXlQYWlyIiwicGFpciIsInB1YmxpY0tleSIsInNpZ25pbmdLZXlQYWlyIiwia2V5RGF0YSIsImJ5dGVzIiwiX3JlcXVpcmUiLCJibGFrZTJiIiwiZnJvbVNlZWQiLCJ2ZXJpZnlTaWduYXR1cmUiLCJ2ZXJpZnkiLCJrZXlwYWlyRnJvbUVuY29kZWQiLCJzaWduRGV0YWNoZWQiLCJ2ZXJpZnlEZXRhY2hlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/sign.js\n')},"./src/utils/naclHelper/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "keyDataFromEncoded": () => (/* binding */ keyDataFromEncoded),\n/* harmony export */   "keyInfoFromKeyData": () => (/* binding */ keyInfoFromKeyData),\n/* harmony export */   "newNonce": () => (/* binding */ newNonce),\n/* harmony export */   "randomBytes": () => (/* binding */ randomBytes)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n/**\n * @name    keyDataFromEncoded\n * @summary converts PolkadotJS keyring\'s `encoded` hex string to oo7-substrate style `keyData`, if required\n * \n * @param   {String|Uint8Array} encoded hex string or bytes array. (Encoded: 117 bytes, KeyData: 96 bytes)\n * @param   {Boolean}           asHex   (optional) Default: false\n * \n * @returns Uint8Array/String\n */\nvar keyDataFromEncoded = function keyDataFromEncoded(encoded) {\n  var asHex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // convert to Uint8Array if required\n  encoded = (0,_convert__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(encoded);\n\n  // Convert PolkadotJS keyring\'s `encoded` to oo7-substrate `keyData`\n  if (encoded.length > 96) {\n    encoded = new Uint8Array([].concat(_toConsumableArray(encoded.slice(16, 80)), _toConsumableArray(encoded.slice(85))));\n  }\n  return !asHex ? encoded : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(encoded);\n};\n\n/**\n * @name    keyInfoFromKeyData\n * @summary generates keypair and Polkadot address from encoded or keyData.\n * @description FYI: the generated keypair is not an encryption or signing keypair.\n * \n * @param   {String|Uint8Array} keyData \n * @param   {Number}            ss58Format (optional) use to generate address for any supported parachain identity.\n *                                         Default: undefined (Substrate)\n * @param   {Boolean}           asHex      (optional) if true, will convert `publicKey` and `secretKey` to hex string.\n *                                         Otherwise, will leave as Uint8Array.\n *                                         Default: false\n * \n * @returns {Object}    { address, publicKey, secretKey }\n */\nvar keyInfoFromKeyData = function keyInfoFromKeyData() {\n  var keyData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n  var ss58Format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var asHex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var bytes = keyDataFromEncoded(keyData, false);\n  var publicKey = bytes.slice(64, 96);\n  var secretKey = bytes.slice(0, 64);\n  return {\n    address: (0,_convert__WEBPACK_IMPORTED_MODULE_0__.ss58Encode)(publicKey, ss58Format),\n    publicKey: asHex ? (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(publicKey) : publicKey,\n    secretKey: asHex ? (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(secretKey) : secretKey\n  };\n};\n\n/**\n * @name    newNonce\n * @summary generate a new random 24 bytes nonce\n * \n * @param   {Boolean}   (optional) Default: true\n * \n * @returns {Uint8Array|String}\n */\nvar newNonce = function newNonce() {\n  var asHex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return randomBytes(24, asHex);\n};\n\n/**\n * @name    randomBytes\n * @summary generate random bytes for use as nonce or bytes for keypair generation\n * \n * @param   {Number} length \n * @param   {Boolean} asHex \n * \n * @returns {Uint8Array|String}\n * \n * @example\n * ```javascript\n * // generate random bytes to be used to generate encryption or signing keypair\n * const keyData = randomBytes(96, true)  // equivalent to oo7-substrate\'s `keyData`\n * const encryptKP = encryptionKeypair(keyData, true)\n * console.log({ keyData, encryptKP })\n * \n * const encoded = randomBytes(117) // equivalent to PolkadotJS keyring\'s `encoded`\n * const signKP = signingKeyPair(encoded, true)\n * console.log({ encoded, signKP})\n * ```\n */\nvar randomBytes = function randomBytes(length) {\n  var asHex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var bytes = (__webpack_require__("./node_modules/tweetnacl/nacl-fast.js").randomBytes)(length);\n  return !asHex ? bytes : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(bytes);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  keyDataFromEncoded: keyDataFromEncoded,\n  keyInfoFromKeyData: keyInfoFromKeyData,\n  newNonce: newNonce,\n  randomBytes: randomBytes\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSTtFQUM1QyxJQUFNVSxLQUFLLEdBQUdNLDBFQUFnQyxDQUFDZixNQUFNLENBQUM7RUFDdEQsT0FBTyxDQUFDRixLQUFLLEdBQ1BXLEtBQUssR0FDTGhCLG9EQUFVLENBQUNnQixLQUFLLENBQUM7QUFDM0IsQ0FBQztBQUVELGlFQUFlO0VBQ1hiLGtCQUFrQixFQUFsQkEsa0JBQWtCO0VBQ2xCVSxrQkFBa0IsRUFBbEJBLGtCQUFrQjtFQUNsQk8sUUFBUSxFQUFSQSxRQUFRO0VBQ1JDLFdBQVcsRUFBWEE7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9uYWNsSGVscGVyL3V0aWxzLmpzPzk5MzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBieXRlc1RvSGV4LFxuICAgIGhleFRvQnl0ZXMsXG4gICAgc3M1OEVuY29kZSxcbn0gZnJvbSAnLi4vY29udmVydCdcblxuLyoqXG4gKiBAbmFtZSAgICBrZXlEYXRhRnJvbUVuY29kZWRcbiAqIEBzdW1tYXJ5IGNvbnZlcnRzIFBvbGthZG90SlMga2V5cmluZydzIGBlbmNvZGVkYCBoZXggc3RyaW5nIHRvIG9vNy1zdWJzdHJhdGUgc3R5bGUgYGtleURhdGFgLCBpZiByZXF1aXJlZFxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfFVpbnQ4QXJyYXl9IGVuY29kZWQgaGV4IHN0cmluZyBvciBieXRlcyBhcnJheS4gKEVuY29kZWQ6IDExNyBieXRlcywgS2V5RGF0YTogOTYgYnl0ZXMpXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICAgICAgICAgIGFzSGV4ICAgKG9wdGlvbmFsKSBEZWZhdWx0OiBmYWxzZVxuICogXG4gKiBAcmV0dXJucyBVaW50OEFycmF5L1N0cmluZ1xuICovXG5leHBvcnQgY29uc3Qga2V5RGF0YUZyb21FbmNvZGVkID0gKGVuY29kZWQsIGFzSGV4ID0gZmFsc2UpID0+IHtcbiAgICAvLyBjb252ZXJ0IHRvIFVpbnQ4QXJyYXkgaWYgcmVxdWlyZWRcbiAgICBlbmNvZGVkID0gaGV4VG9CeXRlcyhlbmNvZGVkKVxuXG4gICAgLy8gQ29udmVydCBQb2xrYWRvdEpTIGtleXJpbmcncyBgZW5jb2RlZGAgdG8gb283LXN1YnN0cmF0ZSBga2V5RGF0YWBcbiAgICBpZiAoZW5jb2RlZC5sZW5ndGggPiA5Nikge1xuICAgICAgICBlbmNvZGVkID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAgICAgLi4uZW5jb2RlZC5zbGljZSgxNiwgODApLFxuICAgICAgICAgICAgLi4uZW5jb2RlZC5zbGljZSg4NSlcbiAgICAgICAgXSlcbiAgICB9XG4gICAgcmV0dXJuICFhc0hleFxuICAgICAgICA/IGVuY29kZWRcbiAgICAgICAgOiBieXRlc1RvSGV4KGVuY29kZWQpXG59XG5cbi8qKlxuICogQG5hbWUgICAga2V5SW5mb0Zyb21LZXlEYXRhXG4gKiBAc3VtbWFyeSBnZW5lcmF0ZXMga2V5cGFpciBhbmQgUG9sa2Fkb3QgYWRkcmVzcyBmcm9tIGVuY29kZWQgb3Iga2V5RGF0YS5cbiAqIEBkZXNjcmlwdGlvbiBGWUk6IHRoZSBnZW5lcmF0ZWQga2V5cGFpciBpcyBub3QgYW4gZW5jcnlwdGlvbiBvciBzaWduaW5nIGtleXBhaXIuXG4gKiBcbiAqIEBwYXJhbSAgIHtTdHJpbmd8VWludDhBcnJheX0ga2V5RGF0YSBcbiAqIEBwYXJhbSAgIHtOdW1iZXJ9ICAgICAgICAgICAgc3M1OEZvcm1hdCAob3B0aW9uYWwpIHVzZSB0byBnZW5lcmF0ZSBhZGRyZXNzIGZvciBhbnkgc3VwcG9ydGVkIHBhcmFjaGFpbiBpZGVudGl0eS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiB1bmRlZmluZWQgKFN1YnN0cmF0ZSlcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgICAgICAgICAgYXNIZXggICAgICAob3B0aW9uYWwpIGlmIHRydWUsIHdpbGwgY29udmVydCBgcHVibGljS2V5YCBhbmQgYHNlY3JldEtleWAgdG8gaGV4IHN0cmluZy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdGhlcndpc2UsIHdpbGwgbGVhdmUgYXMgVWludDhBcnJheS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBmYWxzZVxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgICB7IGFkZHJlc3MsIHB1YmxpY0tleSwgc2VjcmV0S2V5IH1cbiAqL1xuZXhwb3J0IGNvbnN0IGtleUluZm9Gcm9tS2V5RGF0YSA9IChrZXlEYXRhID0gJycsIHNzNThGb3JtYXQgPSB1bmRlZmluZWQsIGFzSGV4ID0gZmFsc2UpID0+IHtcbiAgICBsZXQgYnl0ZXMgPSBrZXlEYXRhRnJvbUVuY29kZWQoa2V5RGF0YSwgZmFsc2UpXG4gICAgY29uc3QgcHVibGljS2V5ID0gYnl0ZXMuc2xpY2UoNjQsIDk2KVxuICAgIGNvbnN0IHNlY3JldEtleSA9IGJ5dGVzLnNsaWNlKDAsIDY0KVxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZHJlc3M6IHNzNThFbmNvZGUocHVibGljS2V5LCBzczU4Rm9ybWF0KSxcbiAgICAgICAgcHVibGljS2V5OiBhc0hleFxuICAgICAgICAgICAgPyBieXRlc1RvSGV4KHB1YmxpY0tleSlcbiAgICAgICAgICAgIDogcHVibGljS2V5LFxuICAgICAgICBzZWNyZXRLZXk6IGFzSGV4XG4gICAgICAgICAgICA/IGJ5dGVzVG9IZXgoc2VjcmV0S2V5KVxuICAgICAgICAgICAgOiBzZWNyZXRLZXlcbiAgICB9XG59XG5cbi8qKlxuICogQG5hbWUgICAgbmV3Tm9uY2VcbiAqIEBzdW1tYXJ5IGdlbmVyYXRlIGEgbmV3IHJhbmRvbSAyNCBieXRlcyBub25jZVxuICogXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICAob3B0aW9uYWwpIERlZmF1bHQ6IHRydWVcbiAqIFxuICogQHJldHVybnMge1VpbnQ4QXJyYXl8U3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgbmV3Tm9uY2UgPSAoYXNIZXggPSB0cnVlKSA9PiByYW5kb21CeXRlcygyNCwgYXNIZXgpXG5cbi8qKlxuICogQG5hbWUgICAgcmFuZG9tQnl0ZXNcbiAqIEBzdW1tYXJ5IGdlbmVyYXRlIHJhbmRvbSBieXRlcyBmb3IgdXNlIGFzIG5vbmNlIG9yIGJ5dGVzIGZvciBrZXlwYWlyIGdlbmVyYXRpb25cbiAqIFxuICogQHBhcmFtICAge051bWJlcn0gbGVuZ3RoIFxuICogQHBhcmFtICAge0Jvb2xlYW59IGFzSGV4IFxuICogXG4gKiBAcmV0dXJucyB7VWludDhBcnJheXxTdHJpbmd9XG4gKiBcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBnZW5lcmF0ZSByYW5kb20gYnl0ZXMgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBlbmNyeXB0aW9uIG9yIHNpZ25pbmcga2V5cGFpclxuICogY29uc3Qga2V5RGF0YSA9IHJhbmRvbUJ5dGVzKDk2LCB0cnVlKSAgLy8gZXF1aXZhbGVudCB0byBvbzctc3Vic3RyYXRlJ3MgYGtleURhdGFgXG4gKiBjb25zdCBlbmNyeXB0S1AgPSBlbmNyeXB0aW9uS2V5cGFpcihrZXlEYXRhLCB0cnVlKVxuICogY29uc29sZS5sb2coeyBrZXlEYXRhLCBlbmNyeXB0S1AgfSlcbiAqIFxuICogY29uc3QgZW5jb2RlZCA9IHJhbmRvbUJ5dGVzKDExNykgLy8gZXF1aXZhbGVudCB0byBQb2xrYWRvdEpTIGtleXJpbmcncyBgZW5jb2RlZGBcbiAqIGNvbnN0IHNpZ25LUCA9IHNpZ25pbmdLZXlQYWlyKGVuY29kZWQsIHRydWUpXG4gKiBjb25zb2xlLmxvZyh7IGVuY29kZWQsIHNpZ25LUH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmRvbUJ5dGVzID0gKGxlbmd0aCwgYXNIZXggPSB0cnVlKSA9PiB7XG4gICAgY29uc3QgYnl0ZXMgPSByZXF1aXJlKCd0d2VldG5hY2wnKS5yYW5kb21CeXRlcyhsZW5ndGgpXG4gICAgcmV0dXJuICFhc0hleFxuICAgICAgICA/IGJ5dGVzXG4gICAgICAgIDogYnl0ZXNUb0hleChieXRlcylcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGtleURhdGFGcm9tRW5jb2RlZCxcbiAgICBrZXlJbmZvRnJvbUtleURhdGEsXG4gICAgbmV3Tm9uY2UsXG4gICAgcmFuZG9tQnl0ZXMsXG59Il0sIm5hbWVzIjpbImJ5dGVzVG9IZXgiLCJoZXhUb0J5dGVzIiwic3M1OEVuY29kZSIsImtleURhdGFGcm9tRW5jb2RlZCIsImVuY29kZWQiLCJhc0hleCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIlVpbnQ4QXJyYXkiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzbGljZSIsImtleUluZm9Gcm9tS2V5RGF0YSIsImtleURhdGEiLCJzczU4Rm9ybWF0IiwiYnl0ZXMiLCJwdWJsaWNLZXkiLCJzZWNyZXRLZXkiLCJhZGRyZXNzIiwibmV3Tm9uY2UiLCJyYW5kb21CeXRlcyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/naclHelper/utils.js\n')},"./src/utils/number.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"formatNumber\": () => (/* binding */ formatNumber),\n/* harmony export */   \"round\": () => (/* binding */ round),\n/* harmony export */   \"shorten\": () => (/* binding */ shorten)\n/* harmony export */ });\n/**\n * @name\tformatNumber\n * @summary formats number to locale while keeping the specified decimals\n * \n * @param\t{Number}\tvalue \n * @param\t{Number}\tdecimals\t(optional) number of decimal places\n * @param\t{String}\tlocale\t\t(optional) 2 letter country code\n * \t\t\t\t\t\t\t\t\tDefault: system default\n * @param\t{String}\tseparator\t(optional) decimal separator.\n * \t\t\t\t\t\t\t\t\tDefault: system default \n * \n * @returns {String}\n */\nvar formatNumber = function formatNumber(value, decimals, locale, separator) {\n  separator = separator || 1.1.toLocaleString(locale).replace(/[0-9]/g, '');\n  var int = parseInt(value);\n  var reminder = Math.abs(value - int);\n  var reminderX = reminder;\n  if (reminder > 0) {\n    reminder = separator + \"\".concat(reminder).split('.')[1];\n    reminder = decimals === 0 ? '' : decimals > 0 ? reminder.slice(0, decimals + 1) : reminder;\n  } else {\n    reminder = '';\n  }\n  return \"\".concat(int.toLocaleString(locale)).concat(reminder);\n};\n\n/**\n * @name\tround\n * @summary rounds a number to a fixed decimal places and avoids unintentional use of exponents\n * \n * @param\t{Number}\tvalue \n * @param\t{Number}\tdecimals \n * \n * @returns {String}\n */\nvar round = function round() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  value = Number(value);\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals).toFixed(decimals);\n};\n\n/**\n * @name\tshorten\n * @summary formats number in short form. Eg: converts `1000` to `\"1K\"`\n * \n * @param\t{Number} value \n * @param\t{Number} decimals\tDefault: `0`\n * \n * @returns {String}\n */\nvar shorten = function shorten(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var label = '';\n  var divider = 1;\n  if (value < 1e3) {\n    divider = 1;\n    label = '';\n  } else if (value >= 1e9) {\n    // billion\n    divider = 1e9;\n    label = 'B';\n  } else if (value >= 1e6) {\n    // million\n    divider = 1e6;\n    label = 'M';\n  } else if (value >= 1e3) {\n    // thousand\n    divider = 1e3;\n    label = 'K';\n  }\n  value = round(value / divider, decimals);\n  return \"\".concat(value).concat(label);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFO0lBQ3hCO0lBQ0F1QixPQUFPLEdBQUcsR0FBRztJQUNiRCxLQUFLLEdBQUcsR0FBRztFQUNaO0VBQ0F0QixLQUFLLEdBQUdlLEtBQUssQ0FBQ2YsS0FBSyxHQUFHdUIsT0FBTyxFQUFFdEIsUUFBUSxDQUFDO0VBQ3hDLFVBQUFXLE1BQUEsQ0FBVVosS0FBSyxFQUFBWSxNQUFBLENBQUdVLEtBQUs7QUFDeEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvbnVtYmVyLmpzPzdmMjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbmFtZVx0Zm9ybWF0TnVtYmVyXG4gKiBAc3VtbWFyeSBmb3JtYXRzIG51bWJlciB0byBsb2NhbGUgd2hpbGUga2VlcGluZyB0aGUgc3BlY2lmaWVkIGRlY2ltYWxzXG4gKiBcbiAqIEBwYXJhbVx0e051bWJlcn1cdHZhbHVlIFxuICogQHBhcmFtXHR7TnVtYmVyfVx0ZGVjaW1hbHNcdChvcHRpb25hbCkgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBAcGFyYW1cdHtTdHJpbmd9XHRsb2NhbGVcdFx0KG9wdGlvbmFsKSAyIGxldHRlciBjb3VudHJ5IGNvZGVcbiAqIFx0XHRcdFx0XHRcdFx0XHRcdERlZmF1bHQ6IHN5c3RlbSBkZWZhdWx0XG4gKiBAcGFyYW1cdHtTdHJpbmd9XHRzZXBhcmF0b3JcdChvcHRpb25hbCkgZGVjaW1hbCBzZXBhcmF0b3IuXG4gKiBcdFx0XHRcdFx0XHRcdFx0XHREZWZhdWx0OiBzeXN0ZW0gZGVmYXVsdCBcbiAqIFxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdE51bWJlciA9ICh2YWx1ZSwgZGVjaW1hbHMsIGxvY2FsZSwgc2VwYXJhdG9yKSA9PiB7XG5cdHNlcGFyYXRvciA9IHNlcGFyYXRvciB8fCAoMS4xKS50b0xvY2FsZVN0cmluZyhsb2NhbGUpLnJlcGxhY2UoL1swLTldL2csICcnKVxuXHRjb25zdCBpbnQgPSBwYXJzZUludCh2YWx1ZSlcblx0bGV0IHJlbWluZGVyID0gTWF0aC5hYnModmFsdWUgLSBpbnQpXG5cdGNvbnN0IHJlbWluZGVyWCA9IHJlbWluZGVyXG5cdGlmIChyZW1pbmRlciA+IDApIHtcblx0XHRyZW1pbmRlciA9IHNlcGFyYXRvciArIGAke3JlbWluZGVyfWAuc3BsaXQoJy4nKVsxXVxuXHRcdHJlbWluZGVyID0gZGVjaW1hbHMgPT09IDBcblx0XHRcdD8gJydcblx0XHRcdDogZGVjaW1hbHMgPiAwXG5cdFx0XHRcdD8gcmVtaW5kZXIuc2xpY2UoMCwgZGVjaW1hbHMgKyAxKVxuXHRcdFx0XHQ6IHJlbWluZGVyXG5cdH0gZWxzZSB7XG5cdFx0cmVtaW5kZXIgPSAnJ1xuXHR9XG5cdHJldHVybiBgJHtpbnQudG9Mb2NhbGVTdHJpbmcobG9jYWxlKX0ke3JlbWluZGVyfWBcbn1cblxuLyoqXG4gKiBAbmFtZVx0cm91bmRcbiAqIEBzdW1tYXJ5IHJvdW5kcyBhIG51bWJlciB0byBhIGZpeGVkIGRlY2ltYWwgcGxhY2VzIGFuZCBhdm9pZHMgdW5pbnRlbnRpb25hbCB1c2Ugb2YgZXhwb25lbnRzXG4gKiBcbiAqIEBwYXJhbVx0e051bWJlcn1cdHZhbHVlIFxuICogQHBhcmFtXHR7TnVtYmVyfVx0ZGVjaW1hbHMgXG4gKiBcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCByb3VuZCA9ICh2YWx1ZSA9IDAsIGRlY2ltYWxzID0gMCkgPT4ge1xuXHR2YWx1ZSA9IE51bWJlcih2YWx1ZSlcblx0cmV0dXJuIE51bWJlcihNYXRoLnJvdW5kKHZhbHVlICsgJ2UnICsgZGVjaW1hbHMpICsgJ2UtJyArIGRlY2ltYWxzKS50b0ZpeGVkKGRlY2ltYWxzKVxufVxuXG4vKipcbiAqIEBuYW1lXHRzaG9ydGVuXG4gKiBAc3VtbWFyeSBmb3JtYXRzIG51bWJlciBpbiBzaG9ydCBmb3JtLiBFZzogY29udmVydHMgYDEwMDBgIHRvIGBcIjFLXCJgXG4gKiBcbiAqIEBwYXJhbVx0e051bWJlcn0gdmFsdWUgXG4gKiBAcGFyYW1cdHtOdW1iZXJ9IGRlY2ltYWxzXHREZWZhdWx0OiBgMGBcbiAqIFxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IHNob3J0ZW4gPSAodmFsdWUsIGRlY2ltYWxzID0gMCkgPT4ge1xuXHRsZXQgbGFiZWwgPSAnJ1xuXHRsZXQgZGl2aWRlciA9IDFcblx0aWYgKHZhbHVlIDwgMWUzKSB7XG5cdFx0ZGl2aWRlciA9IDFcblx0XHRsYWJlbCA9ICcnXG5cdH0gZWxzZSBpZiAodmFsdWUgPj0gMWU5KSB7XG5cdFx0Ly8gYmlsbGlvblxuXHRcdGRpdmlkZXIgPSAxZTlcblx0XHRsYWJlbCA9ICdCJ1xuXHR9IGVsc2UgaWYgKHZhbHVlID49IDFlNikge1xuXHRcdC8vIG1pbGxpb25cblx0XHRkaXZpZGVyID0gMWU2XG5cdFx0bGFiZWwgPSAnTSdcblx0fSBlbHNlIGlmICh2YWx1ZSA+PSAxZTMpIHtcblx0XHQvLyB0aG91c2FuZFxuXHRcdGRpdmlkZXIgPSAxZTNcblx0XHRsYWJlbCA9ICdLJ1xuXHR9XG5cdHZhbHVlID0gcm91bmQodmFsdWUgLyBkaXZpZGVyLCBkZWNpbWFscylcblx0cmV0dXJuIGAke3ZhbHVlfSR7bGFiZWx9YFxufSJdLCJuYW1lcyI6WyJmb3JtYXROdW1iZXIiLCJ2YWx1ZSIsImRlY2ltYWxzIiwibG9jYWxlIiwic2VwYXJhdG9yIiwidG9Mb2NhbGVTdHJpbmciLCJyZXBsYWNlIiwiaW50IiwicGFyc2VJbnQiLCJyZW1pbmRlciIsIk1hdGgiLCJhYnMiLCJyZW1pbmRlclgiLCJjb25jYXQiLCJzcGxpdCIsInNsaWNlIiwicm91bmQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwic2hvcnRlbiIsImxhYmVsIiwiZGl2aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/number.js\n")},"./src/utils/polkadotHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "connect": () => (/* binding */ connect),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "getTxFee": () => (/* binding */ getTxFee),\n/* harmony export */   "keyring": () => (/* binding */ keyring),\n/* harmony export */   "query": () => (/* binding */ query),\n/* harmony export */   "sanitise": () => (/* binding */ sanitise),\n/* harmony export */   "setDefaultConfig": () => (/* binding */ setDefaultConfig),\n/* harmony export */   "signAndSend": () => (/* binding */ signAndSend),\n/* harmony export */   "transfer": () => (/* binding */ transfer)\n/* harmony export */ });\n/* harmony import */ var _polkadot_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@polkadot/api/index.js");\n/* harmony import */ var _polkadot_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polkadot_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _polkadot_keyring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/@polkadot/keyring/index.js");\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\nvar TYPE = \'sr25519\';\nvar _keyring = new _polkadot_keyring__WEBPACK_IMPORTED_MODULE_1__["default"]({\n  type: TYPE\n});\nvar isNode = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isNodeJS)();\nvar config = {\n  nodes: [],\n  timeout: 30000,\n  types: {},\n  // minimum required amount in TOTEM to create a transation.\n  // This is a temporary solution until upgraded to PolkadotJS V2.\n  // 140 TOTEM for a simple transaction.\n  // 1 TOTEM for existential balance.\n  txFeeMin: 141,\n  // unused/deprecated\n  errorMsgs: {\n    connectionFailed: \'Connection failed\',\n    connectionTimeout: \'Connection timeout\',\n    invalidApi: \'ApiPromise instance required\',\n    invalidApiFunc: \'Invalid API function\',\n    invalidMutliArgsMsg: \'Failed to process arguments for multi-query\'\n  }\n};\nvar nonces = {};\n\n/**\n * @name    connect\n * @summary initiates a connection to the blockchain using PolkadotJS \n * \n * @param   {String}    nodeUrl \n * @param   {Object}    types       custom type definitions\n * @param   {Boolean}   autoConnect whether to auto reconnect or create an once-off connection\n * @param   {Number}    timeout     connection timeout duration in milliseconds\n * \n * @returns {Object}    { api, keyring, provider }\n *                  - will resolve to an object: { api, provider}\n *                  - will reject to either a @err: string or object (if object use @message property for error message)\n *                  - will reject if connection fails as well as times out\n */\nvar connect = function connect() {\n  var nodeUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : config.nodes[0];\n  var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.types;\n  var autoConnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : config.timeout;\n  return new Promise(function (resolve, reject) {\n    var timeoutMsg = config.errorMsgs.connectionTimeout;\n    var failedMsg = config.errorMsgs.connectionFailed;\n    var provider = new _polkadot_api__WEBPACK_IMPORTED_MODULE_0__.WsProvider(nodeUrl, autoConnect);\n    if (!autoConnect) provider.connect();\n    // auto reject if doesn\'t connect within specified duration\n    var tId = setTimeout(function () {\n      return !provider.isConnected() && reject(timeoutMsg);\n    }, timeout);\n    // reject if connection fails\n    provider.websocket.onerror = function (err) {\n      // console.log(failedMsg, err)\n      clearTimeout(tId);\n      provider.disconnect();\n      reject(failedMsg);\n    };\n    // instantiate the Polkadot API using the provider and supplied types\n    _polkadot_api__WEBPACK_IMPORTED_MODULE_0__.ApiPromise.create({\n      provider: provider,\n      types: types\n    }).then(function (api) {\n      return resolve({\n        api: api,\n        keyring: keyring,\n        provider: provider\n      }) | clearTimeout(tId);\n    }, reject);\n  });\n};\n\n/**\n * @name    setDefaultConfig\n * @summary sets default config (node URL, type definitions etc) for use connections, \n *          unless explicitly provided in the `connect` function.\n * \n * @param   {Array}     nodes \n * @param   {Object}    types \n * @param   {Number}    timeout \n * @param   {Object}    errorMsgs \n * \n * @returns {Object}\n */\nvar setDefaultConfig = function setDefaultConfig(nodes, types, timeout) {\n  var errorMsgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  config.nodes = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr)(nodes) ? nodes : config.nodes;\n  config.types = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(types) ? types : config.types;\n  config.timeout = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isValidNumber)(timeout) && timeout > 0 ? timeout : config.timeout;\n  config.errorMsgs = _objectSpread(_objectSpread({}, config.errorMsgs), errorMsgs);\n  return config;\n};\n\n/**\n * @name        getTxFee\n * @summary     estimate transaction fee for a specific transaction \n * @description `feeBase` and `feePerbyte` should already be set using `setDefaultConfig()`. \n *              Otherwise, value `1` will be used for both.\n * \n * @param   {ApiPromise}    api        PolkadotJS API instance\n * @param   {String}        address    identity that the @tx is going to be used iwth\n * @param   {TxRx}          tx         transaction to estimate the fee of\n * @param   {String}        uri        (optional) required if address is not already in the keyring\n * \n * @returns {Number}    estimated transaction fee\n */\nvar getTxFee = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(api, address, tx, uri) {\n    var account, _yield$query, _yield$query2, nonce, creationFee, baseFee, byteFee, existentialDeposit, signedHex, numBytes;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!keyring.contains(address)) keyring.add([uri]);\n          account = _keyring.getPair(address);\n          _context.next = 4;\n          return query(api, api.queryMulti, [[[api.query.system.accountNonce, address], [api.query.balances.creationFee], [api.query.balances.transactionBaseFee], [api.query.balances.transactionByteFee], [api.query.balances.existentialDeposit]]]);\n        case 4:\n          _yield$query = _context.sent;\n          _yield$query2 = _slicedToArray(_yield$query, 5);\n          nonce = _yield$query2[0];\n          creationFee = _yield$query2[1];\n          baseFee = _yield$query2[2];\n          byteFee = _yield$query2[3];\n          existentialDeposit = _yield$query2[4];\n          _context.t0 = sanitise;\n          _context.next = 14;\n          return tx.sign(account, {\n            nonce: nonce\n          });\n        case 14:\n          _context.t1 = _context.sent;\n          signedHex = (0, _context.t0)(_context.t1);\n          numBytes = signedHex.length / 2 - 1;\n          return _context.abrupt("return", existentialDeposit + creationFee + baseFee + byteFee * numBytes);\n        case 18:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getTxFee(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar keyring = {\n  // add pair(s) to keyring \n  //\n  // Params:\n  // @seeds   array: uri/seed\n  add: function add() {\n    var seeds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return seeds.map(function (seed) {\n      try {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isUint8Arr)(seed)) {\n          seed = (0,_convert__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(seed);\n        } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(seed) && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.objHasKeys)(seed, [\'secretKey\', \'publicKey\'])) {\n          // const { secretKey, publicKey } = seed\n          // const pair = createPair(TYPE, { secretKey, publicKey })\n          // return _keyring.addPair(pair)\n          throw new Error(\'createPair has been removed from @polkadot/keyring exports! Use seed/uri instead.\');\n        }\n        return _keyring.addFromUri(seed);\n      } catch (error) {\n        console.log(\'Failed to add seed to keyring\', error);\n      }\n    });\n  },\n  // contains checks if identity exists in the keyring\n  //\n  // Params:\n  // @address string/Uint8Array\n  //\n  // Returns boolean\n  contains: function contains(address) {\n    return !!keyring.getPair(address);\n  },\n  getPair: function getPair(address) {\n    try {\n      // test if @secretKey is an address already added to the keyring\n      return _keyring.getPair(address);\n    } catch (_) {}\n  },\n  // reference to the keyring\n  keyring: _keyring,\n  // remove a pair from the keyring\n  //\n  // Params:\n  // @address     string/Uint8Array\n  // \n  // returns boolean: indicates success/failure\n  remove: function remove(address) {\n    return keyring.contains(address) && !_keyring.removePair(address);\n  }\n};\n\n/**\n * @name    query\n * @summary Make storage API calls using PolkadotJS. All values returned will be sanitised.\n * \n * @param   {ApiRx}           api   API instance created using PolkadotJS or `connect` function\n * @param   {String|Function} func  path to the PolkadotJS API function as a string. Eg: \'api.rpc.system.health\'\n * @param   {Array}           args  (optional) arguments to be supplied when invoking the API function.\n *                                  To subscribe to the API supply a callback function as the last item in the array.\n * @param   {Boolean}         multi (optional) indicates `funcs` is a multi-query (and `func` !== \'api.query.multi\')\n * @param   {Boolean}         print (optional) whether to print output to console\n * \n * @returns {Function|*}      If callback is supplied in `args`, will return the function to unsubscribe.\n *                            Otherwise, result of the query will be returned\n */\nvar query = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(api, func) {\n    var args,\n      multi,\n      print,\n      isApiValid,\n      fn,\n      cb,\n      isSubscribe,\n      printResult,\n      len,\n      interceptor,\n      result,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          args = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : [];\n          multi = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : false;\n          print = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : false;\n          isApiValid = api instanceof _polkadot_api__WEBPACK_IMPORTED_MODULE_0__.ApiPromise;\n          if (isApiValid) {\n            _context2.next = 6;\n            break;\n          }\n          throw new Error(config.errorMsgs.invalidApi);\n        case 6:\n          if (func) {\n            _context2.next = 8;\n            break;\n          }\n          return _context2.abrupt("return", api);\n        case 8:\n          // add .multi if required\n          if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(func) && multi && !func.endsWith(\'.multi\')) func += \'.multi\';\n          fn = eval(func);\n          if (fn) {\n            _context2.next = 12;\n            break;\n          }\n          throw new Error("".concat(config.errorMsgs.invalidApiFunc, ": ").concat(func));\n        case 12:\n          args = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr)(args) || !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isDefined)(args) ? args : [args];\n          multi = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(fn) && !!multi;\n          cb = args[args.length - 1];\n          isSubscribe = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(cb) && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(fn);\n          printResult = function printResult(result) {\n            return print && console.log(result, (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(func) && func || undefined);\n          };\n          if (isSubscribe) {\n            // only add interceptor to process result\n            args[args.length - 1] = function (result) {\n              var sanitised = sanitise(result);\n              printResult(sanitised);\n              cb(sanitised, result);\n            };\n          }\n\n          // For multi query arguments needs to be constructs as 2D Array.\n          // If only one argument in @args is supplied, assume that it is a 2D array.\n          // Otherwise, construct a 2D array as required by \n          len = isSubscribe ? 2 : 1;\n          if (!(multi && !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(args[0]) && args.length > len)) {\n            _context2.next = 29;\n            break;\n          }\n          _context2.prev = 20;\n          // remove subscription callback before processing arguments\n\n          if (isSubscribe) {\n            interceptor = args.slice(-1)[0];\n            args = args.slice(0, -1);\n          }\n          // construct a 2D array\n          args = !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr2D)(args) ? [args] : [args[0].map(function (_, i) {\n            return args.map(function (ar) {\n              return ar[i];\n            });\n          })];\n          // re-add subscription callback\n          if (isSubscribe) args.push(interceptor);\n          _context2.next = 29;\n          break;\n        case 26:\n          _context2.prev = 26;\n          _context2.t0 = _context2["catch"](20);\n          throw "".concat(config.errorMsgs.invalidMutliArgsMsg, " ").concat(_context2.t0);\n        case 29:\n          if (!(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(fn)) {\n            _context2.next = 35;\n            break;\n          }\n          _context2.next = 32;\n          return fn.apply(null, args);\n        case 32:\n          _context2.t1 = _context2.sent;\n          _context2.next = 36;\n          break;\n        case 35:\n          _context2.t1 = fn;\n        case 36:\n          result = _context2.t1;\n          result = isSubscribe ? result : sanitise(result);\n          !isSubscribe && printResult(result);\n          return _context2.abrupt("return", result);\n        case 40:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[20, 26]]);\n  }));\n  return function query(_x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar sanitise = function sanitise(x) {\n  return JSON.parse(JSON.stringify(x));\n}; // get rid of jargon\n\n/**\n * @name    signAndSend\n * @summary sign and send an already instantiated transaction\n * \n * @param   {ApiRx}   api       API instance created using PolkadotJS or @connect()\n * @param   {String}  address   Account holder identity\n * @param   {TxRx}    tx        An already instantiated transaction created using the @api\n * @param   {Number}  nonce     Next unused nonce to be used for the transaction\n * @param   {Subject} rxStatus  RxJS Subject to update the UI on status changes, if required\n * \n * @returns {Array}   [blockHash, eventsArr]\n */\nvar signAndSend = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(api, address, tx, nonce, rxStatus, tag) {\n    var account;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          account = _keyring.getPair(address);\n          if (nonce) {\n            _context4.next = 7;\n            break;\n          }\n          _context4.next = 4;\n          return query(api, api.query.system.accountNonce, address);\n        case 4:\n          nonce = _context4.sent;\n          if (nonces[address] && nonces[address] >= nonce) {\n            nonce = nonces[address] + 1;\n          }\n          nonces[address] = nonce;\n        case 7:\n          console.log(\'Totem Blockchain: initiating transation\', tag, {\n            nonce: nonce\n          });\n          _context4.next = 10;\n          return new Promise( /*#__PURE__*/function () {\n            var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {\n              var signed;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return tx.sign(account, {\n                      nonce: nonce\n                    });\n                  case 3:\n                    signed = _context3.sent;\n                    _context3.next = 6;\n                    return signed.send(function (result) {\n                      var events = result.events,\n                        status = result.status;\n                      var isFuture = status.type !== \'Future\';\n                      var hash = \'\';\n                      console.log(\'Totem Blockchain: Transaction status\', tag, status.type);\n\n                      // notify\n                      rxStatus && rxStatus.next(result);\n\n                      // status.type = \'Future\' means transaction will be executed in the future. \n                      // there is a transaction in the pool that hasn\'t finished execution. \n                      if (!status.isFinalized && isFuture) return;\n                      try {\n                        // if status is "Future" block hash is not assigned yet!\n                        hash = status.asFinalized.toHex();\n                      } catch (e) {} // ignore error\n\n                      // Extract custom errors from events\n                      var eventErrors = events.map(function (_ref5) {\n                        var event = _ref5.event;\n                        if (!"".concat(event.method).startsWith(\'Error\')) return;\n                        var msg = (sanitise(event.meta).documentation || []).join(\' \');\n                        return "".concat(event.method, " (").concat(event.section, "): ").concat(msg);\n                      }).filter(Boolean);\n                      if (eventErrors.length > 0) {\n                        console.log(\'Totem Blockchain: Transaction failed!\', tag, {\n                          blockHash: hash,\n                          eventErrors: eventErrors\n                        });\n                        return reject(eventErrors.join(\' | \'));\n                      }\n                      var eventsArr = sanitise(events).map(function (x, i) {\n                        return _objectSpread(_objectSpread({}, x.event), {}, {\n                          method: events[i].event.method,\n                          section: events[i].event.section\n                        });\n                      })\n                      // exclude empty event data\n                      .filter(function (event) {\n                        return event.data && event.data.length;\n                      }) || {};\n                      console.log("Totem Blockchain: Completed at block hash: ".concat(hash), tag, isNode ? \'\' : {\n                        eventsArr: eventsArr\n                      });\n                      rxStatus && rxStatus.complete();\n                      resolve([hash, eventsArr]);\n                    });\n                  case 6:\n                    _context3.next = 11;\n                    break;\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3["catch"](0);\n                    reject(_context3.t0);\n                  case 11:\n                  case "end":\n                    return _context3.stop();\n                }\n              }, _callee3, null, [[0, 8]]);\n            }));\n            return function (_x13, _x14) {\n              return _ref4.apply(this, arguments);\n            };\n          }());\n        case 10:\n          return _context4.abrupt("return", _context4.sent);\n        case 11:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function signAndSend(_x7, _x8, _x9, _x10, _x11, _x12) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * @name    transfer\n * @summary transfer funds between accounts\n * \n * @param   {string} toAddress \n * @param   {Number} amount \n * @param   {string} secretKey    One of the three: address or secretKey or seed (type: \'sr25519\').\n *                                If address, must have already been added to keyring.\n * @param   {object} publicKey    If falsy, `secretkey` will be assumed to be a seed or an address  \n * @param   {ApiRx} api           PolkadkRingot API from `ApiPromise`\n * \n * @returns {Array}   [blockHash, eventsArr]\n */\nvar transfer = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(toAddress, amount, secretKey, publicKey, api) {\n    var res, pair, sender, tx;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          throw new Error(\'Deprecated\');\n        case 4:\n          _context5.next = 6;\n          return connect(config.nodes[0], config.types, false);\n        case 6:\n          res = _context5.sent;\n          api = res.api;\n          console.log(\'Polkadot connected\', res);\n        case 9:\n          if (!!publicKey) {\n            // public and private key supplied\n            pair = createPair(TYPE, {\n              secretKey: secretKey,\n              publicKey: publicKey\n            });\n            _keyring.addPair(pair);\n          } else {\n            try {\n              // test if @secretKey is an address already added to the keyring\n              pair = _keyring.getPair(secretKey);\n            } catch (_) {\n              // assumes @secretKey is a seed/uri\n              pair = _keyring.addFromUri(secretKey);\n            }\n          }\n          sender = _keyring.getPair(pair.address);\n          console.log(\'Polkadot: transfer to \', {\n            address: toAddress,\n            amount: amount\n          });\n          _context5.next = 14;\n          return api.tx.balances.transfer(toAddress, amount);\n        case 14:\n          tx = _context5.sent;\n          _context5.next = 17;\n          return signAndSend(api, sender.address, tx);\n        case 17:\n          return _context5.abrupt("return", _context5.sent);\n        case 18:\n        case "end":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return function transfer(_x15, _x16, _x17, _x18, _x19) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  keyring: keyring,\n  connect: connect,\n  getTxFee: getTxFee,\n  query: query,\n  sanitise: sanitise,\n  setDefaultConfig: setDefaultConfig,\n  signAndSend: signAndSend,\n  transfer: transfer\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/polkadotHelper.js\n')},"./src/utils/reactHelper.js":()=>{eval("// `reactHelper.js` has been moved into `reactjs` directory (frontend only) and `rx.js` file\n// export * from './reactjs'//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3RIZWxwZXIuanMuanMiLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0SGVscGVyLmpzP2VhODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYHJlYWN0SGVscGVyLmpzYCBoYXMgYmVlbiBtb3ZlZCBpbnRvIGByZWFjdGpzYCBkaXJlY3RvcnkgKGZyb250ZW5kIG9ubHkpIGFuZCBgcnguanNgIGZpbGVcbi8vIGV4cG9ydCAqIGZyb20gJy4vcmVhY3RqcyciXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactHelper.js\n")},"./src/utils/reactjs/RecursiveShapeType.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RecursiveShapeType\": () => (/* binding */ RecursiveShapeType),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * @name    RecursiveShapeType\n * @summary custom PropType for recursive shape validation\n *\n * @param   {Object}    propsTypes      property types of the shape (using PropTypes)\n * @param   {String}    recursiveKey    property that should be recursive.\n *                                      Default: 'children'\n *\n * @example\n * ```javascript\n * import PropTypes from 'prop-types'\n *\n * const ExampleComponent = (props) => { console.log({props}) }\n * ExampleComponent.propTypes = {\n *    items: PropTypes.arrayOf(RecursiveShapeType({\n *        // define shape properties here\n *        value: PropTypes.number.isRequired,\n *        // 'items' property will be automatically added\n *    }, 'items'))\n * }\n *\n * const childItems = [\n *    { value: 4 },\n *    { value: 5 },\n * ]\n * const items = [\n *   { value: 1 },\n *   { value: 2 },\n *   { value: 3, items: childItems },\n * ]\n * const el = <ExampleComponent items={items} />\n * ```\n */\nvar RecursiveShapeType = function RecursiveShapeType() {\n  var propsTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var recursiveKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';\n  propsTypes[recursiveKey] = prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(Type);\n  function Type() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape(propsTypes).apply(null, args);\n  }\n  return Type;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecursiveShapeType);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9SZWN1cnNpdmVTaGFwZVR5cGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFBLEVBQW1EO0VBQUEsSUFBL0NDLFVBQVUsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBQUEsSUFBRUcsWUFBWSxHQUFBSCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxVQUFVO0VBQ3pFRCxVQUFVLENBQUNJLFlBQVksQ0FBQyxHQUFHTix5REFBaUIsQ0FBQ1EsSUFBSSxDQUFDO0VBQ2xELFNBQVNBLElBQUlBLENBQUEsRUFBVTtJQUFBLFNBQUFDLElBQUEsR0FBQU4sU0FBQSxDQUFBQyxNQUFBLEVBQU5NLElBQUksT0FBQUMsS0FBQSxDQUFBRixJQUFBLEdBQUFHLElBQUEsTUFBQUEsSUFBQSxHQUFBSCxJQUFBLEVBQUFHLElBQUE7TUFBSkYsSUFBSSxDQUFBRSxJQUFBLElBQUFULFNBQUEsQ0FBQVMsSUFBQTtJQUFBO0lBQ2pCLE9BQU9aLHVEQUNHLENBQUNFLFVBQVUsQ0FBQyxDQUNqQlksS0FBSyxDQUFDLElBQUksRUFBRUosSUFBSSxDQUFDO0VBQzFCO0VBQ0EsT0FBT0YsSUFBSTtBQUNmLENBQUM7QUFFRCxpRUFBZVAsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL1JlY3Vyc2l2ZVNoYXBlVHlwZS5qcz85ZTMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbi8qKlxuICogQG5hbWUgICAgUmVjdXJzaXZlU2hhcGVUeXBlXG4gKiBAc3VtbWFyeSBjdXN0b20gUHJvcFR5cGUgZm9yIHJlY3Vyc2l2ZSBzaGFwZSB2YWxpZGF0aW9uXG4gKlxuICogQHBhcmFtICAge09iamVjdH0gICAgcHJvcHNUeXBlcyAgICAgIHByb3BlcnR5IHR5cGVzIG9mIHRoZSBzaGFwZSAodXNpbmcgUHJvcFR5cGVzKVxuICogQHBhcmFtICAge1N0cmluZ30gICAgcmVjdXJzaXZlS2V5ICAgIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIHJlY3Vyc2l2ZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiAnY2hpbGRyZW4nXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbiAqXG4gKiBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKHByb3BzKSA9PiB7IGNvbnNvbGUubG9nKHtwcm9wc30pIH1cbiAqIEV4YW1wbGVDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICogICAgaXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFJlY3Vyc2l2ZVNoYXBlVHlwZSh7XG4gKiAgICAgICAgLy8gZGVmaW5lIHNoYXBlIHByb3BlcnRpZXMgaGVyZVxuICogICAgICAgIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gKiAgICAgICAgLy8gJ2l0ZW1zJyBwcm9wZXJ0eSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgYWRkZWRcbiAqICAgIH0sICdpdGVtcycpKVxuICogfVxuICpcbiAqIGNvbnN0IGNoaWxkSXRlbXMgPSBbXG4gKiAgICB7IHZhbHVlOiA0IH0sXG4gKiAgICB7IHZhbHVlOiA1IH0sXG4gKiBdXG4gKiBjb25zdCBpdGVtcyA9IFtcbiAqICAgeyB2YWx1ZTogMSB9LFxuICogICB7IHZhbHVlOiAyIH0sXG4gKiAgIHsgdmFsdWU6IDMsIGl0ZW1zOiBjaGlsZEl0ZW1zIH0sXG4gKiBdXG4gKiBjb25zdCBlbCA9IDxFeGFtcGxlQ29tcG9uZW50IGl0ZW1zPXtpdGVtc30gLz5cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgUmVjdXJzaXZlU2hhcGVUeXBlID0gKHByb3BzVHlwZXMgPSB7fSwgcmVjdXJzaXZlS2V5ID0gJ2NoaWxkcmVuJykgPT4ge1xuICAgIHByb3BzVHlwZXNbcmVjdXJzaXZlS2V5XSA9IFByb3BUeXBlcy5hcnJheU9mKFR5cGUpXG4gICAgZnVuY3Rpb24gVHlwZSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBQcm9wVHlwZXNcbiAgICAgICAgICAgIC5zaGFwZShwcm9wc1R5cGVzKVxuICAgICAgICAgICAgLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgfVxuICAgIHJldHVybiBUeXBlXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlY3Vyc2l2ZVNoYXBlVHlwZSJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWN1cnNpdmVTaGFwZVR5cGUiLCJwcm9wc1R5cGVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicmVjdXJzaXZlS2V5IiwiYXJyYXlPZiIsIlR5cGUiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInNoYXBlIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/reactjs/RecursiveShapeType.js\n")},"./src/utils/reactjs/components/Button.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Button": () => (/* binding */ Button),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");\nvar _excluded = ["Component"];\nvar _templateObject;\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\nvar BasicButton = styled_components__WEBPACK_IMPORTED_MODULE_1__/* .styled.button */ .zo.button(_templateObject || (_templateObject = _taggedTemplateLiteral(["", ""])), function (props) {\n  var _props$style;\n  return "\\nbackground: ".concat(((_props$style = props.style) === null || _props$style === void 0 ? void 0 : _props$style.background) || {\n    info: \'grey\',\n    error: \'rgb(243 74 74)\',\n    success: \'rgb(72 184 72)\',\n    warn: \'orange\'\n  }[props.status] || \'grey\', ";\\nborder: none;\\nborder-radius: 3px;\\ncolor: white;\\nmargin: 3px;\\npadding: 10px 20px;\\n\\n&:not(:hover):not(:focus) {\\n    opacity: 0.9;\\n}\\n");\n});\nvar Button = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (_ref) {\n  var Component = _ref.Component,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, props);\n});\nButton.defaultProps = {\n  Component: BasicButton\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Button);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL0J1dHRvbi5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF5QjtBQUNpQjtBQUUxQyxJQUFNRSxXQUFXLEdBQUdELDZFQUFhLENBQUFHLGVBQUEsS0FBQUEsZUFBQSxHQUFBQyxzQkFBQSxhQUFHLFVBQUFDLEtBQUs7RUFBQSxJQUFBQyxZQUFBO0VBQUEsd0JBQUFDLE1BQUEsQ0FDM0IsRUFBQUQsWUFBQSxHQUFBRCxLQUFLLENBQUNHLEtBQUssY0FBQUYsWUFBQSx1QkFBWEEsWUFBQSxDQUFhRyxVQUFVLEtBQzlCO0lBQ0NDLElBQUksRUFBRSxNQUFNO0lBQ1pDLEtBQUssRUFBRSxnQkFBZ0I7SUFDdkJDLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekJDLElBQUksRUFBRTtFQUNWLENBQUMsQ0FBQ1IsS0FBSyxDQUFDUyxNQUFNLENBQUMsSUFDWixNQUFNO0FBQUEsQ0FVWixDQUFFO0FBRUksSUFBTUMsTUFBTSxnQkFBR2hCLGlEQUFVLENBQUMsVUFBQWtCLElBQUE7RUFBQSxJQUFHQyxTQUFTLEdBQUFELElBQUEsQ0FBVEMsU0FBUztJQUFLYixLQUFLLEdBQUFjLHdCQUFBLENBQUFGLElBQUEsRUFBQUcsU0FBQTtFQUFBLG9CQUNuRHJCLDBEQUFBLENBQUNtQixTQUFTLEVBQUtiLEtBQVEsQ0FBQztBQUFBLENBQzNCLENBQUM7QUFDRlUsTUFBTSxDQUFDTyxZQUFZLEdBQUc7RUFDbEJKLFNBQVMsRUFBRWpCO0FBQ2YsQ0FBQztBQUVELGlFQUFlYyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvQnV0dG9uLmpzeD83MTBkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBCYXNpY0J1dHRvbiA9IHN0eWxlZC5idXR0b25gJHtwcm9wcyA9PiBgXG5iYWNrZ3JvdW5kOiAke3Byb3BzLnN0eWxlPy5iYWNrZ3JvdW5kXG4gICAgfHwge1xuICAgICAgICBpbmZvOiAnZ3JleScsXG4gICAgICAgIGVycm9yOiAncmdiKDI0MyA3NCA3NCknLFxuICAgICAgICBzdWNjZXNzOiAncmdiKDcyIDE4NCA3MiknLFxuICAgICAgICB3YXJuOiAnb3JhbmdlJyxcbiAgICB9W3Byb3BzLnN0YXR1c11cbiAgICB8fCAnZ3JleSd9O1xuYm9yZGVyOiBub25lO1xuYm9yZGVyLXJhZGl1czogM3B4O1xuY29sb3I6IHdoaXRlO1xubWFyZ2luOiAzcHg7XG5wYWRkaW5nOiAxMHB4IDIwcHg7XG5cbiY6bm90KDpob3Zlcik6bm90KDpmb2N1cykge1xuICAgIG9wYWNpdHk6IDAuOTtcbn1cbmB9YFxuXG5leHBvcnQgY29uc3QgQnV0dG9uID0gUmVhY3QubWVtbygoeyBDb21wb25lbnQsIC4uLnByb3BzIH0pID0+IChcbiAgICA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz5cbikpXG5CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICAgIENvbXBvbmVudDogQmFzaWNCdXR0b24sXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbiJdLCJuYW1lcyI6WyJSZWFjdCIsInN0eWxlZCIsIkJhc2ljQnV0dG9uIiwiYnV0dG9uIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCIsInByb3BzIiwiX3Byb3BzJHN0eWxlIiwiY29uY2F0Iiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwiaW5mbyIsImVycm9yIiwic3VjY2VzcyIsIndhcm4iLCJzdGF0dXMiLCJCdXR0b24iLCJtZW1vIiwiX3JlZiIsIkNvbXBvbmVudCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsImNyZWF0ZUVsZW1lbnQiLCJkZWZhdWx0UHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/Button.jsx\n')},"./src/utils/reactjs/components/CharacterCount.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "CharacterCount": () => (/* binding */ CharacterCount),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _RxSubjectView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/RxSubjectView.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\nvar textsCap = {\n  maxLength: \'maximum length\',\n  minLength: \'minimum length\',\n  title: \'character count\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(textsCap, true);\n\n/**\n * @name    CharacterCount\n * @summary display and auto-update the character count of the (text/string) value of a RxJS subject.\n * \n * @param   {Object}      props\n * @param   {String}      props.color         (optional) default text color\n *                                            Default: \'grey\'\n * @param   {String}      props.colorError    (optional) text color if character count reached maximum or below minimum.\n *                                            Default: \'red\'\n * @param   {String}      props.colorWarn     (optional) text color when character count is between warn and max length.\n *                                            Default: \'orange\'\n * @param   {Boolean}     props.hideOnEmpty   (optional) whether to hide count if empty value (character count is 0).\n *                                            Default: false\n * @param   {Number}      props.maxLength     (optional) warn when value reaches maximum allowed length.\n *                                            Default: 0\n * @param   {Number}      props.minLength     (optional) warn when value is below minimum required length.\n *                                            Default: 0\n * @param   {Boolean}     props.show          (optional) control (default) visibility of counter externally.\n *                                            Default: true\n * @param   {Object}      props.style         (optional) CSS styles\n * @param   {SubjectLike} props.subject       RxJS subject containing the value.\n * @param   {Function}    props.valueModifier (optional)\n * @param   {Number}      props.warnLength    (optional) warn when character count reaches certain length but below max.\n *                                            Default: maxLength * 0.9\n * \n * @returns {Element}\n */\nvar CharacterCount = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (props) {\n  var colorOk = props.color,\n    colorError = props.colorError,\n    colorWarn = props.colorWarn,\n    hideOnEmpty = props.hideOnEmpty,\n    hideOnOk = props.hideOnOk,\n    inline = props.inline,\n    maxLength = props.maxLength,\n    minLength = props.minLength,\n    show = props.show,\n    style = props.style,\n    subject = props.subject,\n    valueModifier = props.valueModifier,\n    _props$warnLength = props.warnLength,\n    warnLength = _props$warnLength === void 0 ? parseInt(maxLength * 0.9) || 0 : _props$warnLength;\n  show = (0,_hooks__WEBPACK_IMPORTED_MODULE_3__.useRxSubjectOrValue)(show);\n  var modifier = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (value) {\n    var text = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(valueModifier) ? valueModifier(value) : value;\n    text = "".concat((0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasValue)(text) && text || \'\');\n    var len = text.length;\n    if (!len && hideOnEmpty) return \'\';\n    var isMin = len < minLength;\n    var isMax = len > maxLength;\n    var isWarn = warnLength && len >= warnLength;\n    var color = isMax || isMin ? colorError : isWarn ? colorWarn : colorOk;\n    if (hideOnOk && color === colorOk) return \'\';\n    var content = len;\n    if (maxLength) content = "".concat(len, "/").concat(maxLength);\n    var key = content + color + inline;\n    if (inline) content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", null, "\\xA0( ", content, " ) ");\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n      style: {\n        display: inline ? \'inline-block\' : \'block\',\n        key: key,\n        position: \'relative\'\n      }\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", _defineProperty({\n      key: key,\n      style: _objectSpread(_objectSpread({}, !inline && {\n        bottom: 0,\n        color: color,\n        fontWeight: \'bold\',\n        position: \'absolute\',\n        right: 18\n      }), style),\n      title: isMin ? "".concat(textsCap.minLength, ": ").concat(minLength) : textsCap.title\n    }, "title", [textsCap.title, isMin && "".concat(textsCap.minLength, ": ").concat(minLength), isWarn && "".concat(textsCap.maxLength, ": ").concat(maxLength)].filter(Boolean).join(\'\\n\')), content));\n  });\n  if (!show) return \'\';\n  return !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(subject) ? modifier(subject) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_RxSubjectView__WEBPACK_IMPORTED_MODULE_4__["default"], _objectSpread(_objectSpread({}, props), {}, {\n    subject: subject,\n    valueModifier: modifier\n  }));\n});\nCharacterCount.propTypes = {\n  color: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),\n  colorError: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),\n  colorWarn: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),\n  hideOnEmpty: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().bool),\n  initialValue: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().any),\n  // whether to display the counter inline or on the right side\n  inline: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().bool),\n  maxLength: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().number),\n  minLength: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().number),\n  show: prop_types__WEBPACK_IMPORTED_MODULE_5___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_5___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_6__/* .BehaviorSubject */ .X), (prop_types__WEBPACK_IMPORTED_MODULE_5___default().bool)]),\n  style: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().object),\n  subject: prop_types__WEBPACK_IMPORTED_MODULE_5___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_5___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_6__/* .BehaviorSubject */ .X), (prop_types__WEBPACK_IMPORTED_MODULE_5___default().any)]),\n  valueModifier: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().func),\n  warnLength: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().number)\n};\nCharacterCount.defaultProps = {\n  color: \'grey\',\n  colorError: \'red\',\n  colorWarn: \'orange\',\n  hideOnEmpty: true,\n  // maxLength: 0,\n  minLength: 0,\n  show: true\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CharacterCount);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/CharacterCount.jsx\n')},"./src/utils/reactjs/components/Grid.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Grid": () => (/* binding */ Grid),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/**\n * @name    Grid\n * @summary a simple container to create CSS `display:grid`\n * \n * @param   {*} props \n * \n * @returns {Element}\n * \n * @example ```javascript\n * \n * const rows = new Array(9)\n *  .fill(0)\n *  .map((_,i) => <div key={i}>{i}</div>})\n * const grid = <Grid children={rows} columns={3} />\n * ```\n */\nvar Grid = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (props) {\n  var children = props.children,\n    _props$columns = props.columns,\n    columns = _props$columns === void 0 ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(children) && children.length || 1 : _props$columns,\n    _props$Component = props.Component,\n    Component = _props$Component === void 0 ? \'div\' : _props$Component,\n    style = props.style;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _objectSpread(_objectSpread({}, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objWithoutKeys)(props, [\'columns\', \'Component\'])), {}, {\n    style: _objectSpread({\n      display: \'grid\',\n      gridGap: \'0 5px\',\n      gridAutoRows: \'auto\',\n      gridTemplateColumns: "repeat(".concat(columns, ", 1fr)")\n    }, style)\n  }));\n});\nvar StringOrNumber = prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().number)]);\nGrid.defaultProps = {\n  Component: \'div\'\n};\nGrid.propTypes = {\n  children: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().any),\n  // number of columns per row.\n  // if undefined, will use length of `children` (only when array)\n  columns: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().number),\n  Component: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().elementType),\n  // add extra styles or override grid layout\n  style: prop_types__WEBPACK_IMPORTED_MODULE_2___default().shape({\n    // default: \'grid\'\n    display: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string),\n    // will override `columns` prop.\n    // For details & examples: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\n    gridTemplateColumns: StringOrNumber,\n    // gap between cells (uses same format as padding/margin)\n    gridGap: StringOrNumber,\n    // Row height\n    // Default: \'auto\'\n    // For details & examples: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows\n    gridAutoRows: StringOrNumber\n    //...\n  })\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Grid);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL0dyaWQuanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUI7QUFDUztBQUNpQjs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNSSxJQUFJLGdCQUFHSixpREFBVSxDQUFDLFVBQUFNLEtBQUssRUFBSTtFQUNwQyxJQUNJQyxRQUFRLEdBSVJELEtBQUssQ0FKTEMsUUFBUTtJQUFBQyxjQUFBLEdBSVJGLEtBQUssQ0FITEcsT0FBTztJQUFQQSxPQUFPLEdBQUFELGNBQUEsY0FBR04sNkNBQUssQ0FBQ0ssUUFBUSxDQUFDLElBQUlBLFFBQVEsQ0FBQ0csTUFBTSxJQUFJLENBQUMsR0FBQUYsY0FBQTtJQUFBRyxnQkFBQSxHQUdqREwsS0FBSyxDQUZMTSxTQUFTO0lBQVRBLFNBQVMsR0FBQUQsZ0JBQUEsY0FBRyxLQUFLLEdBQUFBLGdCQUFBO0lBQ2pCRSxLQUFLLEdBQ0xQLEtBQUssQ0FETE8sS0FBSztFQUdULG9CQUNJYiwwREFBQSxDQUFDWSxTQUFTLEVBQUFHLGFBQUEsQ0FBQUEsYUFBQSxLQUNIWixzREFBYyxDQUFDRyxLQUFLLEVBQUUsQ0FDckIsU0FBUyxFQUNULFdBQVcsQ0FDZCxDQUFDO0lBQ0ZPLEtBQUssRUFBQUUsYUFBQTtNQUNEQyxPQUFPLEVBQUUsTUFBTTtNQUNmQyxPQUFPLEVBQUUsT0FBTztNQUNoQkMsWUFBWSxFQUFFLE1BQU07TUFDcEJDLG1CQUFtQixZQUFBQyxNQUFBLENBQVlYLE9BQU87SUFBUSxHQUMzQ0ksS0FBSztFQUNYLEVBQ0QsQ0FBQztBQUViLENBQUMsQ0FBQztBQUNGLElBQU1RLGNBQWMsR0FBR3BCLDJEQUFtQixDQUFDLENBQ3ZDQSwwREFBZ0IsRUFDaEJBLDBEQUFnQixDQUNuQixDQUFDO0FBQ0ZHLElBQUksQ0FBQ3FCLFlBQVksR0FBRztFQUNoQmIsU0FBUyxFQUFFO0FBQ2YsQ0FBQztBQUNEUixJQUFJLENBQUNzQixTQUFTLEdBQUc7RUFDYm5CLFFBQVEsRUFBRU4sdURBQWE7RUFDdkI7RUFDQTtFQUNBUSxPQUFPLEVBQUVSLDBEQUFnQjtFQUN6QlcsU0FBUyxFQUFFWCwrREFBcUI7RUFDaEM7RUFDQVksS0FBSyxFQUFFWix1REFBZSxDQUFDO0lBQ25CO0lBQ0FlLE9BQU8sRUFBRWYsMERBQWdCO0lBQ3pCO0lBQ0E7SUFDQWtCLG1CQUFtQixFQUFFRSxjQUFjO0lBQ25DO0lBQ0FKLE9BQU8sRUFBRUksY0FBYztJQUN2QjtJQUNBO0lBQ0E7SUFDQUgsWUFBWSxFQUFFRztJQUNkO0VBQ0osQ0FBQztBQUNMLENBQUM7O0FBQ0QsaUVBQWVqQixJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvR3JpZC5qc3g/YWU3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBpc0Fyciwgb2JqV2l0aG91dEtleXMgfSBmcm9tICcuLi8uLi91dGlscydcblxuLyoqXG4gKiBAbmFtZSAgICBHcmlkXG4gKiBAc3VtbWFyeSBhIHNpbXBsZSBjb250YWluZXIgdG8gY3JlYXRlIENTUyBgZGlzcGxheTpncmlkYFxuICogXG4gKiBAcGFyYW0gICB7Kn0gcHJvcHMgXG4gKiBcbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogXG4gKiBAZXhhbXBsZSBgYGBqYXZhc2NyaXB0XG4gKiBcbiAqIGNvbnN0IHJvd3MgPSBuZXcgQXJyYXkoOSlcbiAqICAuZmlsbCgwKVxuICogIC5tYXAoKF8saSkgPT4gPGRpdiBrZXk9e2l9PntpfTwvZGl2Pn0pXG4gKiBjb25zdCBncmlkID0gPEdyaWQgY2hpbGRyZW49e3Jvd3N9IGNvbHVtbnM9ezN9IC8+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IEdyaWQgPSBSZWFjdC5tZW1vKHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBjb2x1bW5zID0gaXNBcnIoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCB8fCAxLFxuICAgICAgICBDb21wb25lbnQgPSAnZGl2JyxcbiAgICAgICAgc3R5bGUsXG4gICAgfSA9IHByb3BzXG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q29tcG9uZW50IHsuLi57XG4gICAgICAgICAgICAuLi5vYmpXaXRob3V0S2V5cyhwcm9wcywgW1xuICAgICAgICAgICAgICAgICdjb2x1bW5zJyxcbiAgICAgICAgICAgICAgICAnQ29tcG9uZW50JyxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICAgICAgICAgICAgZ3JpZEdhcDogJzAgNXB4JyxcbiAgICAgICAgICAgICAgICBncmlkQXV0b1Jvd3M6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBgcmVwZWF0KCR7Y29sdW1uc30sIDFmcilgLFxuICAgICAgICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfX0gLz5cbiAgICApXG59KVxuY29uc3QgU3RyaW5nT3JOdW1iZXIgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5udW1iZXIsXG5dKVxuR3JpZC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgQ29tcG9uZW50OiAnZGl2Jyxcbn1cbkdyaWQucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICAgIC8vIG51bWJlciBvZiBjb2x1bW5zIHBlciByb3cuXG4gICAgLy8gaWYgdW5kZWZpbmVkLCB3aWxsIHVzZSBsZW5ndGggb2YgYGNoaWxkcmVuYCAob25seSB3aGVuIGFycmF5KVxuICAgIGNvbHVtbnM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgLy8gYWRkIGV4dHJhIHN0eWxlcyBvciBvdmVycmlkZSBncmlkIGxheW91dFxuICAgIHN0eWxlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAvLyBkZWZhdWx0OiAnZ3JpZCdcbiAgICAgICAgZGlzcGxheTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgLy8gd2lsbCBvdmVycmlkZSBgY29sdW1uc2AgcHJvcC5cbiAgICAgICAgLy8gRm9yIGRldGFpbHMgJiBleGFtcGxlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2dyaWQtdGVtcGxhdGUtY29sdW1uc1xuICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBTdHJpbmdPck51bWJlcixcbiAgICAgICAgLy8gZ2FwIGJldHdlZW4gY2VsbHMgKHVzZXMgc2FtZSBmb3JtYXQgYXMgcGFkZGluZy9tYXJnaW4pXG4gICAgICAgIGdyaWRHYXA6IFN0cmluZ09yTnVtYmVyLFxuICAgICAgICAvLyBSb3cgaGVpZ2h0XG4gICAgICAgIC8vIERlZmF1bHQ6ICdhdXRvJ1xuICAgICAgICAvLyBGb3IgZGV0YWlscyAmIGV4YW1wbGVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZ3JpZC1hdXRvLXJvd3NcbiAgICAgICAgZ3JpZEF1dG9Sb3dzOiBTdHJpbmdPck51bWJlcixcbiAgICAgICAgLy8uLi5cbiAgICB9KSxcbn1cbmV4cG9ydCBkZWZhdWx0IEdyaWQiXSwibmFtZXMiOlsiUmVhY3QiLCJQcm9wVHlwZXMiLCJpc0FyciIsIm9ialdpdGhvdXRLZXlzIiwiR3JpZCIsIm1lbW8iLCJwcm9wcyIsImNoaWxkcmVuIiwiX3Byb3BzJGNvbHVtbnMiLCJjb2x1bW5zIiwibGVuZ3RoIiwiX3Byb3BzJENvbXBvbmVudCIsIkNvbXBvbmVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsIl9vYmplY3RTcHJlYWQiLCJkaXNwbGF5IiwiZ3JpZEdhcCIsImdyaWRBdXRvUm93cyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJjb25jYXQiLCJTdHJpbmdPck51bWJlciIsIm9uZU9mVHlwZSIsInN0cmluZyIsIm51bWJlciIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsImFueSIsImVsZW1lbnRUeXBlIiwic2hhcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/Grid.jsx\n')},"./src/utils/reactjs/components/Memo.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Memo": () => (/* binding */ _Memo),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _isMemo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/isMemo.js");\nvar _excluded = ["M"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _readOnlyError(name) { throw new TypeError("\\"" + name + "\\" is read-only"); }\n\n\n\nvar components = new Map();\n// experimental\nvar _Memo = function Memo(_ref) {\n  var M = _ref.M,\n    props = _objectWithoutProperties(_ref, _excluded);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    if ((0,_isMemo__WEBPACK_IMPORTED_MODULE_1__["default"])(M)) return M;\n    return components.set(M, React.memo(M));\n  }, [M]), _readOnlyError("Memo");\n  return /*#__PURE__*/React.createElement(_Memo, props);\n};\n\n_Memo.propTypes = {\n  M: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().elementType)\n  // Rest of the props will be passed on to the component\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_Memo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL01lbW8uanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ0g7QUFDRDtBQUU5QixJQUFNRyxVQUFVLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7QUFDNUI7QUFDTyxJQUFNQyxLQUFJLEdBQUcsU0FBQUEsS0FBQUMsSUFBQSxFQUFxQjtFQUFBLElBQWxCQyxDQUFDLEdBQUFELElBQUEsQ0FBREMsQ0FBQztJQUFLQyxLQUFLLEdBQUFDLHdCQUFBLENBQUFILElBQUEsRUFBQUksU0FBQTtFQUN2QlQsOENBQU8sQ0FBQyxZQUFNO0lBQ2pCLElBQUlDLG1EQUFNLENBQUNLLENBQUMsQ0FBQyxFQUFFLE9BQU9BLENBQUM7SUFFdkIsT0FBT0osVUFBVSxDQUFDUSxHQUFHLENBQUNKLENBQUMsRUFBRUssS0FBSyxDQUFDQyxJQUFJLENBQUNOLENBQUMsQ0FBQyxDQUFDO0VBQzNDLENBQUMsRUFBRSxDQUFDQSxDQUFDLENBQUMsQ0FBQyxFQUFBTyxjQUFBO0VBRVAsb0JBQU9GLEtBQUEsQ0FBQUcsYUFBQSxDQUFDQyxLQUFJLEVBQUtSLEtBQVEsQ0FBQztBQUM5QixDQUFDO0FBQUE7QUFDREgsS0FBSSxDQUFDWSxTQUFTLEdBQUc7RUFDYlYsQ0FBQyxFQUFFUCwrREFBcUJrQjtFQUN4QjtBQUNKLENBQUM7O0FBQ0QsaUVBQWViLEtBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvY29tcG9uZW50cy9NZW1vLmpzeD80YTg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcbmltcG9ydCBpc01lbW8gZnJvbSAnLi4vaXNNZW1vJ1xuXG5jb25zdCBjb21wb25lbnRzID0gbmV3IE1hcCgpXG4vLyBleHBlcmltZW50YWxcbmV4cG9ydCBjb25zdCBNZW1vID0gKHsgTSwgLi4ucHJvcHMgfSkgPT4ge1xuICAgIE1lbW8gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKGlzTWVtbyhNKSkgcmV0dXJuIE1cblxuICAgICAgICByZXR1cm4gY29tcG9uZW50cy5zZXQoTSwgUmVhY3QubWVtbyhNKSlcbiAgICB9LCBbTV0pXG5cbiAgICByZXR1cm4gPE1lbW8gey4uLnByb3BzfSAvPlxufVxuTWVtby5wcm9wVHlwZXMgPSB7XG4gICAgTTogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIC8vIFJlc3Qgb2YgdGhlIHByb3BzIHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRoZSBjb21wb25lbnRcbn1cbmV4cG9ydCBkZWZhdWx0IE1lbW9cblxuIl0sIm5hbWVzIjpbIlByb3BUeXBlcyIsInVzZU1lbW8iLCJpc01lbW8iLCJjb21wb25lbnRzIiwiTWFwIiwiTWVtbyIsIl9yZWYiLCJNIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJzZXQiLCJSZWFjdCIsIm1lbW8iLCJfcmVhZE9ubHlFcnJvciIsImNyZWF0ZUVsZW1lbnQiLCJfTWVtbyIsInByb3BUeXBlcyIsImVsZW1lbnRUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/Memo.jsx\n')},"./src/utils/reactjs/components/Message.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Message\": () => (/* binding */ Message),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"statusColors\": () => (/* binding */ statusColors),\n/* harmony export */   \"statusIcons\": () => (/* binding */ statusIcons),\n/* harmony export */   \"statuses\": () => (/* binding */ statuses)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/utils/utils.js\");\n/* harmony import */ var _utils_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/utils/window.js\");\n/* harmony import */ var _toProps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/utils/reactjs/toProps.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar _excluded = [\"children\", \"background\", \"color\", \"colorMapping\", \"components\", \"content\", \"icon\", \"iconMapping\", \"iconProps\", \"inverted\", \"header\", \"library\", \"severity\", \"status\", \"style\", \"text\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar statusColors = {\n  error: '#b71c1c',\n  error_bg: '#ffcdd2',\n  info: '#212121',\n  info_bg: '#e0e0e0',\n  loading: '#f57f17',\n  loading_bg: '#fff9c4',\n  success: '#1b5e20',\n  success_bg: '#c8e6c9',\n  warning: '#fff9c4',\n  warning_bg: '#e65100'\n};\nvar statuses = {\n  basic: 'basic',\n  error: 'error',\n  info: 'info',\n  loading: 'loading',\n  success: 'success',\n  warning: 'warning'\n};\nvar statusIcons = {\n  basic: '',\n  error: '',\n  loading: '',\n  info: '',\n  success: '',\n  warning: ''\n};\n\n/**\n * @name    Message\n * @summary React component to display simple message with header text.\n * \n * @example ```javascript\n * <Message {...{ \n *   content: 'body',\n *   header: 'title',\n *   // define specific icon\n *   icon: { name: 'user', size: 30 },\n *   // display icon based on status\n *   icon: true,\n *   status: 'success',\n * }} />\n * \n * ```\n */\nvar Message = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (_ref) {\n  var _dp$style, _style$textAlign;\n  var children = _ref.children,\n    background = _ref.background,\n    color = _ref.color,\n    colorMapping = _ref.colorMapping,\n    _ref$components = _ref.components,\n    _ref$components$Conta = _ref$components.Container,\n    Container = _ref$components$Conta === void 0 ? 'div' : _ref$components$Conta,\n    _ref$components$Heade = _ref$components.Header,\n    Header = _ref$components$Heade === void 0 ? 'div' : _ref$components$Heade,\n    Icon = _ref$components.Icon,\n    _ref$content = _ref.content,\n    content = _ref$content === void 0 ? children : _ref$content,\n    icon = _ref.icon,\n    iconMapping = _ref.iconMapping,\n    _ref$iconProps = _ref.iconProps,\n    iconProps = _ref$iconProps === void 0 ? {} : _ref$iconProps,\n    _ref$inverted = _ref.inverted,\n    inverted = _ref$inverted === void 0 ? (0,_utils_window__WEBPACK_IMPORTED_MODULE_2__.useInverted)() : _ref$inverted,\n    header = _ref.header,\n    library = _ref.library,\n    severity = _ref.severity,\n    _ref$status = _ref.status,\n    status = _ref$status === void 0 ? severity : _ref$status,\n    _ref$style = _ref.style,\n    style = _ref$style === void 0 ? {} : _ref$style,\n    _ref$text = _ref.text,\n    text = _ref$text === void 0 ? content : _ref$text,\n    props = _objectWithoutProperties(_ref, _excluded);\n  if (!text && !header) return '';\n  var dp = Message.defaultProps || {};\n  var isSemantic = library === 'semantic-ui-react';\n  var isMui = library === '@mui/material';\n  var _style$opacity = style.opacity,\n    opacity = _style$opacity === void 0 ? (_dp$style = dp.style) === null || _dp$style === void 0 ? void 0 : _dp$style.opacity : _style$opacity;\n  text = ! /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(text) ? \"\".concat(text || '').replace(/^(Error|ReferenceError)\\:\\ /, '') // remove \"Error: \" from error messages\n  : text;\n  var isLoading = status === statuses.loading;\n  status = isLoading\n  // use 'warning' status apearance for 'loading' status\n  ? statuses.warning : statuses[status] || statuses.info;\n  if (icon && ! /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(icon)) {\n    icon = (0,_toProps__WEBPACK_IMPORTED_MODULE_3__.toProps)(icon, 'name');\n    // default status icon\n    var statusIcon = !(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(icon.name) ? isLoading ? iconMapping[statuses.loading] : iconMapping[status] : undefined;\n    var siEl = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(statusIcon);\n    if (!siEl) statusIcon = (0,_toProps__WEBPACK_IMPORTED_MODULE_3__.toProps)(statusIcon, 'name');\n    var icStr = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(icon.name);\n    if (!icStr && siEl) {\n      // no icon name provided, use default status icon\n      icon = statusIcon;\n    } else {\n      icon = _objectSpread(_objectSpread(_objectSpread({}, statusIcon), icon), {}, {\n        name: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(icon.name) ? icon.name : statusIcon.name\n      });\n    }\n    var icEl = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(icon);\n    if (!icEl) {\n      var _statusIcon;\n      var _icon = icon,\n        name = _icon.name;\n      icon = _objectSpread(_objectSpread(_objectSpread({}, iconProps), icon), {}, {\n        icon: name,\n        // Fontawesome React\n        name: name,\n        // semantic UI\n        style: _objectSpread(_objectSpread(_objectSpread({}, (_statusIcon = statusIcon) === null || _statusIcon === void 0 ? void 0 : _statusIcon.style), iconProps === null || iconProps === void 0 ? void 0 : iconProps.style), (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(icon) && icon.style)\n      });\n    }\n    icon = Icon && (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(icon) && !icEl ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Icon, icon) : icon;\n  }\n\n  // Align text to center when only content or title is available and no icon\n  var isContainerStr = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(Container);\n  var shouldAlignCenter = !icon && (!text || !header);\n  if (shouldAlignCenter) (_style$textAlign = style.textAlign) !== null && _style$textAlign !== void 0 ? _style$textAlign : style.textAlign = 'center';\n  var useChildren = !!Header || !text && /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(children);\n  var headerProps = useChildren && _objectSpread(_objectSpread({}, (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(dp.header) && dp.header), (0,_toProps__WEBPACK_IMPORTED_MODULE_3__.toProps)(header));\n  var containerProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, props), useChildren && {\n    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, Header && header && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Header, _objectSpread(_objectSpread({}, headerProps), {}, {\n      style: _objectSpread({\n        fontWeight: 'bold'\n      }, headerProps === null || headerProps === void 0 ? void 0 : headerProps.style)\n    })), text)\n  }), {}, {\n    // color,\n    // no `Header` component, pass on `content` and `header` to `Container`\n    content: !useChildren && text || undefined,\n    header: !useChildren && header || undefined,\n    icon: !isContainerStr && !useChildren && icon\n  }, isMui && {\n    severity: severity\n    // ignore unsupported status\n    || (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.objWithoutKeys)(statuses, ['basic', 'loading'])[status] || undefined\n  }), {}, {\n    status: status\n  }, isSemantic && {\n    // Semantic UI statuses\n    info: status === statuses.info,\n    negative: status === statuses.error,\n    positive: status === statuses.success,\n    warning: status === statuses.warning\n  }), {}, {\n    style: _objectSpread(_objectSpread(_objectSpread({}, isContainerStr && {\n      background: background || colorMapping[\"\".concat(status, \"_bg\")],\n      color: color || colorMapping[status],\n      borderRadius: 4,\n      padding: '10px 15px'\n    }), {}, {\n      margin: '5px 0',\n      opacity: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.isDefined)(opacity) ? opacity : inverted ? 0.75 : 1\n    }, dp.style), style)\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, containerProps);\n});\nMessage.defaultProps = {\n  background: undefined,\n  color: undefined,\n  colorMapping: statusColors,\n  components: {\n    Content: 'div',\n    Header: 'div'\n  },\n  iconMapping: statusIcons\n};\nMessage.propTypes = {\n  // background color if `Content` not supplied\n  background: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n  // text color if `Content` not supplied\n  color: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n  colorMapping: prop_types__WEBPACK_IMPORTED_MODULE_4___default().shape({\n    error: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    error_bg: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    info: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    info_bg: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    loading: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    loading_bg: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    success: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    success_bg: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    warning: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n    warning_bg: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string)\n  }),\n  components: prop_types__WEBPACK_IMPORTED_MODULE_4___default().shape({\n    Content: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().elementType),\n    Header: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().elementType),\n    Icon: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().elementType)\n    // default icon props \n  }),\n\n  content: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().any),\n  icon: prop_types__WEBPACK_IMPORTED_MODULE_4___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_4___default().bool), (prop_types__WEBPACK_IMPORTED_MODULE_4___default().element), (prop_types__WEBPACK_IMPORTED_MODULE_4___default().object), (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string)]),\n  iconMapping: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().any),\n  // extra propeties to be supplied when `icon` is an object or `Icon` is being used\n  iconProps: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().object),\n  header: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().any),\n  status: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n  style: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().object)\n};\n// Optionally, configure default props based on UI library.\n// If not setup, Message will not display any icons.\nMessage.setupDefaults = function (name, library) {\n  if (!name || !library) return;\n  var dp = Message.defaultProps;\n  dp.library = name;\n  switch (\"\".concat(name).toLowerCase()) {\n    case 'semantic-ui-react':\n      dp.components.Container = library.Message;\n      dp.components.Header = null;\n      dp.iconMapping = _objectSpread({}, _utils_utils__WEBPACK_IMPORTED_MODULE_1__.icons);\n      // for legacy status support in the totem-ui repo\n      statuses.BASIC = '';\n      statuses.ERROR = 'error';\n      statuses.INFO = 'info';\n      statuses.LOADING = 'loading';\n      statuses.SUCCESS = 'success';\n      statuses.WARNING = 'warning';\n      break;\n    case '@mui/material':\n      var Alert = library.Alert,\n        AlertTitle = library.AlertTitle;\n      dp.components.Container = Alert;\n      dp.components.Header = AlertTitle;\n      // dp.components.Icon = Icon // ToDo: Use custom IconMUI \n      dp.header = {\n        marginBottom: 0\n      };\n      dp.iconProps = {\n        style: {\n          fontSize: 50\n        },\n        size: 50\n      };\n      dp.iconMapping = {\n        basic: false,\n        // no icon\n        error: 'Error',\n        info: 'InfoOutlined',\n        loading: {\n          name: 'CircularProgress',\n          size: 37 // equivalent to size 50 of regular icons!!\n        },\n\n        success: 'CheckCircleOutline',\n        warning: 'WarningAmberOutlined'\n      };\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Message);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/Message.jsx\n")},"./src/utils/reactjs/components/QueueItemStatus.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "QueueItemStatus": () => (/* binding */ QueueItemStatus),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useQueueItemStatus": () => (/* binding */ useQueueItemStatus)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _reactjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/index.js");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/Message.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar statusTexts = {\n  error: \'error\',\n  loading: \'in-progress\',\n  success: \'success\',\n  suspended: \'pending\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(statusTexts);\n\n/**\n * @name    useQueueItemStatus\n * @summary watch-out for changes on queue service and return the status message with title & description for a specific queue item.\n * \n * @param   {String|SubjectLike} id           queue item ID ()\n * @param   {Object|Function}    messageProps (optional)\n * @param   {SubjectLike}        rxOnSave     RxJS subject from the queue service which is triggered whenever an item\n *                                            is created/updated. Must be an object with properties: `rootTask` & `task`\n * @returns {object}    {content, header, icon, status, rxonsave: {rootTask, task}, ...}\n */\nvar useQueueItemStatus = function useQueueItemStatus(id, messageProps) {\n  var _QueueItemStatus$defa;\n  var rxOnSave = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueueItemStatus === null || QueueItemStatus === void 0 ? void 0 : (_QueueItemStatus$defa = QueueItemStatus.defaultProps) === null || _QueueItemStatus$defa === void 0 ? void 0 : _QueueItemStatus$defa.rxOnSave;\n  var _useRxSubjects = (0,_reactjs__WEBPACK_IMPORTED_MODULE_3__.useRxSubjects)([rxOnSave, id], getMessage, [{\n      // config for rxOnSave:\n      // ignore update if it\'s not relevant to the `id`\n      valueModifier: function valueModifier() {\n        var _value$rootTask;\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _id = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(id) ? id.value : id;\n        var ignore = !_id || _id !== (value === null || value === void 0 ? void 0 : (_value$rootTask = value.rootTask) === null || _value$rootTask === void 0 ? void 0 : _value$rootTask.id);\n        return ignore ? _reactjs__WEBPACK_IMPORTED_MODULE_3__.IGNORE_UPDATE_SYMBOL : value;\n      }\n    }]),\n    _useRxSubjects2 = _slicedToArray(_useRxSubjects, 1),\n    _useRxSubjects2$ = _useRxSubjects2[0],\n    message = _useRxSubjects2$ === void 0 ? \'\' : _useRxSubjects2$;\n  return !!message ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(messageProps) ? messageProps(message) : _objectSpread(_objectSpread({}, message), messageProps) : message;\n};\nfunction QueueItemStatus(_ref) {\n  var id = _ref.id,\n    messageProps = _ref.messageProps,\n    rxOnSave = _ref.rxOnSave;\n  var message = useQueueItemStatus(id, messageProps, rxOnSave);\n  return !!message && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_Message__WEBPACK_IMPORTED_MODULE_4__["default"], message);\n}\nQueueItemStatus.defaultProps = {\n  id: undefined,\n  rxOnSave: undefined,\n  messageProps: undefined\n};\nQueueItemStatus.propTypes = {\n  // Queue item ID (top level only)\n  id: prop_types__WEBPACK_IMPORTED_MODULE_5___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_5___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_6__/* .BehaviorSubject */ .X), (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string.isRequired)]),\n  messageProps: prop_types__WEBPACK_IMPORTED_MODULE_5___default().oneOfType([\n  // if function\n  (prop_types__WEBPACK_IMPORTED_MODULE_5___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_5___default().object)]),\n  // queue service on save trigger\n  rxOnSave: prop_types__WEBPACK_IMPORTED_MODULE_5___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_6__/* .BehaviorSubject */ .X).isRequired\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QueueItemStatus);\n\n// extract information from last saved queue item and construct a message (object) compatible with `Message` component\nvar getMessage = function getMessage(_ref2) {\n  var _ref3 = _slicedToArray(_ref2, 2),\n    _ref3$ = _ref3[0],\n    _ref3$2 = _ref3$ === void 0 ? {} : _ref3$,\n    _ref3$2$rootTask = _ref3$2.rootTask,\n    rootTask = _ref3$2$rootTask === void 0 ? {} : _ref3$2$rootTask,\n    _ref3$2$task = _ref3$2.task,\n    task = _ref3$2$task === void 0 ? {} : _ref3$2$task,\n    id = _ref3[1];\n  if (!id || rootTask.id !== id) return;\n  var rDesc = rootTask.description,\n    rTitle = rootTask.title;\n  var _task$description = task.description,\n    description = _task$description === void 0 ? rDesc : _task$description,\n    errorMessage = task.errorMessage,\n    _task$title = task.title,\n    title = _task$title === void 0 ? rTitle : _task$title,\n    status = task.status;\n  if (!title && !description) return;\n  var statusText = "".concat(statusTexts[status] || \'\').toUpperCase();\n  var serialNo = getSerialNo(rootTask, task);\n  if (status === _Message__WEBPACK_IMPORTED_MODULE_4__.statuses.error) description = errorMessage;\n  var message = {\n    content: description,\n    header: "".concat(serialNo).concat(title, " - ").concat(statusText),\n    icon: true,\n    status: status,\n    rxonsave: {\n      rootTask: rootTask,\n      task: task\n    }\n  };\n  return message;\n};\nvar getSerialNo = function getSerialNo(rootTask, task) {\n  var total = 0;\n  var current = 0;\n  var next = rootTask;\n  do {\n    var _next, _next2;\n    total++;\n    if (next === task) current = total;\n    next = (_next2 = next) === null || _next2 === void 0 ? void 0 : _next2.next;\n  } while (next && !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)((_next = next) === null || _next === void 0 ? void 0 : _next.next));\n  return total <= 1 ? \'\' : "(".concat(current, "/").concat(total, ") ");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL1F1ZXVlSXRlbVN0YXR1cy5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ1Q7QUFDMEI7QUFDRjtBQUs3QjtBQUMrQztBQUN0QjtBQUU3QyxJQUFNWSxXQUFXLEdBQUc7RUFDaEJDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLE9BQU8sRUFBRSxhQUFhO0VBQ3RCQyxPQUFPLEVBQUUsU0FBUztFQUNsQkMsU0FBUyxFQUFFO0FBQ2YsQ0FBQztBQUNEWiwyREFBVSxDQUFDUSxXQUFXLENBQUM7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUssa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FDM0JDLEVBQUUsRUFDRkMsWUFBWSxFQUVYO0VBQUEsSUFBQUMscUJBQUE7RUFBQSxJQUREQyxRQUFRLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHRyxlQUFlLGFBQWZBLGVBQWUsd0JBQUFMLHFCQUFBLEdBQWZLLGVBQWUsQ0FBRUMsWUFBWSxjQUFBTixxQkFBQSx1QkFBN0JBLHFCQUFBLENBQStCQyxRQUFRO0VBRWxELElBQUFNLGNBQUEsR0FBdUJsQix1REFBYSxDQUNoQyxDQUFDWSxRQUFRLEVBQUVILEVBQUUsQ0FBQyxFQUNkVSxVQUFVLEVBQ1YsQ0FBQztNQUFHO01BQ0E7TUFDQUMsYUFBYSxFQUFFLFNBQUFBLGNBQUEsRUFBZ0I7UUFBQSxJQUFBQyxlQUFBO1FBQUEsSUFBZkMsS0FBSyxHQUFBVCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7UUFDdEIsSUFBTVUsR0FBRyxHQUFHekIscURBQWEsQ0FBQ1csRUFBRSxDQUFDLEdBQ3ZCQSxFQUFFLENBQUNhLEtBQUssR0FD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QU1GLElBQUk7RUFDckIsQ0FBQyxRQUFRQSxJQUFJLElBQUksQ0FBQ3JFLDZDQUFLLEVBQUFzRSxLQUFBLEdBQUNELElBQUksY0FBQUMsS0FBQSx1QkFBSkEsS0FBQSxDQUFNRCxJQUFJLENBQUM7RUFFbkMsT0FBT0YsS0FBSyxJQUFJLENBQUMsR0FDWCxFQUFFLE9BQUFSLE1BQUEsQ0FDRVMsT0FBTyxPQUFBVCxNQUFBLENBQUlRLEtBQUssT0FBSTtBQUNsQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvUXVldWVJdGVtU3RhdHVzLmpzeD8wMjNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdExpa2UgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgdHJhbnNsYXRlZCB9IGZyb20gJy4uLy4uL2xhbmd1YWdlSGVscGVyJ1xuaW1wb3J0IHtcbiAgICBpc0ZuLFxuICAgIGlzT2JqLFxuICAgIGlzU3ViamVjdExpa2Vcbn0gZnJvbSAnLi4vLi4vdXRpbHMnXG5pbXBvcnQgeyBJR05PUkVfVVBEQVRFX1NZTUJPTCwgdXNlUnhTdWJqZWN0cyB9IGZyb20gJy4uLy4uL3JlYWN0anMnXG5pbXBvcnQgTWVzc2FnZSwgeyBzdGF0dXNlcyB9IGZyb20gJy4vTWVzc2FnZSdcblxuY29uc3Qgc3RhdHVzVGV4dHMgPSB7XG4gICAgZXJyb3I6ICdlcnJvcicsXG4gICAgbG9hZGluZzogJ2luLXByb2dyZXNzJyxcbiAgICBzdWNjZXNzOiAnc3VjY2VzcycsXG4gICAgc3VzcGVuZGVkOiAncGVuZGluZycsXG59XG50cmFuc2xhdGVkKHN0YXR1c1RleHRzKVxuXG4vKipcbiAqIEBuYW1lICAgIHVzZVF1ZXVlSXRlbVN0YXR1c1xuICogQHN1bW1hcnkgd2F0Y2gtb3V0IGZvciBjaGFuZ2VzIG9uIHF1ZXVlIHNlcnZpY2UgYW5kIHJldHVybiB0aGUgc3RhdHVzIG1lc3NhZ2Ugd2l0aCB0aXRsZSAmIGRlc2NyaXB0aW9uIGZvciBhIHNwZWNpZmljIHF1ZXVlIGl0ZW0uXG4gKiBcbiAqIEBwYXJhbSAgIHtTdHJpbmd8U3ViamVjdExpa2V9IGlkICAgICAgICAgICBxdWV1ZSBpdGVtIElEICgpXG4gKiBAcGFyYW0gICB7T2JqZWN0fEZ1bmN0aW9ufSAgICBtZXNzYWdlUHJvcHMgKG9wdGlvbmFsKVxuICogQHBhcmFtICAge1N1YmplY3RMaWtlfSAgICAgICAgcnhPblNhdmUgICAgIFJ4SlMgc3ViamVjdCBmcm9tIHRoZSBxdWV1ZSBzZXJ2aWNlIHdoaWNoIGlzIHRyaWdnZXJlZCB3aGVuZXZlciBhbiBpdGVtXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgY3JlYXRlZC91cGRhdGVkLiBNdXN0IGJlIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6IGByb290VGFza2AgJiBgdGFza2BcbiAqIEByZXR1cm5zIHtvYmplY3R9ICAgIHtjb250ZW50LCBoZWFkZXIsIGljb24sIHN0YXR1cywgcnhvbnNhdmU6IHtyb290VGFzaywgdGFza30sIC4uLn1cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVF1ZXVlSXRlbVN0YXR1cyA9IChcbiAgICBpZCxcbiAgICBtZXNzYWdlUHJvcHMsXG4gICAgcnhPblNhdmUgPSBRdWV1ZUl0ZW1TdGF0dXM/LmRlZmF1bHRQcm9wcz8ucnhPblNhdmUsXG4pID0+IHtcbiAgICBjb25zdCBbbWVzc2FnZSA9ICcnXSA9IHVzZVJ4U3ViamVjdHMoXG4gICAgICAgIFtyeE9uU2F2ZSwgaWRdLFxuICAgICAgICBnZXRNZXNzYWdlLFxuICAgICAgICBbeyAgLy8gY29uZmlnIGZvciByeE9uU2F2ZTpcbiAgICAgICAgICAgIC8vIGlnbm9yZSB1cGRhdGUgaWYgaXQncyBub3QgcmVsZXZhbnQgdG8gdGhlIGBpZGBcbiAgICAgICAgICAgIHZhbHVlTW9kaWZpZXI6ICh2YWx1ZSA9IHt9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2lkID0gaXNTdWJqZWN0TGlrZShpZClcbiAgICAgICAgICAgICAgICAgICAgPyBpZC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICA6IGlkXG4gICAgICAgICAgICAgICAgY29uc3QgaWdub3JlID0gIV9pZCB8fCBfaWQgIT09IHZhbHVlPy5yb290VGFzaz8uaWRcbiAgICAgICAgICAgICAgICByZXR1cm4gaWdub3JlXG4gICAgICAgICAgICAgICAgICAgID8gSUdOT1JFX1VQREFURV9TWU1CT0xcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfV1cbiAgICApXG5cbiAgICByZXR1cm4gISFtZXNzYWdlXG4gICAgICAgID8gaXNGbihtZXNzYWdlUHJvcHMpXG4gICAgICAgICAgICA/IG1lc3NhZ2VQcm9wcyhtZXNzYWdlKVxuICAgICAgICAgICAgOiB7IC4uLm1lc3NhZ2UsIC4uLm1lc3NhZ2VQcm9wcyB9XG4gICAgICAgIDogbWVzc2FnZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUXVldWVJdGVtU3RhdHVzKHtcbiAgICBpZCxcbiAgICBtZXNzYWdlUHJvcHMsXG4gICAgcnhPblNhdmUsXG59KSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHVzZVF1ZXVlSXRlbVN0YXR1cyhcbiAgICAgICAgaWQsXG4gICAgICAgIG1lc3NhZ2VQcm9wcyxcbiAgICAgICAgcnhPblNhdmUsXG4gICAgKVxuICAgIHJldHVybiAhIW1lc3NhZ2UgJiYgPE1lc3NhZ2Ugey4uLm1lc3NhZ2V9IC8+XG59XG5RdWV1ZUl0ZW1TdGF0dXMuZGVmYXVsdFByb3BzID0ge1xuICAgIGlkOiB1bmRlZmluZWQsXG4gICAgcnhPblNhdmU6IHVuZGVmaW5lZCxcbiAgICBtZXNzYWdlUHJvcHM6IHVuZGVmaW5lZCxcbn1cblF1ZXVlSXRlbVN0YXR1cy5wcm9wVHlwZXMgPSB7XG4gICAgLy8gUXVldWUgaXRlbSBJRCAodG9wIGxldmVsIG9ubHkpXG4gICAgaWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuaW5zdGFuY2VPZihCZWhhdmlvclN1YmplY3QpLFxuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgXSksXG4gICAgbWVzc2FnZVByb3BzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgLy8gaWYgZnVuY3Rpb25cbiAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgXSksXG4gICAgLy8gcXVldWUgc2VydmljZSBvbiBzYXZlIHRyaWdnZXJcbiAgICByeE9uU2F2ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoQmVoYXZpb3JTdWJqZWN0KS5pc1JlcXVpcmVkLFxufVxuZXhwb3J0IGRlZmF1bHQgUXVldWVJdGVtU3RhdHVzXG5cbi8vIGV4dHJhY3QgaW5mb3JtYXRpb24gZnJvbSBsYXN0IHNhdmVkIHF1ZXVlIGl0ZW0gYW5kIGNvbnN0cnVjdCBhIG1lc3NhZ2UgKG9iamVjdCkgY29tcGF0aWJsZSB3aXRoIGBNZXNzYWdlYCBjb21wb25lbnRcbmNvbnN0IGdldE1lc3NhZ2UgPSAoW1xuICAgIHtcbiAgICAgICAgcm9vdFRhc2sgPSB7fSxcbiAgICAgICAgdGFzayA9IHt9XG4gICAgfSA9IHt9LFxuICAgIGlkLFxuXSkgPT4ge1xuICAgIGlmICghaWQgfHwgcm9vdFRhc2suaWQgIT09IGlkKSByZXR1cm5cblxuICAgIGNvbnN0IHsgZGVzY3JpcHRpb246IHJEZXNjLCB0aXRsZTogclRpdGxlIH0gPSByb290VGFza1xuICAgIGxldCB7XG4gICAgICAgIGRlc2NyaXB0aW9uID0gckRlc2MsXG4gICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgdGl0bGUgPSByVGl0bGUsXG4gICAgICAgIHN0YXR1cyxcbiAgICB9ID0gdGFza1xuICAgIGlmICghdGl0bGUgJiYgIWRlc2NyaXB0aW9uKSByZXR1cm5cblxuICAgIGNvbnN0IHN0YXR1c1RleHQgPSBgJHtzdGF0dXNUZXh0c1tzdGF0dXNdIHx8ICcnfWAudG9VcHBlckNhc2UoKVxuICAgIGNvbnN0IHNlcmlhbE5vID0gZ2V0U2VyaWFsTm8ocm9vdFRhc2ssIHRhc2spXG4gICAgaWYgKHN0YXR1cyA9PT0gc3RhdHVzZXMuZXJyb3IpIGRlc2NyaXB0aW9uID0gZXJyb3JNZXNzYWdlXG5cbiAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICBjb250ZW50OiBkZXNjcmlwdGlvbixcbiAgICAgICAgaGVhZGVyOiBgJHtzZXJpYWxOb30ke3RpdGxlfSAtICR7c3RhdHVzVGV4dH1gLFxuICAgICAgICBpY29uOiB0cnVlLFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIHJ4b25zYXZlOiB7XG4gICAgICAgICAgICByb290VGFzayxcbiAgICAgICAgICAgIHRhc2ssXG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuY29uc3QgZ2V0U2VyaWFsTm8gPSAocm9vdFRhc2ssIHRhc2spID0+IHtcbiAgICBsZXQgdG90YWwgPSAwXG4gICAgbGV0IGN1cnJlbnQgPSAwXG4gICAgbGV0IG5leHQgPSByb290VGFza1xuICAgIGRvIHtcbiAgICAgICAgdG90YWwrK1xuICAgICAgICBpZiAobmV4dCA9PT0gdGFzaykgY3VycmVudCA9IHRvdGFsXG4gICAgICAgIG5leHQgPSBuZXh0Py5uZXh0XG4gICAgfSB3aGlsZSAobmV4dCAmJiAhaXNPYmoobmV4dD8ubmV4dCkpXG5cbiAgICByZXR1cm4gdG90YWwgPD0gMVxuICAgICAgICA/ICcnXG4gICAgICAgIDogYCgke2N1cnJlbnR9LyR7dG90YWx9KSBgXG59Il0sIm5hbWVzIjpbIlByb3BUeXBlcyIsIlJlYWN0IiwiQmVoYXZpb3JTdWJqZWN0IiwiU3ViamVjdExpa2UiLCJ0cmFuc2xhdGVkIiwiaXNGbiIsImlzT2JqIiwiaXNTdWJqZWN0TGlrZSIsIklHTk9SRV9VUERBVEVfU1lNQk9MIiwidXNlUnhTdWJqZWN0cyIsIk1lc3NhZ2UiLCJzdGF0dXNlcyIsInN0YXR1c1RleHRzIiwiZXJyb3IiLCJsb2FkaW5nIiwic3VjY2VzcyIsInN1c3BlbmRlZCIsInVzZVF1ZXVlSXRlbVN0YXR1cyIsImlkIiwibWVzc2FnZVByb3BzIiwiX1F1ZXVlSXRlbVN0YXR1cyRkZWZhIiwicnhPblNhdmUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJRdWV1ZUl0ZW1TdGF0dXMiLCJkZWZhdWx0UHJvcHMiLCJfdXNlUnhTdWJqZWN0cyIsImdldE1lc3NhZ2UiLCJ2YWx1ZU1vZGlmaWVyIiwiX3ZhbHVlJHJvb3RUYXNrIiwidmFsdWUiLCJfaWQiLCJpZ25vcmUiLCJyb290VGFzayIsIl91c2VSeFN1YmplY3RzMiIsIl9zbGljZWRUb0FycmF5IiwiX3VzZVJ4U3ViamVjdHMyJCIsIm1lc3NhZ2UiLCJfb2JqZWN0U3ByZWFkIiwiX3JlZiIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJpbnN0YW5jZU9mIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJvYmplY3QiLCJfcmVmMiIsIl9yZWYzIiwiX3JlZjMkIiwiX3JlZjMkMiIsIl9yZWYzJDIkcm9vdFRhc2siLCJfcmVmMyQyJHRhc2siLCJ0YXNrIiwickRlc2MiLCJkZXNjcmlwdGlvbiIsInJUaXRsZSIsInRpdGxlIiwiX3Rhc2skZGVzY3JpcHRpb24iLCJlcnJvck1lc3NhZ2UiLCJfdGFzayR0aXRsZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJjb25jYXQiLCJ0b1VwcGVyQ2FzZSIsInNlcmlhbE5vIiwiZ2V0U2VyaWFsTm8iLCJjb250ZW50IiwiaGVhZGVyIiwiaWNvbiIsInJ4b25zYXZlIiwidG90YWwiLCJjdXJyZW50IiwibmV4dCIsIl9uZXh0IiwiX25leHQyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/QueueItemStatus.jsx\n')},"./src/utils/reactjs/components/RxSubjectView.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "RxSubjectView": () => (/* binding */ RxSubjectView),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n/**\n * @name    RxSubjectView\n * @summary a functional component to display & auto-update the value of an RxJs subject.\n * PS: if value is defined, make sure it is acceptable in the React DOM.\n * \n * @param   {Boolean}   props.allowMerge         (optional)\n * @param   {Boolean}   props.allowSubjectUpdate (optional)\n * @param   {Boolean}   props.confs              (optional) if `subject` is an Array.\n * @param   {*}         props.initialValue       (optional)\n * @param   {Array|*}   props.subject            One or more RxJS subjects. \n *                                               If array of subjects supplied, will use `useRxSubjects`\n * @param   {Function}  props.valueModifier      (optional)\n * \n * @returns {Element}\n */\nvar RxSubjectView = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (props) {\n  var allowMerge = props.allowMerge,\n    allowSubjectUpdate = props.allowSubjectUpdate,\n    _props$confs = props.confs,\n    confs = _props$confs === void 0 ? [] : _props$confs,\n    debugTag = props.debugTag,\n    defer = props.defer,\n    initialValue = props.initialValue,\n    onUnmount = props.onUnmount,\n    onError = props.onError,\n    subject = props.subject,\n    valueModifier = props.valueModifier;\n  var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n      return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(subject) && subject.some(_utils__WEBPACK_IMPORTED_MODULE_1__.isSubjectLike) ? [_hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubjects, true] : [_hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubject, false];\n    }),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    hook = _useMemo2[0],\n    multi = _useMemo2[1];\n  var _hook = hook.apply(void 0, [subject, valueModifier].concat(_toConsumableArray(multi ? [confs, defer] : [initialValue, allowMerge, allowSubjectUpdate, defer, onUnmount, onError]), [debugTag])),\n    _hook2 = _slicedToArray(_hook, 1),\n    _hook2$ = _hook2[0],\n    value = _hook2$ === void 0 ? \'\' : _hook2$;\n  return value;\n});\nRxSubjectView.defaultProps = {\n  allowMerge: false,\n  allowSubjectUpdate: false\n};\nRxSubjectView.propTypes = {\n  allowMerge: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),\n  allowSubjectUpdate: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),\n  confs: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().array),\n  debug: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),\n  initialValue: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().any),\n  subject: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().any.isRequired),\n  valueModifier: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func)\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RxSubjectView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL1J4U3ViamVjdFZpZXcuanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFrQztBQUNJO0FBQ1k7QUFDSTs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTU8sYUFBYSxnQkFBR04saURBQVUsQ0FBQyxVQUFBUSxLQUFLLEVBQUk7RUFDN0MsSUFDSUMsVUFBVSxHQVVWRCxLQUFLLENBVkxDLFVBQVU7SUFDVkMsa0JBQWtCLEdBU2xCRixLQUFLLENBVExFLGtCQUFrQjtJQUFBQyxZQUFBLEdBU2xCSCxLQUFLLENBUkxJLEtBQUs7SUFBTEEsS0FBSyxHQUFBRCxZQUFBLGNBQUcsRUFBRSxHQUFBQSxZQUFBO0lBQ1ZFLFFBQVEsR0FPUkwsS0FBSyxDQVBMSyxRQUFRO0lBQ1JDLEtBQUssR0FNTE4sS0FBSyxDQU5MTSxLQUFLO0lBQ0xDLFlBQVksR0FLWlAsS0FBSyxDQUxMTyxZQUFZO0lBQ1pDLFNBQVMsR0FJVFIsS0FBSyxDQUpMUSxTQUFTO0lBQ1RDLE9BQU8sR0FHUFQsS0FBSyxDQUhMUyxPQUFPO0lBQ1BDLE9BQU8sR0FFUFYsS0FBSyxDQUZMVSxPQUFPO0lBQ1BDLGFBQWEsR0FDYlgsS0FBSyxDQURMVyxhQUFhO0VBRWpCLElBQUFDLFFBQUEsR0FBc0JuQiw4Q0FBTyxDQUFDO01BQUEsT0FDMUJDLDZDQUFLLENBQUNnQixPQUFPLENBQUMsSUFBSUEsT0FBTyxDQUFDRyxJQUFJLENBQUNsQixpREFBYSxDQUFDLEdBQ3ZDLENBQUNFLGlEQUFhLEVBQUUsSUFBSSxDQUFDLEdBQ3JCLENBQUNELGdEQUFZLEVBQUUsS0FBSyxDQUFDO0lBQUEsQ0FDL0IsQ0FBQztJQUFBa0IsU0FBQSxHQUFBQyxjQUFBLENBQUFILFFBQUE7SUFKTUksSUFBSSxHQUFBRixTQUFBO0lBQUVHLEtBQUssR0FBQUgsU0FBQTtFQUtsQixJQUFBSSxLQUFBLEdBQXFCRixJQUFJLENBQUFHLEtBQUEsVUFDckJULE9BQU8sRUFDUEMsYUFBYSxFQUFBUyxNQUFBLENBQUFDLGtCQUFBLENBQ1ZKLEtBQUssR0FDRixDQUFDYixLQUFLLEVBQUVFLEtBQUssQ0FBQyxHQUNkLENBQ0VDLFlBQVksRUFDWk4sVUFBVSxFQUNWQyxrQkFBa0IsRUFDbEJJLEtBQUssRUFDTEUsU0FBUyxFQUNUQyxPQUFPLENBQ1YsSUFDTEosUUFBUSxFQUNaLENBQUM7SUFBQWlCLE1BQUEsR0FBQVAsY0FBQSxDQUFBRyxLQUFBO0lBQUFLLE9BQUEsR0FBQUQsTUFBQTtJQWRNRSxLQUFLLEdBQUFELE9BQUEsY0FBRyxFQUFFLEdBQUFBLE9BQUE7RUFnQmpCLE9BQU9DLEtBQUs7QUFDaEIsQ0FBQyxDQUFDO0FBQ0YxQixhQUFhLENBQUMyQixZQUFZLEdBQUc7RUFDekJ4QixVQUFVLEVBQUUsS0FBSztFQUNqQkMsa0JBQWtCLEVBQUU7QUFDeEIsQ0FBQztBQUNESixhQUFhLENBQUM0QixTQUFTLEdBQUc7RUFDdEJ6QixVQUFVLEVBQUVWLHdEQUFjO0VBQzFCVyxrQkFBa0IsRUFBRVgsd0RBQWM7RUFDbENhLEtBQUssRUFBRWIseURBQWU7RUFDdEJzQyxLQUFLLEVBQUV0Qyx3REFBYztFQUNyQmdCLFlBQVksRUFBRWhCLHVEQUFhO0VBQzNCbUIsT0FBTyxFQUFFbkIsa0VBQXdCO0VBQ2pDb0IsYUFBYSxFQUFFcEIsd0RBQWN5QztBQUNqQyxDQUFDO0FBQ0QsaUVBQWVsQyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvUnhTdWJqZWN0Vmlldy5qc3g/ZDk4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgaXNBcnIsIGlzU3ViamVjdExpa2UgfSBmcm9tICcuLi8uLi91dGlscydcbmltcG9ydCB7IHVzZVJ4U3ViamVjdCwgdXNlUnhTdWJqZWN0cyB9IGZyb20gJy4uL2hvb2tzJ1xuXG4vKipcbiAqIEBuYW1lICAgIFJ4U3ViamVjdFZpZXdcbiAqIEBzdW1tYXJ5IGEgZnVuY3Rpb25hbCBjb21wb25lbnQgdG8gZGlzcGxheSAmIGF1dG8tdXBkYXRlIHRoZSB2YWx1ZSBvZiBhbiBSeEpzIHN1YmplY3QuXG4gKiBQUzogaWYgdmFsdWUgaXMgZGVmaW5lZCwgbWFrZSBzdXJlIGl0IGlzIGFjY2VwdGFibGUgaW4gdGhlIFJlYWN0IERPTS5cbiAqIFxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgcHJvcHMuYWxsb3dNZXJnZSAgICAgICAgIChvcHRpb25hbClcbiAqIEBwYXJhbSAgIHtCb29sZWFufSAgIHByb3BzLmFsbG93U3ViamVjdFVwZGF0ZSAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICBwcm9wcy5jb25mcyAgICAgICAgICAgICAgKG9wdGlvbmFsKSBpZiBgc3ViamVjdGAgaXMgYW4gQXJyYXkuXG4gKiBAcGFyYW0gICB7Kn0gICAgICAgICBwcm9wcy5pbml0aWFsVmFsdWUgICAgICAgKG9wdGlvbmFsKVxuICogQHBhcmFtICAge0FycmF5fCp9ICAgcHJvcHMuc3ViamVjdCAgICAgICAgICAgIE9uZSBvciBtb3JlIFJ4SlMgc3ViamVjdHMuIFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGFycmF5IG9mIHN1YmplY3RzIHN1cHBsaWVkLCB3aWxsIHVzZSBgdXNlUnhTdWJqZWN0c2BcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gIHByb3BzLnZhbHVlTW9kaWZpZXIgICAgICAob3B0aW9uYWwpXG4gKiBcbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICovXG5leHBvcnQgY29uc3QgUnhTdWJqZWN0VmlldyA9IFJlYWN0Lm1lbW8ocHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgYWxsb3dNZXJnZSxcbiAgICAgICAgYWxsb3dTdWJqZWN0VXBkYXRlLFxuICAgICAgICBjb25mcyA9IFtdLFxuICAgICAgICBkZWJ1Z1RhZyxcbiAgICAgICAgZGVmZXIsXG4gICAgICAgIGluaXRpYWxWYWx1ZSxcbiAgICAgICAgb25Vbm1vdW50LFxuICAgICAgICBvbkVycm9yLFxuICAgICAgICBzdWJqZWN0LFxuICAgICAgICB2YWx1ZU1vZGlmaWVyLFxuICAgIH0gPSBwcm9wc1xuICAgIGNvbnN0IFtob29rLCBtdWx0aV0gPSB1c2VNZW1vKCgpID0+XG4gICAgICAgIGlzQXJyKHN1YmplY3QpICYmIHN1YmplY3Quc29tZShpc1N1YmplY3RMaWtlKVxuICAgICAgICAgICAgPyBbdXNlUnhTdWJqZWN0cywgdHJ1ZV1cbiAgICAgICAgICAgIDogW3VzZVJ4U3ViamVjdCwgZmFsc2VdXG4gICAgKVxuICAgIGNvbnN0IFt2YWx1ZSA9ICcnXSA9IGhvb2soXG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIHZhbHVlTW9kaWZpZXIsXG4gICAgICAgIC4uLm11bHRpXG4gICAgICAgICAgICA/IFtjb25mcywgZGVmZXJdXG4gICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgICAgYWxsb3dNZXJnZSxcbiAgICAgICAgICAgICAgICBhbGxvd1N1YmplY3RVcGRhdGUsXG4gICAgICAgICAgICAgICAgZGVmZXIsXG4gICAgICAgICAgICAgICAgb25Vbm1vdW50LFxuICAgICAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBdLFxuICAgICAgICBkZWJ1Z1RhZyxcbiAgICApXG5cbiAgICByZXR1cm4gdmFsdWVcbn0pXG5SeFN1YmplY3RWaWV3LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBhbGxvd01lcmdlOiBmYWxzZSxcbiAgICBhbGxvd1N1YmplY3RVcGRhdGU6IGZhbHNlLFxufVxuUnhTdWJqZWN0Vmlldy5wcm9wVHlwZXMgPSB7XG4gICAgYWxsb3dNZXJnZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgYWxsb3dTdWJqZWN0VXBkYXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb25mczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGRlYnVnOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpbml0aWFsVmFsdWU6IFByb3BUeXBlcy5hbnksXG4gICAgc3ViamVjdDogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICAgIHZhbHVlTW9kaWZpZXI6IFByb3BUeXBlcy5mdW5jLFxufVxuZXhwb3J0IGRlZmF1bHQgUnhTdWJqZWN0VmlldyJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWFjdCIsInVzZU1lbW8iLCJpc0FyciIsImlzU3ViamVjdExpa2UiLCJ1c2VSeFN1YmplY3QiLCJ1c2VSeFN1YmplY3RzIiwiUnhTdWJqZWN0VmlldyIsIm1lbW8iLCJwcm9wcyIsImFsbG93TWVyZ2UiLCJhbGxvd1N1YmplY3RVcGRhdGUiLCJfcHJvcHMkY29uZnMiLCJjb25mcyIsImRlYnVnVGFnIiwiZGVmZXIiLCJpbml0aWFsVmFsdWUiLCJvblVubW91bnQiLCJvbkVycm9yIiwic3ViamVjdCIsInZhbHVlTW9kaWZpZXIiLCJfdXNlTWVtbyIsInNvbWUiLCJfdXNlTWVtbzIiLCJfc2xpY2VkVG9BcnJheSIsImhvb2siLCJtdWx0aSIsIl9ob29rIiwiYXBwbHkiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfaG9vazIiLCJfaG9vazIkIiwidmFsdWUiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJib29sIiwiYXJyYXkiLCJkZWJ1ZyIsImFueSIsImlzUmVxdWlyZWQiLCJmdW5jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/RxSubjectView.jsx\n')},"./src/utils/reactjs/components/ScrollIndicator.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ScrollIndicator": () => (/* binding */ ScrollIndicator),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _hooks_useMutationObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/useMutationObserver.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar _excluded = ["children", "Component", "mutationConf", "mutationDefer", "styles", "width"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nvar defaultStyles = {\n  root: {\n    backgroundColor: \'#f1f1f1\',\n    left: 0,\n    position: \'sticky\',\n    top: 0,\n    zIndex: 1,\n    width: \'100%\'\n  },\n  progressBar: {\n    height: 3,\n    background: \'#04AA6D\'\n  },\n  progressContainer: {\n    width: \'100%\',\n    // height: 3,\n    background: \'#ccc\'\n  }\n};\nvar ScrollIndicator = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (_ref) {\n  var children = _ref.children,\n    _ref$Component = _ref.Component,\n    Component = _ref$Component === void 0 ? \'div\' : _ref$Component,\n    _ref$mutationConf = _ref.mutationConf,\n    conf = _ref$mutationConf === void 0 ? {\n      childList: true,\n      subtree: true\n    } : _ref$mutationConf,\n    _ref$mutationDefer = _ref.mutationDefer,\n    mutationDefer = _ref$mutationDefer === void 0 ? 1000 : _ref$mutationDefer,\n    _ref$styles = _ref.styles,\n    styles = _ref$styles === void 0 ? {} : _ref$styles,\n    _ref$width = _ref.width,\n    defaultWidth = _ref$width === void 0 ? \'0.00%\' : _ref$width,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n      width: defaultWidth\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var width = state.width;\n  var updateWidth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (target) {\n    if (!target) return;\n    var offsetHeight = target.offsetHeight,\n      scrollHeight = target.scrollHeight,\n      scrollTop = target.scrollTop;\n    var height = scrollHeight - offsetHeight;\n    var percentage = scrollTop / height * 100 || 0;\n    var isUnscrollable = !scrollTop && offsetHeight === scrollHeight;\n    var newWidth = isUnscrollable ? null : "".concat(percentage.toFixed(2), "%");\n    var changed = width !== newWidth || isUnscrollable !== state.isUnscrollable;\n    changed && setState({\n      isUnscrollable: isUnscrollable,\n      width: newWidth\n    });\n  });\n  conf && (0,_hooks_useMutationObserver__WEBPACK_IMPORTED_MODULE_2__["default"])(ref, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_utils__WEBPACK_IMPORTED_MODULE_1__.deferred)(function () {\n    return updateWidth(ref === null || ref === void 0 ? void 0 : ref.current);\n  }, mutationDefer)), conf);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    onScroll: function onScroll(e) {\n      var _props$onScroll;\n      updateWidth(ref.current);\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call.apply(_props$onScroll, [props, e].concat(args));\n    }\n  }), width !== null && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    style: _objectSpread(_objectSpread({}, defaultStyles.root), styles === null || styles === void 0 ? void 0 : styles.root)\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    style: _objectSpread(_objectSpread({}, defaultStyles.progressContainer), styles === null || styles === void 0 ? void 0 : styles.progressContainer)\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    style: _objectSpread(_objectSpread(_objectSpread({}, defaultStyles.progressBar), styles === null || styles === void 0 ? void 0 : styles.progressBar), {}, {\n      width: width\n    })\n  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", null, children));\n});\nScrollIndicator.defaultProps = {\n  styles: defaultStyles\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ScrollIndicator);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL1Njcm9sbEluZGljYXRvci5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSWM7QUFDd0I7QUFDd0I7QUFFOUQsSUFBTU0sYUFBYSxHQUFHO0VBQ2xCQyxJQUFJLEVBQUU7SUFDRkMsZUFBZSxFQUFFLFNBQVM7SUFDMUJDLElBQUksRUFBRSxDQUFDO0lBQ1BDLFFBQVEsRUFBRSxRQUFRO0lBQ2xCQyxHQUFHLEVBQUUsQ0FBQztJQUNOQyxNQUFNLEVBQUUsQ0FBQztJQUNUQyxLQUFLLEVBQUU7RUFDWCxDQUFDO0VBQ0RDLFdBQVcsRUFBRTtJQUNUQyxNQUFNLEVBQUUsQ0FBQztJQUNUQyxVQUFVLEVBQUU7RUFDaEIsQ0FBQztFQUNEQyxpQkFBaUIsRUFBRTtJQUNmSixLQUFLLEVBQUUsTUFBTTtJQUNiO0lBQ0FHLFVBQVUsRUFBRTtFQUNoQjtBQUNKLENBQUM7QUFFTSxJQUFNRSxlQUFlLGdCQUFHbEIsaURBQVUsQ0FBQyxVQUFBb0IsSUFBQSxFQVdwQztFQUFBLElBVkZDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQUFDLGNBQUEsR0FBQUYsSUFBQSxDQUNSRyxTQUFTO0lBQVRBLFNBQVMsR0FBQUQsY0FBQSxjQUFHLEtBQUssR0FBQUEsY0FBQTtJQUFBRSxpQkFBQSxHQUFBSixJQUFBLENBQ2pCSyxZQUFZO0lBQUVDLElBQUksR0FBQUYsaUJBQUEsY0FBRztNQUNqQkcsU0FBUyxFQUFFLElBQUk7TUFDZkMsT0FBTyxFQUFFO0lBQ2IsQ0FBQyxHQUFBSixpQkFBQTtJQUFBSyxrQkFBQSxHQUFBVCxJQUFBLENBQ0RVLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxrQkFBQSxjQUFHLElBQUksR0FBQUEsa0JBQUE7SUFBQUUsV0FBQSxHQUFBWCxJQUFBLENBQ3BCWSxNQUFNO0lBQU5BLE1BQU0sR0FBQUQsV0FBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxXQUFBO0lBQUFFLFVB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QUNFUCwwREFBQTtJQUFLcUUsS0FBSyxFQUFBWixhQUFBLENBQUFBLGFBQUEsS0FDSG5ELGFBQWEsQ0FBQ1csaUJBQWlCLEdBQy9CZSxNQUFNLGFBQU5BLE1BQU0sdUJBQU5BLE1BQU0sQ0FBRWYsaUJBQWlCO0VBQzlCLGdCQUNFakIsMERBQUE7SUFBS3FFLEtBQUssRUFBQVosYUFBQSxDQUFBQSxhQUFBLENBQUFBLGFBQUEsS0FDSG5ELGFBQWEsQ0FBQ1EsV0FBVyxHQUN6QmtCLE1BQU0sYUFBTkEsTUFBTSx1QkFBTkEsTUFBTSxDQUFFbEIsV0FBVztNQUN0QkQsS0FBSyxFQUFMQTtJQUFLO0VBQ1AsQ0FBRSxDQUNILENBQ0osQ0FDUixlQUNEYiwwREFBQSxjQUFNcUIsUUFBYyxDQUNaLENBQUM7QUFFckIsQ0FBQyxDQUFDO0FBQ0ZILGVBQWUsQ0FBQ29ELFlBQVksR0FBRztFQUMzQnRDLE1BQU0sRUFBRTFCO0FBQ1osQ0FBQztBQUNELGlFQUFlWSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvU2Nyb2xsSW5kaWNhdG9yLmpzeD83MWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICAgIHVzZUNhbGxiYWNrLFxuICAgIHVzZVJlZixcbiAgICB1c2VTdGF0ZSxcbn0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBkZWZlcnJlZCB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuaW1wb3J0IHVzZU11dGF0aW9uT2JzZXJ2ZXIgZnJvbSAnLi4vaG9va3MvdXNlTXV0YXRpb25PYnNlcnZlcidcblxuY29uc3QgZGVmYXVsdFN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmMWYxZjEnLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH0sXG4gICAgcHJvZ3Jlc3NCYXI6IHtcbiAgICAgICAgaGVpZ2h0OiAzLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnIzA0QUE2RCcsXG4gICAgfSxcbiAgICBwcm9ncmVzc0NvbnRhaW5lcjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAvLyBoZWlnaHQ6IDMsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjY2NjJyxcbiAgICB9LFxufVxuXG5leHBvcnQgY29uc3QgU2Nyb2xsSW5kaWNhdG9yID0gUmVhY3QubWVtbygoe1xuICAgIGNoaWxkcmVuLFxuICAgIENvbXBvbmVudCA9ICdkaXYnLFxuICAgIG11dGF0aW9uQ29uZjogY29uZiA9IHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSxcbiAgICBtdXRhdGlvbkRlZmVyID0gMTAwMCxcbiAgICBzdHlsZXMgPSB7fSxcbiAgICB3aWR0aDogZGVmYXVsdFdpZHRoID0gJzAuMDAlJyxcbiAgICAuLi5wcm9wc1xufSkgPT4ge1xuICAgIGNvbnN0IHJlZiA9IHVzZVJlZigpXG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7IHdpZHRoOiBkZWZhdWx0V2lkdGggfSlcbiAgICBjb25zdCB7IHdpZHRoIH0gPSBzdGF0ZVxuICAgIGNvbnN0IHVwZGF0ZVdpZHRoID0gdXNlQ2FsbGJhY2sodGFyZ2V0ID0+IHtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVyblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBvZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxUb3AsXG4gICAgICAgIH0gPSB0YXJnZXRcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0SGVpZ2h0XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAoKHNjcm9sbFRvcCAvIGhlaWdodCkgKiAxMDApIHx8IDBcbiAgICAgICAgY29uc3QgaXNVbnNjcm9sbGFibGUgPSAhc2Nyb2xsVG9wXG4gICAgICAgICAgICAmJiBvZmZzZXRIZWlnaHQgPT09IHNjcm9sbEhlaWdodFxuICAgICAgICBjb25zdCBuZXdXaWR0aCA9IGlzVW5zY3JvbGxhYmxlXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogYCR7cGVyY2VudGFnZS50b0ZpeGVkKDIpfSVgXG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSB3aWR0aCAhPT0gbmV3V2lkdGhcbiAgICAgICAgICAgIHx8IGlzVW5zY3JvbGxhYmxlICE9PSBzdGF0ZS5pc1Vuc2Nyb2xsYWJsZVxuICAgICAgICBjaGFuZ2VkICYmIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzVW5zY3JvbGxhYmxlLFxuICAgICAgICAgICAgd2lkdGg6IG5ld1dpZHRoLFxuICAgICAgICB9KVxuICAgIH0pXG5cbiAgICBjb25mICYmIHVzZU11dGF0aW9uT2JzZXJ2ZXIoXG4gICAgICAgIHJlZixcbiAgICAgICAgdXNlQ2FsbGJhY2soXG4gICAgICAgICAgICBkZWZlcnJlZChcbiAgICAgICAgICAgICAgICAoKSA9PiB1cGRhdGVXaWR0aChyZWY/LmN1cnJlbnQpLFxuICAgICAgICAgICAgICAgIG11dGF0aW9uRGVmZXIsXG4gICAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIGNvbmYsXG4gICAgKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENvbXBvbmVudCB7Li4ue1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICByZWYsXG4gICAgICAgICAgICBvblNjcm9sbDogKGUsIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVXaWR0aChyZWYuY3VycmVudClcbiAgICAgICAgICAgICAgICBwcm9wcy5vblNjcm9sbD8uKGUsIC4uLmFyZ3MpXG4gICAgICAgICAgICB9LFxuICAgICAgICB9fT5cbiAgICAgICAgICAgIHt3aWR0aCAhPT0gbnVsbCAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0U3R5bGVzLnJvb3QsXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcz8ucm9vdCxcbiAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGVmYXVsdFN0eWxlcy5wcm9ncmVzc0NvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlcz8ucHJvZ3Jlc3NDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRTdHlsZXMucHJvZ3Jlc3NCYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGVzPy5wcm9ncmVzc0JhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXY+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgICA8L0NvbXBvbmVudCA+XG4gICAgKVxufSlcblNjcm9sbEluZGljYXRvci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgc3R5bGVzOiBkZWZhdWx0U3R5bGVzXG59XG5leHBvcnQgZGVmYXVsdCBTY3JvbGxJbmRpY2F0b3IiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VDYWxsYmFjayIsInVzZVJlZiIsInVzZVN0YXRlIiwiZGVmZXJyZWQiLCJ1c2VNdXRhdGlvbk9ic2VydmVyIiwiZGVmYXVsdFN0eWxlcyIsInJvb3QiLCJiYWNrZ3JvdW5kQ29sb3IiLCJsZWZ0IiwicG9zaXRpb24iLCJ0b3AiLCJ6SW5kZXgiLCJ3aWR0aCIsInByb2dyZXNzQmFyIiwiaGVpZ2h0IiwiYmFja2dyb3VuZCIsInByb2dyZXNzQ29udGFpbmVyIiwiU2Nyb2xsSW5kaWNhdG9yIiwibWVtbyIsIl9yZWYiLCJjaGlsZHJlbiIsIl9yZWYkQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiX3JlZiRtdXRhdGlvbkNvbmYiLCJtdXRhdGlvbkNvbmYiLCJjb25mIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIl9yZWYkbXV0YXRpb25EZWZlciIsIm11dGF0aW9uRGVmZXIiLCJfcmVmJHN0eWxlcyIsInN0eWxlcyIsIl9yZWYkd2lkdGgiLCJkZWZhdWx0V2lkdGgiLCJwcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsInJlZiIsIl91c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsInN0YXRlIiwic2V0U3RhdGUiLCJ1cGRhdGVXaWR0aCIsInRhcmdldCIsIm9mZnNldEhlaWdodCIsInNjcm9sbEhlaWdodCIsInNjcm9sbFRvcCIsInBlcmNlbnRhZ2UiLCJpc1Vuc2Nyb2xsYWJsZSIsIm5ld1dpZHRoIiwiY29uY2F0IiwidG9GaXhlZCIsImNoYW5nZWQiLCJjdXJyZW50IiwiY3JlYXRlRWxlbWVudCIsIl9vYmplY3RTcHJlYWQiLCJvblNjcm9sbCIsImUiLCJfcHJvcHMkb25TY3JvbGwiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNhbGwiLCJhcHBseSIsInN0eWxlIiwiZGVmYXVsdFByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/ScrollIndicator.jsx\n')},"./src/utils/reactjs/components/ScrollbarStyled.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ScrollbarStyled": () => (/* binding */ ScrollbarStyled),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "styleAScollbar": () => (/* binding */ styleAScollbar)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/window.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _ScrollIndicator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/ScrollIndicator.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar _templateObject;\nvar _excluded = ["Component", "css", "indicator"],\n  _excluded2 = ["background", "display", "width"],\n  _excluded3 = ["background", "width"];\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar styleAScollbar = function styleAScollbar(selector, isMobile) {\n  var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "".concat(isMobile ? 3 : 8, "px");\n  var scrollbarBg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \'#eee\';\n  var thumbBg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \'#989393\';\n  return "\\n".concat(selector, "::-webkit-scrollbar {\\n    width: ").concat(width, ";\\n    background: ").concat(scrollbarBg, ";\\n}\\n").concat(selector, "::-webkit-scrollbar-thumb {\\n    background: ").concat(thumbBg, ";\\n    border-radius: ").concat(width, ";\\n}");\n};\nvar _ScrollbarStyled = function _ScrollbarStyled(_ref) {\n  var _ref$Component = _ref.Component,\n    Component = _ref$Component === void 0 ? \'div\' : _ref$Component,\n    _ref$css = _ref.css,\n    css = _ref$css === void 0 ? \'\' : _ref$css,\n    _ref$indicator = _ref.indicator,\n    indicator = _ref$indicator === void 0 ? true : _ref$indicator,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var idClass = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    var _ScrollbarStyled$seri;\n    (_ScrollbarStyled$seri = _ScrollbarStyled.serial) !== null && _ScrollbarStyled$seri !== void 0 ? _ScrollbarStyled$seri : _ScrollbarStyled.serial = 1000;\n    var prefix = \'ScrollbarStyled\';\n    var id = "SS".concat(++_ScrollbarStyled.serial);\n    return "".concat(prefix, " ").concat(id);\n  }, []);\n  props = _objectSpread(_objectSpread(_objectSpread({}, props), (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(indicator) && indicator), {}, {\n    className: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.className)([idClass, props.className, \'teststyled\'])\n  });\n  if (indicator) {\n    props.Component = Component;\n    Component = _ScrollIndicator__WEBPACK_IMPORTED_MODULE_4__["default"];\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, props);\n};\nvar ScrollbarStyled = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo((0,styled_components__WEBPACK_IMPORTED_MODULE_5__/* .styled */ .zo)(_ScrollbarStyled)(_templateObject || (_templateObject = _taggedTemplateLiteral(["", ""])), function (_ref2) {\n  var _ref2$isMobile = _ref2.isMobile,\n    isMobile = _ref2$isMobile === void 0 ? (0,_hooks__WEBPACK_IMPORTED_MODULE_3__.useIsMobile)() : _ref2$isMobile,\n    _ref2$scrollbar = _ref2.scrollbar,\n    _ref2$scrollbar2 = _ref2$scrollbar === void 0 ? {} : _ref2$scrollbar,\n    _ref2$scrollbar2$back = _ref2$scrollbar2.background,\n    background = _ref2$scrollbar2$back === void 0 ? \'#eee\' : _ref2$scrollbar2$back,\n    _ref2$scrollbar2$disp = _ref2$scrollbar2.display,\n    display = _ref2$scrollbar2$disp === void 0 ? !isMobile ? \'block\' : \'none\' : _ref2$scrollbar2$disp,\n    _ref2$scrollbar2$widt = _ref2$scrollbar2.width,\n    width = _ref2$scrollbar2$widt === void 0 ? "".concat(isMobile ? 3 : 8, "px") : _ref2$scrollbar2$widt,\n    styles1 = _objectWithoutProperties(_ref2$scrollbar2, _excluded2),\n    _ref2$thumb = _ref2.thumb,\n    _ref2$thumb2 = _ref2$thumb === void 0 ? {} : _ref2$thumb,\n    _ref2$thumb2$backgrou = _ref2$thumb2.background,\n    tBg = _ref2$thumb2$backgrou === void 0 ? \'#989393\' : _ref2$thumb2$backgrou,\n    _ref2$thumb2$width = _ref2$thumb2.width,\n    tWidth = _ref2$thumb2$width === void 0 ? width : _ref2$thumb2$width,\n    styles2 = _objectWithoutProperties(_ref2$thumb2, _excluded3);\n  return "\\n    &::-webkit-scrollbar {\\n        display: ".concat(display, ";\\n        background: ").concat(background, ";\\n        width: ").concat(width, ";\\n        ").concat(styles1, "\\n    }\\n    &::-webkit-scrollbar-thumb {\\n        display: ").concat(display, ";\\n        background: ").concat(tBg, ";\\n        border-radius: ").concat(tWidth, ";\\n        ").concat(styles2, "\\n    }");\n}));\nScrollbarStyled.defaultProps = {\n  // inline styles for the <Style> tag to define scrollbar width and color\n  // css: styleAScollbar\n};\nScrollbarStyled.propTypes = {\n  Component: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().elementType),\n  css: prop_types__WEBPACK_IMPORTED_MODULE_6___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n  // args: selector (string)\n  (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func)])\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ScrollbarStyled);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/ScrollbarStyled.jsx\n')},"./src/utils/reactjs/components/UseHook.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "UseHook": () => (/* binding */ UseHook),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n/**\n * @name    UseHook\n * @summary a component that simply invokes one or more React hooks to produce a result for displaying\n * \n * @param   {Array}     props.args      (optional) arguments for a single hook\n * @param   {Function}  props.hook      (optional) single hook\n * @param   {Array<{args: Array, hook: Function}>} props.hooks (optional) to invoke multiple hooks.\n *                                      If `hooks` is provided, `hook` & `args` will be ignored.\n * @param   {Function}  props.render    (optional) callback to produce a view from the results from the hooks.\n *                                      If not provided, the array of results will be directly placed on the DOM.\n *                                      Arguments: `Array`\n * \n * @returns {Array<{args: Array, hook: Function}>}\n * @example `javascript\n * const hooks = [\n *     [useIsMobile], // hook doesn\'t require any arguments\n *     [useInverted, true], // 2nd and onwards items will be passed on to the hook as arguments\n *     [useRxSubject, rxSidebarState, ({visible}) => visible], // pass on as many arguments as needed\n *     [\'Not a hook\'], // if first item isn\'t a function, it will be available as a result as provided.\n * ]\n * const render = ([\n *     isMobile,\n *     lightMode,\n *     [sidebarVisible],\n *     str\n * ]) => (\n *     <ul>\n *         <li>Layout: {isMobile ? \'mobile\': \'desktop\'}</li>\n *         <li>Dark mode: {lightMode ? \'no\' : \'yes\' }</li>\n *         <li>Sidebar: {sidebarVisible ? \'visible\': \'hidden\'}</li>\n *         <li>The string: {str}</li>\n *     </ul>\n * )\n * \n * const element = <UseHook {...{ hooks, render }} />\n * \n * // single hook\n * const hook = useIsMobile\n * const args = [] // no arguments needed\n * const render = isMobile => `Layout: ${isMobile ? \'mobile\' : \'desktop\'}`\n * const element = <UseHook {...{ args, hook, render }} />\n * `\n */\nvar UseHook = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (props) {\n  var args = props.args,\n    hook = props.hook,\n    hooks = props.hooks,\n    render = props.render;\n  var executeHook = function executeHook() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],\n      _ref2 = _toArray(_ref),\n      hook = _ref2[0],\n      args = _ref2.slice(1);\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(hook) ? hook.apply(void 0, _toConsumableArray(args)) : hook;\n  };\n  var result = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(hooks) ? hooks.map(executeHook) : executeHook([hook].concat(_toConsumableArray(args || [])));\n  return !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(render) ? result : render(result);\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UseHook);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL1VzZUhvb2suanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlCO0FBQ2dCOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1HLE9BQU8sZ0JBQUdILGlEQUFVLENBQUMsVUFBQ0ssS0FBSyxFQUFLO0VBQ3pDLElBQ0lDLElBQUksR0FJSkQsS0FBSyxDQUpMQyxJQUFJO0lBQ0pDLElBQUksR0FHSkYsS0FBSyxDQUhMRSxJQUFJO0lBQ0pDLEtBQUssR0FFTEgsS0FBSyxDQUZMRyxLQUFLO0lBQ0xDLE1BQU0sR0FDTkosS0FBSyxDQURMSSxNQUFNO0VBRVYsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUE7SUFBQSxJQUFBQyxJQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFzQixFQUFFO01BQUFHLEtBQUEsR0FBQUMsUUFBQSxDQUFBTCxJQUFBO01BQW5CSixJQUFJLEdBQUFRLEtBQUE7TUFBS1QsSUFBSSxHQUFBUyxLQUFBLENBQUFFLEtBQUE7SUFBQSxPQUFXZiw0Q0FBSSxDQUFDSyxJQUFJLENBQUMsR0FDbERBLElBQUksQ0FBQVcsS0FBQSxTQUFBQyxrQkFBQSxDQUFJYixJQUFJLEVBQUMsR0FDYkMsSUFBSTtFQUFBO0VBQ1YsSUFBTWEsTUFBTSxHQUFHbkIsNkNBQUssQ0FBQ08sS0FBSyxDQUFDLEdBQ3JCQSxLQUFLLENBQUNhLEdBQUcsQ0FBQ1gsV0FBVyxDQUFDLEdBQ3RCQSxXQUFXLEVBQUVILElBQUksRUFBQWUsTUFBQSxDQUFBSCxrQkFBQSxDQUFLYixJQUFJLElBQUksRUFBRSxFQUFDLENBQUM7RUFFeEMsT0FBTyxDQUFDSiw0Q0FBSSxDQUFDTyxNQUFNLENBQUMsR0FDZFcsTUFBTSxHQUNOWCxNQUFNLENBQUNXLE1BQU0sQ0FBQztBQUN4QixDQUFDLENBQUM7QUFDRixpRUFBZWpCLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvY29tcG9uZW50cy9Vc2VIb29rLmpzeD80ZGY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGlzQXJyLCBpc0ZuIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5cbi8qKlxuICogQG5hbWUgICAgVXNlSG9va1xuICogQHN1bW1hcnkgYSBjb21wb25lbnQgdGhhdCBzaW1wbHkgaW52b2tlcyBvbmUgb3IgbW9yZSBSZWFjdCBob29rcyB0byBwcm9kdWNlIGEgcmVzdWx0IGZvciBkaXNwbGF5aW5nXG4gKiBcbiAqIEBwYXJhbSAgIHtBcnJheX0gICAgIHByb3BzLmFyZ3MgICAgICAob3B0aW9uYWwpIGFyZ3VtZW50cyBmb3IgYSBzaW5nbGUgaG9va1xuICogQHBhcmFtICAge0Z1bmN0aW9ufSAgcHJvcHMuaG9vayAgICAgIChvcHRpb25hbCkgc2luZ2xlIGhvb2tcbiAqIEBwYXJhbSAgIHtBcnJheTx7YXJnczogQXJyYXksIGhvb2s6IEZ1bmN0aW9ufT59IHByb3BzLmhvb2tzIChvcHRpb25hbCkgdG8gaW52b2tlIG11bHRpcGxlIGhvb2tzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGBob29rc2AgaXMgcHJvdmlkZWQsIGBob29rYCAmIGBhcmdzYCB3aWxsIGJlIGlnbm9yZWQuXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICBwcm9wcy5yZW5kZXIgICAgKG9wdGlvbmFsKSBjYWxsYmFjayB0byBwcm9kdWNlIGEgdmlldyBmcm9tIHRoZSByZXN1bHRzIGZyb20gdGhlIGhvb2tzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBwcm92aWRlZCwgdGhlIGFycmF5IG9mIHJlc3VsdHMgd2lsbCBiZSBkaXJlY3RseSBwbGFjZWQgb24gdGhlIERPTS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmd1bWVudHM6IGBBcnJheWBcbiAqIFxuICogQHJldHVybnMge0FycmF5PHthcmdzOiBBcnJheSwgaG9vazogRnVuY3Rpb259Pn1cbiAqIEBleGFtcGxlIGBqYXZhc2NyaXB0XG4gKiBjb25zdCBob29rcyA9IFtcbiAqICAgICBbdXNlSXNNb2JpbGVdLCAvLyBob29rIGRvZXNuJ3QgcmVxdWlyZSBhbnkgYXJndW1lbnRzXG4gKiAgICAgW3VzZUludmVydGVkLCB0cnVlXSwgLy8gMm5kIGFuZCBvbndhcmRzIGl0ZW1zIHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRoZSBob29rIGFzIGFyZ3VtZW50c1xuICogICAgIFt1c2VSeFN1YmplY3QsIHJ4U2lkZWJhclN0YXRlLCAoe3Zpc2libGV9KSA9PiB2aXNpYmxlXSwgLy8gcGFzcyBvbiBhcyBtYW55IGFyZ3VtZW50cyBhcyBuZWVkZWRcbiAqICAgICBbJ05vdCBhIGhvb2snXSwgLy8gaWYgZmlyc3QgaXRlbSBpc24ndCBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGF2YWlsYWJsZSBhcyBhIHJlc3VsdCBhcyBwcm92aWRlZC5cbiAqIF1cbiAqIGNvbnN0IHJlbmRlciA9IChbXG4gKiAgICAgaXNNb2JpbGUsXG4gKiAgICAgbGlnaHRNb2RlLFxuICogICAgIFtzaWRlYmFyVmlzaWJsZV0sXG4gKiAgICAgc3RyXG4gKiBdKSA9PiAoXG4gKiAgICAgPHVsPlxuICogICAgICAgICA8bGk+TGF5b3V0OiB7aXNNb2JpbGUgPyAnbW9iaWxlJzogJ2Rlc2t0b3AnfTwvbGk+XG4gKiAgICAgICAgIDxsaT5EYXJrIG1vZGU6IHtsaWdodE1vZGUgPyAnbm8nIDogJ3llcycgfTwvbGk+XG4gKiAgICAgICAgIDxsaT5TaWRlYmFyOiB7c2lkZWJhclZpc2libGUgPyAndmlzaWJsZSc6ICdoaWRkZW4nfTwvbGk+XG4gKiAgICAgICAgIDxsaT5UaGUgc3RyaW5nOiB7c3RyfTwvbGk+XG4gKiAgICAgPC91bD5cbiAqIClcbiAqIFxuICogY29uc3QgZWxlbWVudCA9IDxVc2VIb29rIHsuLi57IGhvb2tzLCByZW5kZXIgfX0gLz5cbiAqIFxuICogLy8gc2luZ2xlIGhvb2tcbiAqIGNvbnN0IGhvb2sgPSB1c2VJc01vYmlsZVxuICogY29uc3QgYXJncyA9IFtdIC8vIG5vIGFyZ3VtZW50cyBuZWVkZWRcbiAqIGNvbnN0IHJlbmRlciA9IGlzTW9iaWxlID0+IGBMYXlvdXQ6ICR7aXNNb2JpbGUgPyAnbW9iaWxlJyA6ICdkZXNrdG9wJ31gXG4gKiBjb25zdCBlbGVtZW50ID0gPFVzZUhvb2sgey4uLnsgYXJncywgaG9vaywgcmVuZGVyIH19IC8+XG4gKiBgXG4gKi9cbmV4cG9ydCBjb25zdCBVc2VIb29rID0gUmVhY3QubWVtbygocHJvcHMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGFyZ3MsXG4gICAgICAgIGhvb2ssXG4gICAgICAgIGhvb2tzLFxuICAgICAgICByZW5kZXJcbiAgICB9ID0gcHJvcHNcbiAgICBjb25zdCBleGVjdXRlSG9vayA9IChbaG9vaywgLi4uYXJnc10gPSBbXSkgPT4gaXNGbihob29rKVxuICAgICAgICA/IGhvb2soLi4uYXJncylcbiAgICAgICAgOiBob29rXG4gICAgY29uc3QgcmVzdWx0ID0gaXNBcnIoaG9va3MpXG4gICAgICAgID8gaG9va3MubWFwKGV4ZWN1dGVIb29rKVxuICAgICAgICA6IGV4ZWN1dGVIb29rKFtob29rLCAuLi5hcmdzIHx8IFtdXSlcblxuICAgIHJldHVybiAhaXNGbihyZW5kZXIpXG4gICAgICAgID8gcmVzdWx0XG4gICAgICAgIDogcmVuZGVyKHJlc3VsdClcbn0pXG5leHBvcnQgZGVmYXVsdCBVc2VIb29rIl0sIm5hbWVzIjpbIlJlYWN0IiwiaXNBcnIiLCJpc0ZuIiwiVXNlSG9vayIsIm1lbW8iLCJwcm9wcyIsImFyZ3MiLCJob29rIiwiaG9va3MiLCJyZW5kZXIiLCJleGVjdXRlSG9vayIsIl9yZWYiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfcmVmMiIsIl90b0FycmF5Iiwic2xpY2UiLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheSIsInJlc3VsdCIsIm1hcCIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/UseHook.jsx\n')},"./src/utils/reactjs/components/form/FormBuilder.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "FormBuilder": () => (/* binding */ FormBuilder),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _rx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/rx.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _toProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/toProps.js");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/reactjs/components/Button.jsx");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/reactjs/components/Message.jsx");\n/* harmony import */ var _RxSubjectView__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/utils/reactjs/components/RxSubjectView.jsx");\n/* harmony import */ var _FormInput__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/utils/reactjs/components/form/FormInput.jsx");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/utils/reactjs/components/form/utils.js");\nvar _excluded = ["Component"];\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar textsCap = {\n  close: \'close\',\n  submit: \'submit\',\n  submitError: \'failed to submit form!\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(textsCap, true);\nvar formIds = new Map();\nvar defaultComponents = {\n  Button: \'button\',\n  Form: \'form\',\n  FormInput: _FormInput__WEBPACK_IMPORTED_MODULE_9__["default"],\n  Message: _Message__WEBPACK_IMPORTED_MODULE_7__.Message\n};\nvar FormBuilder = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (propsOrg) {\n  var _getButton;\n  var props = _objectSpread({}, propsOrg);\n  var actionsPrefix = props.actionsPrefix,\n    actionsSuffix = props.actionsSuffix,\n    components = props.components,\n    _props$defer = props.defer,\n    defer = _props$defer === void 0 ? 300 : _props$defer,\n    loadingProp = props.submitButtonLoadingProp,\n    _props$closeText = props.closeText,\n    closeText = _props$closeText === void 0 ? textsCap.close : _props$closeText,\n    closeOnSubmit = props.closeOnSubmit,\n    _props$formProps = props.formProps,\n    formProps = _props$formProps === void 0 ? {} : _props$formProps,\n    message = props.message,\n    formOnChange = props.onChange,\n    onClose = props.onClose,\n    onMount = props.onMount,\n    onSubmit = props.onSubmit,\n    onUnmount = props.onUnmount,\n    prefix = props.prefix,\n    _props$submitDisabled = props.submitDisabledIfUnchanged,\n    requireChange = _props$submitDisabled === void 0 ? false : _props$submitDisabled,\n    submitText = props.submitText,\n    suffix = props.suffix;\n  var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n      var _window, _window$___formCount, _rxInputs$value, _rxInputs$value$forEa;\n      // setup form ID\n      (_window$___formCount = (_window = window).___formCount) !== null && _window$___formCount !== void 0 ? _window$___formCount : _window.___formCount = 1000;\n      var formId = formProps.id;\n      if (!formId || formIds.get(formId)) {\n        // create unique ID if multiple instances of the same form is created \n        formId = "".concat(formId || \'FormBuilder\').concat(++___formCount);\n      }\n      formIds.set(formId, true);\n      formProps.id = formId;\n\n      // subject for internal error messages\n      var rxMessage = new rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X();\n      var toObserve = [\'inputs\', \'inputsHidden\', \'inputsDisabled\', \'inputsReadOnly\', \'loading\', \'message\', \'submitInProgress\', \'submitDisabled\', \'values\', \'valuesToCompare\'];\n      var toUpdate = toObserve.map(function (key) {\n        var value = propsOrg[key];\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isSubjectLike)(value)) return;\n        var subject = new rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X(value);\n        props[key] = subject;\n        return [key, subject];\n      }).filter(Boolean);\n      var rxInputs = props.inputs;\n      (_rxInputs$value = rxInputs.value) === null || _rxInputs$value === void 0 ? void 0 : (_rxInputs$value$forEa = _rxInputs$value.forEach) === null || _rxInputs$value$forEa === void 0 ? void 0 : _rxInputs$value$forEa.call(_rxInputs$value, _utils__WEBPACK_IMPORTED_MODULE_10__.addMissingProps);\n      var rxValues = props.values;\n      var stateModifier = function stateModifier(_ref) {\n        var _ref2 = _slicedToArray(_ref, 8),\n          inputs = _ref2[0],\n          inputsHidden = _ref2[1],\n          inputsDisabled = _ref2[2],\n          inputsReadOnly = _ref2[3],\n          loading = _ref2[4],\n          submitInProgress = _ref2[5],\n          submitDisabled = _ref2[6],\n          valuesToCompare = _ref2[7];\n        inputsHidden = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.arrUnique)([].concat(_toConsumableArray((0,_utils__WEBPACK_IMPORTED_MODULE_3__.toArray)(inputsHidden)), _toConsumableArray(inputs.filter(function (_ref3) {\n          var _ref3$inputProps = _ref3.inputProps,\n            inputProps = _ref3$inputProps === void 0 ? {} : _ref3$inputProps;\n          var hidden = inputProps.hidden,\n            name = inputProps.name;\n          return !inputsHidden.includes(name) && ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isSubjectLike)(hidden) ? hidden.value : (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(hidden) ? !!hidden(values, name) : hidden);\n        }).map(function (x) {\n          return x.inputProps.name;\n        }))));\n        var inputsInvalid = !!inputs.find(function (x) {\n          return (0,_utils__WEBPACK_IMPORTED_MODULE_10__.checkInputInvalid)(x, inputsHidden);\n        });\n        var valuesChanged = requireChange && (0,_utils__WEBPACK_IMPORTED_MODULE_10__.checkValuesChanged)(inputs, values, valuesToCompare, inputsHidden);\n\n        // disable submit button if one of the following is true:\n        // 1. none of the input\'s value has changed\n        // 2. message status or form is "loading" (indicates submit or some input validation is in progress)\n        // 3. one or more inputs contains invalid value (based on validation criteria)\n        // 4. one or more required inputs does not contain a value\n        submitDisabled = submitDisabled || submitInProgress || loading || !!inputsInvalid || valuesChanged;\n        return {\n          inputs: inputs,\n          inputsHidden: inputsHidden,\n          inputsDisabled: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.toArray)(inputsDisabled),\n          inputsReadOnly: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.toArray)(inputsReadOnly),\n          init: true,\n          loading: loading,\n          submitInProgress: submitInProgress,\n          submitDisabled: submitDisabled,\n          values: values,\n          valuesToCompare: valuesToCompare\n        };\n      };\n      var rxState = (0,_rx__WEBPACK_IMPORTED_MODULE_2__.copyRxSubject)(toObserve.map(function (key) {\n        return props[key];\n      }), null, stateModifier, defer);\n      var handleSubmit = /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n          var _inputs, _values, allOk;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                if (!(submitDisabled || loading)) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt("return");\n              case 3:\n                _context.prev = 3;\n                _inputs = rxInputs.value || [];\n                _values = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.getValues)(_inputs);\n                allOk = !loading && !submitDisabled && !_inputs.find(function (x) {\n                  return (0,_utils__WEBPACK_IMPORTED_MODULE_10__.checkInputInvalid)(x, rxState.value.inputsHidden);\n                });\n                _context.t0 = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(onSubmit);\n                if (!_context.t0) {\n                  _context.next = 11;\n                  break;\n                }\n                _context.next = 11;\n                return onSubmit(allOk, _values, _inputs, event);\n              case 11:\n                closeOnSubmit && (onClose === null || onClose === void 0 ? void 0 : onClose());\n                _context.next = 17;\n                break;\n              case 14:\n                _context.prev = 14;\n                _context.t1 = _context["catch"](3);\n                rxMessage.next({\n                  header: textsCap.submitError,\n                  text: "".concat(_context.t1).replace(\'Error: \', \'\')\n                });\n              case 17:\n              case "end":\n                return _context.stop();\n            }\n          }, _callee, null, [[3, 14]]);\n        }));\n        return function handleSubmit(_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n      var handleChangeCb = function handleChangeCb(name) {\n        return /*#__PURE__*/function () {\n          var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event, _ref5) {\n            var error, value, inputs, input, inputProps, _input$inputProps, _input$inputProps2, onChange, triggerChange, values, doTrigger, formValid;\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  error = _ref5.error, value = _ref5.value;\n                  inputs = rxInputs.value || [];\n                  input = name && (0,_utils__WEBPACK_IMPORTED_MODULE_10__.findInput)(name, inputs);\n                  if (input) {\n                    _context2.next = 5;\n                    break;\n                  }\n                  return _context2.abrupt("return");\n                case 5:\n                  inputProps = input.inputProps;\n                  inputProps.error = error;\n                  inputProps.value = value;\n                  input.valid = error !== true;\n                  _input$inputProps = input.inputProps, _input$inputProps2 = _input$inputProps === void 0 ? {} : _input$inputProps, onChange = _input$inputProps2.onChange;\n                  triggerChange = function triggerChange(values) {\n                    values = values || (0,_utils__WEBPACK_IMPORTED_MODULE_10__.getValues)(inputs);\n                    rxInputs.next(_toConsumableArray(inputs));\n                    rxValues.next(_objectSpread({}, values));\n                  }; // clear submit error message\n                  if (rxMessage.value) setTimeout(function () {\n                    return rxMessage.next(null);\n                  });\n                  values = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.getValues)(inputs);\n                  _context2.next = 15;\n                  return onChange === null || onChange === void 0 ? void 0 : onChange(values, inputs, event);\n                case 15:\n                  doTrigger = _context2.sent;\n                  if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(formOnChange)) {\n                    _context2.next = 18;\n                    break;\n                  }\n                  return _context2.abrupt("return", doTrigger !== false && triggerChange());\n                case 18:\n                  formValid = !inputs.find(function (x) {\n                    return (0,_utils__WEBPACK_IMPORTED_MODULE_10__.checkInputInvalid)(x, rxState.value.inputsHidden);\n                  });\n                  _context2.next = 21;\n                  return formOnChange(formValid, doTrigger ? (0,_utils__WEBPACK_IMPORTED_MODULE_10__.getValues)(inputs) : values, inputs, name);\n                case 21:\n                  doTrigger = _context2.sent;\n                  doTrigger !== false && triggerChange();\n                case 23:\n                case "end":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n          return function (_x3, _x4) {\n            return _ref6.apply(this, arguments);\n          };\n        }();\n      };\n      var getButton = function getButton(textOrProps, extraProps) {\n        if (textOrProps === null) return;\n        var _toProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(textOrProps),\n          _toProps$Component = _toProps.Component,\n          Component = _toProps$Component === void 0 ? Button : _toProps$Component,\n          props = _objectWithoutProperties(_toProps, _excluded);\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _objectSpread(_objectSpread(_objectSpread({}, props), extraProps), {}, {\n          children: props.children || extraProps.children,\n          onClick: function onClick() {\n            var _args$, _args$$preventDefault, _props$onClick, _extraProps$onClick;\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            (_args$ = args[0]) === null || _args$ === void 0 ? void 0 : (_args$$preventDefault = _args$.preventDefault) === null || _args$$preventDefault === void 0 ? void 0 : _args$$preventDefault.call(_args$);\n            (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call.apply(_props$onClick, [props].concat(args));\n            extraProps === null || extraProps === void 0 ? void 0 : (_extraProps$onClick = extraProps.onClick) === null || _extraProps$onClick === void 0 ? void 0 : _extraProps$onClick.call.apply(_extraProps$onClick, [extraProps].concat(args));\n          },\n          style: _objectSpread(_objectSpread({}, extraProps === null || extraProps === void 0 ? void 0 : extraProps.style), props.style)\n        }));\n      };\n      return {\n        formId: formId,\n        getButton: getButton,\n        handleChangeCb: handleChangeCb,\n        handleSubmit: handleSubmit,\n        rxMessage: rxMessage,\n        rxState: rxState,\n        toUpdate: toUpdate\n      };\n    }, []),\n    formId = _useMemo.formId,\n    getButton = _useMemo.getButton,\n    handleChangeCb = _useMemo.handleChangeCb,\n    handleSubmit = _useMemo.handleSubmit,\n    rxMessage = _useMemo.rxMessage,\n    rxState = _useMemo.rxState,\n    toUpdate = _useMemo.toUpdate;\n\n  // synchronize with local subjects\n  toUpdate.forEach(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n      key = _ref8[0],\n      subject = _ref8[1];\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n      subject.next(propsOrg[key]);\n    }, [propsOrg[key]]);\n  });\n  // delay form state update when multiple update is triggered concurrently/too frequently\n  var _useRxSubject = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useRxSubject)(rxState),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 1),\n    state = _useRxSubject2[0];\n  var _defaultComponents$co = _objectSpread(_objectSpread({}, defaultComponents), components),\n    _defaultComponents$co2 = _defaultComponents$co.Actions,\n    Actions = _defaultComponents$co2 === void 0 ? \'div\' : _defaultComponents$co2,\n    _defaultComponents$co3 = _defaultComponents$co.Button,\n    Button = _defaultComponents$co3 === void 0 ? _Button__WEBPACK_IMPORTED_MODULE_6__["default"] : _defaultComponents$co3,\n    _defaultComponents$co4 = _defaultComponents$co.Form,\n    Form = _defaultComponents$co4 === void 0 ? \'form\' : _defaultComponents$co4,\n    _defaultComponents$co5 = _defaultComponents$co.FormInput,\n    FormInput = _defaultComponents$co5 === void 0 ? _FormInput__WEBPACK_IMPORTED_MODULE_9__["default"] : _defaultComponents$co5,\n    _defaultComponents$co6 = _defaultComponents$co.Message,\n    Message = _defaultComponents$co6 === void 0 ? _Message__WEBPACK_IMPORTED_MODULE_7__.Message : _defaultComponents$co6;\n  var init = state.init,\n    _state$inputs = state.inputs,\n    inputs = _state$inputs === void 0 ? [] : _state$inputs,\n    _state$loading = state.loading,\n    loading = _state$loading === void 0 ? false : _state$loading,\n    _state$submitDisabled = state.submitDisabled,\n    submitDisabled = _state$submitDisabled === void 0 ? false : _state$submitDisabled,\n    _state$values = state.values,\n    values = _state$values === void 0 ? {} : _state$values;\n  (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useMount)(function () {\n    return onMount === null || onMount === void 0 ? void 0 : onMount(props, formId, values, submitDisabled);\n  }, function () {\n    return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount(props, formId, values, submitDisabled);\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Form, _objectSpread({\n    autoComplete: \'off\',\n    className: \'form-builder\',\n    noValidate: true\n  }, formProps), prefix, init && inputs.map(addInterceptorCb(_objectSpread(_objectSpread({}, props), state), handleChangeCb, formId)).map(function (input) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FormInput, input);\n  }), (submitText || onClose) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Actions, {\n    style: {\n      cursor: loading ? \'progress\' : \'\',\n      padding: \'15px 0 10px 0\',\n      textAlign: \'right\'\n    }\n  }, actionsPrefix, onClose && getButton(closeText, {\n    onClick: onClose,\n    status: \'success\',\n    style: {\n      marginLeft: 5\n    }\n  }), getButton(submitText, (_getButton = {\n    disabled: submitDisabled,\n    onClick: handleSubmit\n  }, _defineProperty(_getButton, loadingProp || \'\', !loadingProp ? undefined : loading), _defineProperty(_getButton, "status", \'success\'), _defineProperty(_getButton, "style", {\n    marginLeft: 5\n  }), _getButton)), actionsSuffix), init && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_RxSubjectView__WEBPACK_IMPORTED_MODULE_8__.RxSubjectView, {\n    key: \'message\',\n    subject: [rxMessage, message],\n    valueModifier: function valueModifier(_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n        message = _ref10[0],\n        messageExt = _ref10[1];\n      message = message || messageExt;\n      var props = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(message) || /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(message) ? {\n        content: message\n      } : message;\n      return !!message && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Message, props);\n    }\n  }), suffix);\n});\nFormBuilder.defaultProps = {\n  // components used in the \n  components: _objectSpread({}, defaultComponents),\n  formProps: {},\n  inputsDisabled: [],\n  inputsHidden: [],\n  inputsReadOnly: [],\n  submitDisabledIfUnchanged: false,\n  submitText: textsCap.submit // string or element or object\n};\n\nvar buttonProp = prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().element),\n// only the props will be used and the `components.Button` component\n(prop_types__WEBPACK_IMPORTED_MODULE_12___default().string),\n// Use `Component` prop to specify a component other than `components.Button`\n(prop_types__WEBPACK_IMPORTED_MODULE_12___default().object)]);\nFormBuilder.propTypes = {\n  // components used in the \n  components: prop_types__WEBPACK_IMPORTED_MODULE_12___default().shape({\n    Actions: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().elementType),\n    Button: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().elementType),\n    Form: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().elementType),\n    FormInput: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().elementType),\n    Message: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().elementType)\n  }),\n  buttonAfter: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().any),\n  buttonBefore: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().any),\n  closeText: buttonProp,\n  closeOnSubmit: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().bool),\n  formProps: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().object),\n  inputs: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().array), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X)]),\n  // Common props to be supplied to each inputs.\n  // Input object props will always override these props.\n  // Only `inputProps` and `components` will be merged with relevent input props.\n  inputsCommonProps: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().object),\n  // callback function invoked against each input.\n  // must return an object.\n  (prop_types__WEBPACK_IMPORTED_MODULE_12___default().func)]),\n  inputsDisabled: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().array),\n  inputsHidden: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().array), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X), (prop_types__WEBPACK_IMPORTED_MODULE_12___default().string) // comma separated input names\n  ]),\n\n  // whether input messages should be hidden when not focused (unless property specifically set on the input object itself)\n  inputsReadOnly: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().array),\n  loading: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().bool),\n  message: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().object), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X)]),\n  // on form values change. Inboked whenever any of the form input values change\n  onChange: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().func),\n  // to trigger modal close on submit\n  onClose: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().func),\n  // callback function invoked when component is mounted\n  // Args:  `props, formId, values, submitDisabled`\n  onMount: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().func),\n  onSubmit: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().func),\n  // callback function invoked when component is unmounted\n  // Args:  `props, formId, values, submitDisabled`\n  onUnmount: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().func),\n  prefix: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().any),\n  submitDisabled: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().bool), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X)]),\n  submitDisabledIfUnchanged: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().bool),\n  submitInProgress: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().bool), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X)]),\n  // Name of the property in the Button component to indicate button loading status\n  submitButtonLoadingProp: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().string),\n  submitText: buttonProp,\n  suffix: (prop_types__WEBPACK_IMPORTED_MODULE_12___default().any),\n  values: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().object), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X)]),\n  valuesToCompare: prop_types__WEBPACK_IMPORTED_MODULE_12___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_12___default().object), prop_types__WEBPACK_IMPORTED_MODULE_12___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_11__/* .BehaviorSubject */ .X)])\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormBuilder);\nvar addInterceptorCb = function addInterceptorCb() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var handleChange = arguments.length > 1 ? arguments[1] : undefined;\n  var formId = arguments.length > 2 ? arguments[2] : undefined;\n  var parentIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return function (input, index) {\n    var _idPrefix;\n    var inputs = props.inputs,\n      inputsCommonProps = props.inputsCommonProps,\n      _props$inputsDisabled = props.inputsDisabled,\n      inputsDisabled = _props$inputsDisabled === void 0 ? [] : _props$inputsDisabled,\n      _props$inputsHidden = props.inputsHidden,\n      inputsHidden = _props$inputsHidden === void 0 ? [] : _props$inputsHidden,\n      _props$inputsReadOnly = props.inputsReadOnly,\n      inputsReadOnly = _props$inputsReadOnly === void 0 ? [] : _props$inputsReadOnly,\n      values = props.values;\n    var _ref11 = input || {},\n      content = _ref11.content,\n      _ref11$hidden = _ref11.hidden,\n      hidden = _ref11$hidden === void 0 ? false : _ref11$hidden,\n      idPrefix = _ref11.idPrefix,\n      childInputs = _ref11.inputs,\n      _ref11$inputProps = _ref11.inputProps,\n      inputProps = _ref11$inputProps === void 0 ? {} : _ref11$inputProps,\n      key = _ref11.key,\n      nameAlt = _ref11.name,\n      rxValue = _ref11.rxValue,\n      typeAlt = _ref11.type,\n      validate = _ref11.validate;\n    var disabled = inputProps.disabled,\n      _inputProps$name = inputProps.name,\n      name = _inputProps$name === void 0 ? nameAlt : _inputProps$name,\n      readOnly = inputProps.readOnly,\n      _inputProps$type = inputProps.type,\n      type = _inputProps$type === void 0 ? typeAlt : _inputProps$type;\n    var typeLC = "".concat(type || \'text\').toLowerCase();\n    var isGroup = typeLC === \'group\' && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr)(childInputs);\n    var commonProps = !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(inputsCommonProps) ? inputsCommonProps || {} : inputsCommonProps(input, values, props);\n    (_idPrefix = idPrefix) !== null && _idPrefix !== void 0 ? _idPrefix : idPrefix = commonProps.idPrefix;\n    return _objectSpread(_objectSpread(_objectSpread({}, commonProps), input), {}, {\n      addMissingProps: false,\n      components: _objectSpread(_objectSpread({}, commonProps === null || commonProps === void 0 ? void 0 : commonProps.components), input === null || input === void 0 ? void 0 : input.components),\n      content: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(content) ? content(values, name) : content,\n      disabled: inputsDisabled.includes(name) || ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(disabled) ? disabled(values, name) : disabled),\n      hidden: inputsHidden.includes(name) || ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(hidden) ? !!hidden(values, name) : hidden),\n      idPrefix: idPrefix === null ? \'\' : idPrefix || "".concat(formId, "_"),\n      inputs: isGroup ? childInputs.map(addInterceptorCb(props, handleChange, formId, parentIndex || index)) : undefined,\n      inputProps: _objectSpread(_objectSpread(_objectSpread({}, inputsCommonProps === null || inputsCommonProps === void 0 ? void 0 : inputsCommonProps.inputProps), inputProps), {}, {\n        name: name,\n        onChange: isGroup ? undefined : function (e, data) {\n          return handleChange(name, inputs)(e, data, input, parentIndex || index, parentIndex ? index : undefined);\n        },\n        readOnly: inputsReadOnly.includes(name) || readOnly\n      }),\n      key: key || name,\n      validate: !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(validate) ? undefined : function (event) {\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return validate(event, data, _objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, data.value)), rxValue);\n      }\n    });\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/FormBuilder.jsx\n')},"./src/utils/reactjs/components/form/FormInput.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormInput\": () => (/* binding */ FormInput),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"errorMessages\": () => (/* binding */ errorMessages)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(\"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(\"./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/utils/languageHelper.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/utils/utils.js\");\n/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/utils/validator.js\");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./src/utils/reactjs/hooks/index.js\");\n/* harmony import */ var _CharacterCount__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./src/utils/reactjs/components/CharacterCount.jsx\");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./src/utils/reactjs/components/Message.jsx\");\n/* harmony import */ var _RxSubjectView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./src/utils/reactjs/components/RxSubjectView.jsx\");\n/* harmony import */ var _FormInputGroup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./src/utils/reactjs/components/form/FormInputGroup.jsx\");\n/* harmony import */ var _useOptions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./src/utils/reactjs/components/form/useOptions.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"./src/utils/reactjs/components/form/utils.js\");\n/* harmony import */ var _validateCriteria__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(\"./src/utils/reactjs/components/form/validateCriteria.jsx\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar errorMessages = {\n  decimals: 'maximum number of decimals allowed',\n  email: 'please enter a valid email address',\n  fileType: 'invalid file type selected',\n  integer: 'please enter a number without decimals',\n  max: 'number must be smaller than or equal to',\n  maxLengthNum: 'maximum number of digits allowed',\n  maxLengthText: 'maximum number of characters allowed',\n  min: 'number must be greater or equal',\n  minLengthNum: 'minimum number of digits required',\n  minLengthText: 'minimum number of characters required',\n  number: 'please enter a valid number',\n  required: 'required field',\n  readOnlyField: 'read only field',\n  url: 'invalid URL'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(errorMessages, true);\nvar validationTypes = [].concat(_toConsumableArray(Object.values(_validator__WEBPACK_IMPORTED_MODULE_3__.TYPES)), ['text']);\nvar defaultComponents = {\n  Container: 'div',\n  CriteriaItem: 'div',\n  CriteriaList: 'div',\n  Icon: null,\n  Input: 'input',\n  Label: 'label',\n  LabelDetails: 'div',\n  Message: _Message__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n};\nvar FormInput = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(function (props) {\n  var _FormInput$defaultPro, _required, _type;\n  var input = !props.addMissingProps ? props\n  // makes sure required variables are set\n  : (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_10__.addMissingProps)(props);\n  }, [props]);\n  var _input$checkedValue = input.checkedValue,\n    checkedValue = _input$checkedValue === void 0 ? true : _input$checkedValue,\n    components = input.components,\n    _input$containerProps = input.containerProps,\n    containerProps = _input$containerProps === void 0 ? {} : _input$containerProps,\n    content = input.content,\n    _input$counter = input.counter,\n    counter = _input$counter === void 0 ? true : _input$counter,\n    counterWarnLength = input.counterWarnLength,\n    _input$counterHiddenT = input.counterHiddenTypes,\n    counterHiddenTypes = _input$counterHiddenT === void 0 ? ['checkbox', 'dropdown', 'html',\n    // placeholder to be used for any other types by supplying the input component\n    'nocounter', 'radio', 'select'] : _input$counterHiddenT,\n    _input$criteria = input.criteria,\n    criteria = _input$criteria === void 0 ? [] : _input$criteria,\n    criteriaHeader = input.criteriaHeader,\n    customMessages = input.customMessages,\n    _input$errorClass = input.errorClass,\n    errorClass = _input$errorClass === void 0 ? 'error' : _input$errorClass,\n    _input$hidden = input.hidden,\n    hidden = _input$hidden === void 0 ? false : _input$hidden,\n    inputPrefix = input.inputPrefix,\n    inputSuffix = input.inputSuffix,\n    inputProps = input.inputProps,\n    _input$inputPropsIgno = input.inputPropsIgnored,\n    inputPropsIgnored = _input$inputPropsIgno === void 0 ? [] : _input$inputPropsIgno,\n    _input$integer = input.integer,\n    integer = _input$integer === void 0 ? false : _input$integer,\n    label = input.label,\n    _input$labelBeforeInp = input.labelBeforeInput,\n    labelBeforeInput = _input$labelBeforeInp === void 0 ? true : _input$labelBeforeInp,\n    labelProps = input.labelProps,\n    labelDetails = input.labelDetails,\n    labelInline = input.labelInline,\n    message = input.message,\n    _input$messageDefer = input.messageDefer,\n    messageDefer = _input$messageDefer === void 0 ? 500 : _input$messageDefer,\n    _input$messageHideOnB = input.messageHideOnBlur,\n    messageHideOnBlur = _input$messageHideOnB === void 0 ? true : _input$messageHideOnB,\n    _name = input.name,\n    _input$idPrefix = input.idPrefix,\n    idPrefix = _input$idPrefix === void 0 ? '' : _input$idPrefix,\n    onMount = input.onMount,\n    onUnmount = input.onUnmount,\n    prefix = input.prefix,\n    required = input.required,\n    rxOptions = input.rxOptions,\n    _rxValue = input.rxValue,\n    _rxValueModifier = input.rxValueModifier,\n    suffix = input.suffix,\n    type = input.type,\n    _input$uncheckedValue = input.uncheckedValue,\n    uncheckedValue = _input$uncheckedValue === void 0 ? false : _input$uncheckedValue,\n    _input$useOptions = input.useOptions,\n    useOptions = _input$useOptions === void 0 ? _useOptions__WEBPACK_IMPORTED_MODULE_9__.useOptions : _input$useOptions,\n    validate = input.validate;\n  components = _objectSpread(_objectSpread(_objectSpread({\n    InputGroup: _FormInputGroup__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n  }, defaultComponents), (_FormInput$defaultPro = FormInput.defaultProps) === null || _FormInput$defaultPro === void 0 ? void 0 : _FormInput$defaultPro.components), components);\n  var _components = components,\n    Container = _components.Container,\n    Input = _components.Input,\n    InputGroup = _components.InputGroup,\n    Label = _components.Label,\n    LabelDetails = _components.LabelDetails,\n    Message = _components.Message;\n  // trigger onMount callbacks\n  (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useMount)(onMount, onUnmount);\n  if (input.type === 'group') return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InputGroup, _objectSpread(_objectSpread({}, input), {}, {\n    components: _objectSpread({\n      FormInput: FormInput\n    }, input === null || input === void 0 ? void 0 : input.components)\n  }));\n  var inputChildren = inputProps.children,\n    checked = inputProps.checked,\n    _inputProps$disabled = inputProps.disabled,\n    disabled = _inputProps$disabled === void 0 ? false : _inputProps$disabled,\n    _error = inputProps.error,\n    id = inputProps.id,\n    label2 = inputProps.label,\n    maxLength = inputProps.maxLength,\n    minLength = inputProps.minLength,\n    _inputProps$name = inputProps.name,\n    name = _inputProps$name === void 0 ? _name : _inputProps$name,\n    _onBlur = inputProps.onBlur,\n    onChange = inputProps.onChange,\n    _onFocus = inputProps.onFocus,\n    options = inputProps.options,\n    requiredAlt = inputProps.required,\n    typeAlt = inputProps.type,\n    _inputProps$value = inputProps.value,\n    _value = _inputProps$value === void 0 ? '' : _inputProps$value;\n  (_required = required) !== null && _required !== void 0 ? _required : required = requiredAlt;\n  (_type = type) !== null && _type !== void 0 ? _type : type = typeAlt;\n  content = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useRxSubjectOrValue)(content);\n  disabled = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useRxSubjectOrValue)(disabled);\n  hidden = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useRxSubjectOrValue)(hidden);\n  var isTypeHidden = type === 'hidden';\n  var isHidden = hidden || isTypeHidden;\n\n  // internal validation error status\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    error = _useState2[0],\n    setError = _useState2[1];\n  var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n      var addDeferred = function addDeferred(subject) {\n        var defer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var nextOrg = subject.next.bind(subject);\n        subject.next = function (value) {\n          subject._timeoutId && clearTimeout(subject._timeoutId);\n          subject._timeoutId = null;\n          return nextOrg(value);\n        };\n        var nextDeferred = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.deferred)(nextOrg, defer);\n        subject.deferred = function () {\n          subject._timeoutId = nextDeferred.apply(void 0, arguments);\n        };\n        // subject.deferred = deferred(v => subject.next(v), defer)\n        return subject;\n      };\n      var isOptionsType = (!!options || !!rxOptions) && (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(useOptions);\n      var msgExtIsSubject = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(message);\n      var rxIsFocused = new rxjs__WEBPACK_IMPORTED_MODULE_12__/* .BehaviorSubject */ .X(false);\n      var rxMessage = new rxjs__WEBPACK_IMPORTED_MODULE_12__/* .BehaviorSubject */ .X(null);\n      addDeferred(rxMessage, messageDefer);\n      var rxMessageExt = msgExtIsSubject ? message : new rxjs__WEBPACK_IMPORTED_MODULE_12__/* .BehaviorSubject */ .X(message);\n      var rxValueIsSubject = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(_rxValue);\n      var rxValue = rxValueIsSubject ? _rxValue : new rxjs__WEBPACK_IMPORTED_MODULE_12__/* .BehaviorSubject */ .X(_value);\n      addDeferred(rxValue, 100);\n      var getMessageEl = function getMessageEl(_ref) {\n        var _message;\n        var _ref2 = _slicedToArray(_ref, 3),\n          message = _ref2[0],\n          messageExt = _ref2[1],\n          focused = _ref2[2];\n        message = message || messageExt;\n        message = !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(message) && ! /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(message) ? message : {\n          content: message\n        };\n        return !!message && !!(focused || !messageHideOnBlur) && !isHidden && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Message, _objectSpread(_objectSpread({}, message), {}, {\n          className: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.className)(['FormInput-Message', (_message = message) === null || _message === void 0 ? void 0 : _message.className])\n        }));\n      };\n      var msgEl = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_RxSubjectView__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        key: 'message',\n        subject: [rxMessage, rxMessageExt, rxIsFocused],\n        valueModifier: getMessageEl\n      });\n      var handleChange = handleChangeCb(input, rxValue, rxMessage, setError);\n      // local rxValue modifier\n      var rxValueModifier = function rxValueModifier(newValue, oldValue) {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(_rxValueModifier)) newValue = _rxValueModifier(newValue, oldValue, rxValue);\n        !isEqual(rxValue.___validated, newValue) && setTimeout(function () {\n          handleChange({\n            preventDefault: function preventDefault() {},\n            target: {\n              value: newValue\n            },\n            stopPropagation: function stopPropagation() {}\n          });\n        }, 100);\n        return newValue;\n      };\n      return [rxMessageExt, rxIsFocused, msgEl, rxValueModifier, rxValue, rxValueIsSubject, msgExtIsSubject, isOptionsType, handleChange];\n    }, []),\n    _useMemo2 = _slicedToArray(_useMemo, 9),\n    rxMessageExt = _useMemo2[0],\n    // used to keep track of and update any external message (props.message)\n    rxIsFocused = _useMemo2[1],\n    // keeps track of whether input field is focused\n    msgEl = _useMemo2[2],\n    // message element\n    rxValueModifier = _useMemo2[3],\n    rxValue = _useMemo2[4],\n    rxValueIsSubject = _useMemo2[5],\n    msgExtIsSubject = _useMemo2[6],\n    isOptionsType = _useMemo2[7],\n    handleChange = _useMemo2[8];\n  // synchronise rxMessageExt with external message if necessary\n  !msgExtIsSubject && (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return rxMessageExt.next(message);\n  }, [message]);\n  // synchronise rxValue with external value if necessary\n  !rxValueIsSubject && (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    return rxValue.deferred(_value);\n  }, [_value]);\n\n  // options for dropdown/selection type fields\n  var _ref3 = isOptionsType && useOptions(input) || [],\n    _ref4 = _slicedToArray(_ref3, 2),\n    replaceOptionsProp = _ref4[0],\n    optionItems = _ref4[1];\n  // Use `select` tag for Dropdown if no tag or element specified externally\n  Input = optionItems && Input === 'input' ? 'select' : Input;\n\n  // re-render on value change regardless of direction\n  var _useRxSubject = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useRxSubject)(rxValue, rxValueModifier),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 1),\n    value = _useRxSubject2[0];\n  if (hidden) return '';\n  if (isTypeHidden) return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", _objectSpread(_objectSpread({}, inputProps), {}, {\n    autoComplete: 'username',\n    style: {\n      display: 'none'\n    },\n    type: 'text',\n    value: value\n  }));\n\n  // Instantiate the Container element\n  var getContainer = function getContainer(content) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, _objectSpread(_objectSpread({}, containerProps), {}, {\n      className: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.className)(['FormInput-Container', containerProps === null || containerProps === void 0 ? void 0 : containerProps.className]),\n      style: _objectSpread(_objectSpread({}, containerProps === null || containerProps === void 0 ? void 0 : containerProps.style), labelInline && {\n        display: 'table'\n      })\n    }), prefix, labelBeforeInput && label, inputPrefix, content, inputSuffix, !labelBeforeInput && label, msgEl, suffix);\n  };\n\n  /**\n   * @name    getLabel\n   * @summary constructs input label element\n   * \n   * @param   {*}         label \n   * @param   {Boolean}   inlineCounter use null to hide counter\n   * \n   * @returns {Element}\n   */\n  var getLabel = function getLabel(label) {\n    var inlineCounter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!label || isHidden) return '';\n    var showCount = counter && inlineCounter !== null && !counterHiddenTypes.includes(type) && !optionItems;\n    var _ref5 = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(counter) && counter || {},\n      _ref5$hideOnEmpty = _ref5.hideOnEmpty,\n      hideOnEmpty = _ref5$hideOnEmpty === void 0 ? true : _ref5$hideOnEmpty,\n      _ref5$hideOnOk = _ref5.hideOnOk,\n      hideOnOk = _ref5$hideOnOk === void 0 ? false : _ref5$hideOnOk;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Label, _objectSpread(_objectSpread({\n      key: 'label'\n    }, labelProps), {}, {\n      className: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.className)(['FormInput-Label', labelProps === null || labelProps === void 0 ? void 0 : labelProps.className]),\n      htmlFor: id,\n      style: _objectSpread(_objectSpread({\n        cursor: 'pointer',\n        fontWeight: 'bold',\n        userSelect: 'none'\n      }, labelProps === null || labelProps === void 0 ? void 0 : labelProps.style), labelInline && {\n        display: 'table-cell',\n        paddingRight: 15,\n        verticalAlign: 'middle'\n      })\n    }), label, required && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n      style: {\n        color: 'red'\n      }\n    }, \" *\"), showCount && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_CharacterCount__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      hideOnEmpty: hideOnEmpty,\n      hideOnOk: hideOnOk,\n      initialValue: rxValue.value,\n      inline: inlineCounter,\n      maxLength: maxLength,\n      minLength: minLength,\n      show: rxIsFocused,\n      subject: rxValue,\n      rxValueModifier: rxValueModifier,\n      warnLength: counterWarnLength\n    }), labelDetails && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LabelDetails, null, labelDetails));\n  };\n  label = label && getLabel(label, false);\n  if (type === 'html') return getContainer(content);\n  var isCheckRadio = type.startsWith('checkbox') || type.startsWith('radio');\n  return getContainer( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Input, (0,_utils__WEBPACK_IMPORTED_MODULE_2__.objWithoutKeys)(_objectSpread(_objectSpread({}, inputProps), {}, {\n    checked: isCheckRadio ? value === checkedValue : checked,\n    children: !replaceOptionsProp && optionItems || inputChildren,\n    className: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.className)(['FormInput-Input', inputProps.className, error && errorClass]),\n    disabled: disabled,\n    error: isCheckRadio ? undefined : _error || error,\n    label: label2 && getLabel(label2, !!label ? null : true),\n    id: \"\".concat(idPrefix).concat(id),\n    onBlur: function onBlur() {\n      rxIsFocused.next(false);\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(_onBlur) && _onBlur.apply(void 0, arguments);\n    },\n    onChange: handleChange,\n    onFocus: function onFocus() {\n      rxIsFocused.next(true);\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(_onFocus) && _onFocus.apply(void 0, arguments);\n    },\n    options: replaceOptionsProp ? optionItems : options,\n    style: _objectSpread(_objectSpread({}, inputProps.style), labelInline && {\n      display: 'table-cell'\n    }),\n    value: value\n  }), [].concat(_toConsumableArray(inputPropsIgnored), [(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(Input) && 'error']))));\n});\nFormInput.defaultProps = {\n  addMissingProps: true,\n  checkedValue: true,\n  components: _objectSpread({}, defaultComponents),\n  containerProps: {},\n  counter: true,\n  // bool or object { hideOnEmpty, hideOnOk }\n  counterHiddenTypes: ['checkbox', 'dropdown', 'html',\n  // placeholder to be used for any other types by supplying the input component\n  'nocounter', 'radio', 'select'],\n  labelBeforeInput: true,\n  messageDefer: 500,\n  messageHideOnBlur: true,\n  uncheckedValue: false,\n  useOptions: _useOptions__WEBPACK_IMPORTED_MODULE_9__.useOptions\n};\nFormInput.propTypes = {\n  addMissingProps: (prop_types__WEBPACK_IMPORTED_MODULE_13___default().bool),\n  inputProps: prop_types__WEBPACK_IMPORTED_MODULE_13___default().shape({\n    id: (prop_types__WEBPACK_IMPORTED_MODULE_13___default().string),\n    name: (prop_types__WEBPACK_IMPORTED_MODULE_13___default().string),\n    onChange: (prop_types__WEBPACK_IMPORTED_MODULE_13___default().func)\n  }).isRequired,\n  message: (prop_types__WEBPACK_IMPORTED_MODULE_13___default().object),\n  rxValue: prop_types__WEBPACK_IMPORTED_MODULE_13___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_12__/* .BehaviorSubject */ .X)\n\n  // checkedValue = true,\n  // components: {\n  //     Container = 'div',\n  //     CriteriaItem = 'div', // props: { content, icon, style }\n  //     CriteriaList = 'div',\n  //     Icon = null,\n  //     Input = 'input',\n  //     InputGroup\n  //     Label = 'label',\n  // LabelDetails = 'div',\n  //     Message = _Message,\n  // } = {},\n  // containerProps = {},\n  // content,\n  // counter = true, // bool or object { hideOnEmpty, hideOnOk }\n  // counterWarnLength,\n  // counterHiddenTypes =[\n  //     'checkbox',\n  //     'dropdown',\n  //     'html',\n  //     // placeholder to be used for any other types by supplying the input component\n  //     'nocounter',\n  //     'radio',\n  //     'select',\n  // ],\n  // criteria =[],\n  // criteriaFooter\n  // criteriaHeader,\n  // criteriaIconInvalid\n  // criteriaIconValid\n  // criteriaPersist,\n  // customMessages,\n  // hidden = false,\n  // inputPrefix,\n  // inputSuffix,\n  // inputProps,\n  // inputPropsIgnored =[],\n  // integer = false, // number validation\n  // label,\n  // labelBeforeInput = true,\n  // labelProps,\n  // labelDetails,\n  // labelInline,\n  // message,\n  // messageDefer = 500,\n  // messageHideOnBlur = true,\n  // name,\n  // Set a prefix for input element IDs to be passed down to the DOM to prevent duplicate IDs in case multiple instances of the same form is created\n  // Using 'null' prevents adding any prefix.\n  // idPrefix\n  // onMount,\n  // onUnmount,\n  // prefix,\n  // rxOptions,\n  // rxValue: _rxValue,\n  // rxValueModifier, // modifies the value passed on to the input\n  // suffix,\n  // type: typeAlt,\n  // uncheckedValue = false,\n  // useOptions: _useOptions = useOptions,\n  // validate,\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormInput);\nvar handleChangeCb = function handleChangeCb(props, rxValue, rxMessage, setError) {\n  return function (event) {\n    var _validatorConfig$type, _validatorConfig$type2, _validatorConfig$type3, _validatorConfig$type4, _validatorConfig$type5, _validatorConfig$type6, _validatorConfig$type7, _validatorConfig$type8;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    var _props$checkedValue = props.checkedValue,\n      checkedValue = _props$checkedValue === void 0 ? true : _props$checkedValue,\n      customMessages = props.customMessages,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,\n      _props$integer = props.integer,\n      integer = _props$integer === void 0 ? false : _props$integer,\n      validate = props.validate,\n      _props$validatorConfi = props.validatorConfig,\n      validatorConfig = _props$validatorConfi === void 0 ? {} : _props$validatorConfi,\n      onChangeSelectValue = props.onChangeSelectValue,\n      _props$uncheckedValue = props.uncheckedValue,\n      uncheckedValue = _props$uncheckedValue === void 0 ? false : _props$uncheckedValue;\n    var onChange = inputProps.onChange,\n      requiredAlt = inputProps.requiredAlt,\n      type = inputProps.type;\n    var _props$required = props.required,\n      required = _props$required === void 0 ? requiredAlt : _props$required;\n    var _ref6 = event || {},\n      persist = _ref6.persist,\n      _ref6$target = _ref6.target,\n      _ref6$target2 = _ref6$target === void 0 ? {} : _ref6$target,\n      checked = _ref6$target2.checked,\n      selectionEnd = _ref6$target2.selectionEnd,\n      selectionStart = _ref6$target2.selectionStart,\n      setSelectionRange = _ref6$target2.setSelectionRange,\n      value = _ref6$target2.value;\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(onChangeSelectValue)) {\n      var changedValue = onChangeSelectValue.apply(void 0, [event].concat(args));\n      value = changedValue !== undefined ? changedValue : value;\n    }\n    // value unchanged\n    if (isEqual(rxValue.___validated, value)) return;\n\n    // Forces the synthetic event and it's value to persist\n    // Required for use with deferred function\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(persist) && event.persist();\n\n    // preserves cursor position\n    var setCursor = function setCursor() {\n      return setTimeout(function () {\n        try {\n          (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(setSelectionRange) && selectionStart && selectionEnd && event.target.setSelectionRange(selectionStart, selectionEnd);\n        } catch (_) {} // ignore unsupported\n      });\n    };\n\n    var data = _objectSpread(_objectSpread({}, props), {}, {\n      checked: checked,\n      value: value\n    });\n    var err,\n      isANum = false;\n    var isCheck = ['checkbox', 'radio'].includes(type);\n    var hasVal = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasValue)(isCheck ? required ? data.checked === true : data.checked : data.value);\n    var customMsgs = _objectSpread(_objectSpread({}, errorMessages), {}, {\n      // Hide min & max length related error messages as a counter will be displayed for appropriate types.\n      // To override this simply set `undefined` in the `customMessages`.\n      lengthMax: true,\n      lengthMin: true\n    }, customMessages);\n\n    // ignore if doens't have value\n    if (hasVal) switch (type) {\n      case 'array':\n        (_validatorConfig$type = validatorConfig.type) !== null && _validatorConfig$type !== void 0 ? _validatorConfig$type : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.array;\n        break;\n      case 'checkbox':\n      case 'radio':\n        data.checked = !!checked;\n        data.value = !!checked ? checkedValue : uncheckedValue;\n        if (required && !data.checked) hasVal = false;\n        break;\n      case 'date':\n        (_validatorConfig$type2 = validatorConfig.type) !== null && _validatorConfig$type2 !== void 0 ? _validatorConfig$type2 : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.date;\n        break;\n      case 'email':\n        (_validatorConfig$type3 = validatorConfig.type) !== null && _validatorConfig$type3 !== void 0 ? _validatorConfig$type3 : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.email;\n        break;\n      case 'identity':\n        (_validatorConfig$type4 = validatorConfig.type) !== null && _validatorConfig$type4 !== void 0 ? _validatorConfig$type4 : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.identity;\n        break;\n      case 'number':\n        isANum = true;\n        (_validatorConfig$type5 = validatorConfig.type) !== null && _validatorConfig$type5 !== void 0 ? _validatorConfig$type5 : validatorConfig.type = integer ? _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.integer : _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.number;\n        data.value = !data.value ? data.value : Number(data.value);\n        value = data.value;\n        break;\n      case 'url':\n        (_validatorConfig$type6 = validatorConfig.type) !== null && _validatorConfig$type6 !== void 0 ? _validatorConfig$type6 : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.url;\n        break;\n      case 'hex':\n        (_validatorConfig$type7 = validatorConfig.type) !== null && _validatorConfig$type7 !== void 0 ? _validatorConfig$type7 : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.hex;\n      case 'text':\n      case 'textarea':\n      default:\n        value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isArr)(value) ? value : \"\".concat(!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isDefined)(value) ? '' : value);\n        (_validatorConfig$type8 = validatorConfig.type) !== null && _validatorConfig$type8 !== void 0 ? _validatorConfig$type8 : validatorConfig.type = _validator__WEBPACK_IMPORTED_MODULE_3__.TYPES.string;\n        break;\n    }\n\n    // input value is required but empty\n    // if (required && !hasVal) err = true\n\n    var requireValidator = !err && hasVal && validationTypes.includes(type);\n    if (!!requireValidator) {\n      // set min & max length error messages if set defined by external error messages\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.objSetPropUndefined)(customMsgs, 'lengthMax',\n      // if value is string\n      errorMessages.maxLengthText, isANum, errorMessages.maxLengthNum);\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.objSetPropUndefined)(customMsgs, 'lengthMin',\n      // if value is string\n      errorMessages.minLengthText, isANum,\n      // if value is a number\n      errorMessages.minLengthNum);\n      err = _validator__WEBPACK_IMPORTED_MODULE_3__[\"default\"].validate(value, _objectSpread(_objectSpread({}, inputProps), validatorConfig), customMsgs);\n    }\n    var _ref7 = (!err || err === true) && (0,_validateCriteria__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(value, props, hasVal) || [],\n      _ref8 = _slicedToArray(_ref7, 2),\n      criteriaMsg = _ref8[0],\n      crInvalid = _ref8[1];\n    if (crInvalid && !hasVal) crInvalid = false;\n    var triggerChange = function triggerChange(err) {\n      var error = !!err || !!crInvalid;\n      var message = err && err !== true ? {\n        content: err,\n        status: _Message__WEBPACK_IMPORTED_MODULE_6__.statuses.error\n      } : criteriaMsg;\n      if (message) {\n        // delay displaying the mssage and store the timeout ID\n        rxMessage._timeoutId = rxMessage.deferred(message);\n      } else {\n        // remove any pending deffered message\n        rxMessage._timeoutId && clearTimeout(rxMessage._timeoutId);\n        rxMessage._timeoutId = null;\n        rxMessage.next(message);\n      }\n      setError(error);\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(onChange) && onChange.apply(void 0, [event, _objectSpread(_objectSpread({}, data), {}, {\n        error: error\n      })].concat(args));\n      setCursor();\n\n      // prevents re-validation because of the trigger\n      rxValue.___validated = data.value;\n      // trigger value change on the subject\n      !isEqual(rxValue.value, data.value) && rxValue.next(data.value);\n    };\n    if (err || !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(validate)) return triggerChange(err);\n    err = validate.apply(void 0, [event, data].concat(args));\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPromise)(err) ? err.then(triggerChange) : triggerChange(err);\n  };\n};\nvar isEqual = function isEqual(v1, v2) {\n  v1 = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(v1) ? v1 : JSON.stringify(v1);\n  v2 = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(v2) ? v2 : JSON.stringify(v2);\n  return v1 === v2;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/FormInput.jsx\n")},"./src/utils/reactjs/components/form/FormInputGroup.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/components/Grid.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nvar FormInputGroup = function FormInputGroup(props) {\n  var _inputs$map;\n  var _props$components = props.components,\n    _props$components2 = _props$components === void 0 ? {} : _props$components,\n    _props$components2$Co = _props$components2.Container,\n    Container = _props$components2$Co === void 0 ? \'div\' : _props$components2$Co,\n    FormInput = _props$components2.FormInput,\n    _props$containerProps = props.containerProps,\n    containerProps = _props$containerProps === void 0 ? {} : _props$containerProps,\n    _props$columns = props.columns,\n    columns = _props$columns === void 0 ? true : _props$columns,\n    hidden = props.hidden,\n    _props$inputs = props.inputs,\n    inputs = _props$inputs === void 0 ? [] : _props$inputs;\n  var children = inputs === null || inputs === void 0 ? void 0 : (_inputs$map = inputs.map) === null || _inputs$map === void 0 ? void 0 : _inputs$map.call(inputs, function (x) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FormInput, x);\n  });\n  if (!(children !== null && children !== void 0 && children.length) || hidden) return \'\';\n  columns = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isValidNumber)(columns) && columns > 0 ? columns : columns === true && (children === null || children === void 0 ? void 0 : children.length) || 0;\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_Grid__WEBPACK_IMPORTED_MODULE_2__["default"], _objectSpread(_objectSpread({}, containerProps), {}, {\n    children: children,\n    className: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.className)([\'FormInput-Container\', \'FormInputGroup\', containerProps === null || containerProps === void 0 ? void 0 : containerProps.className]),\n    columns: 2,\n    Component: Container\n  }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(FormInputGroup));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL2Zvcm0vRm9ybUlucHV0R3JvdXAuanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXlCO0FBQ2dDO0FBQy9CO0FBRTFCLElBQU1JLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBR0MsS0FBSyxFQUFJO0VBQUEsSUFBQUMsV0FBQTtFQUM1QixJQUFBQyxpQkFBQSxHQVNJRixLQUFLLENBUkxHLFVBQVU7SUFBQUMsa0JBQUEsR0FBQUYsaUJBQUEsY0FHTixDQUFDLENBQUMsR0FBQUEsaUJBQUE7SUFBQUcscUJBQUEsR0FBQUQsa0JBQUEsQ0FGRkUsU0FBUztJQUFUQSxTQUFTLEdBQUFELHFCQUFBLGNBQUcsS0FBSyxHQUFBQSxxQkFBQTtJQUNqQkUsU0FBUyxHQUFBSCxrQkFBQSxDQUFURyxTQUFTO0lBQUFDLHFCQUFBLEdBTWJSLEtBQUssQ0FKTFMsY0FBYztJQUFkQSxjQUFjLEdBQUFELHFCQUFBLGNBQUcsQ0FBQyxDQUFDLEdBQUFBLHFCQUFBO0lBQUFFLGNBQUEsR0FJbkJWLEtBQUssQ0FITFcsT0FBTztJQUFQQSxPQUFPLEdBQUFELGNBQUEsY0FBRyxJQUFJLEdBQUFBLGNBQUE7SUFDZEUsTUFBTSxHQUVOWixLQUFLLENBRkxZLE1BQU07SUFBQUMsYUFBQSxHQUVOYixLQUFLLENBRExjLE1BQU07SUFBTkEsTUFBTSxHQUFBRCxhQUFBLGNBQUcsRUFBRSxHQUFBQSxhQUFBO0VBRWYsSUFBTUUsUUFBUSxHQUFHRCxNQUFNLGFBQU5BLE1BQU0sd0JBQUFiLFdBQUEsR0FBTmEsTUFBTSxDQUFFRSxHQUFHLGNBQUFmLFdBQUEsdUJBQVhBLFdBQUEsQ0FBQWdCLElBQUEsQ0FBQUgsTUFBTSxFQUFRLFVBQUFJLENBQUM7SUFBQSxvQkFBSXZCLDBEQUFBLENBQUNZLFNBQVMsRUFBS1csQ0FBSSxDQUFDO0VBQUEsRUFBQztFQUN6RCxJQUFJLEVBQUNILFFBQVEsYUFBUkEsUUFBUSxlQUFSQSxRQUFRLENBQUVLLE1BQU0sS0FBSVIsTUFBTSxFQUFFLE9BQU8sRUFBRTtFQUUxQ0QsT0FBTyxHQUFHZCxxREFBYSxDQUFDYyxPQUFPLENBQUMsSUFBSUEsT0FBTyxHQUFHLENBQUMsR0FDekNBLE9BQU8sR0FDUEEsT0FBTyxLQUFLLElBQUksS0FBSUksUUFBUSxhQUFSQSxRQUFRLHVCQUFSQSxRQUFRLENBQUVLLE1BQU0sS0FBSSxDQUFDO0VBRS9DLG9CQUNJekIsMERBQUEsQ0FBQ0csNkNBQUksRUFBQXVCLGFBQUEsQ0FBQUEsYUFBQSxLQUNFWixjQUFjO0lBQ2pCTSxRQUFRLEVBQVJBLFFBQVE7SUFDUm5CLFNBQVMsRUFBRUEsaURBQVMsQ0FBQyxDQUNqQixxQkFBcUIsRUFDckIsZ0JBQWdCLEVBQ2hCYSxjQUFjLGFBQWRBLGNBQWMsdUJBQWRBLGNBQWMsQ0FBRWIsU0FBUyxDQUM1QixDQUFDO0lBQ0ZlLE9BQU8sRUFBRSxDQUFDO0lBQ1ZXLFNBQVMsRUFBRWhCO0VBQVMsRUFDcEIsQ0FBQztBQUViLENBQUM7QUFFRCw4RUFBZVgsaURBQVUsQ0FBQ0ksY0FBYyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvZm9ybS9Gb3JtSW5wdXRHcm91cC5qc3g/YTNhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjbGFzc05hbWUsIGlzVmFsaWROdW1iZXIgfSBmcm9tICcuLi8uLi8uLi91dGlscydcbmltcG9ydCBHcmlkIGZyb20gJy4uL0dyaWQnXG5cbmNvbnN0IEZvcm1JbnB1dEdyb3VwID0gcHJvcHMgPT4ge1xuICAgIGxldCB7XG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgIENvbnRhaW5lciA9ICdkaXYnLFxuICAgICAgICAgICAgRm9ybUlucHV0LFxuICAgICAgICB9ID0ge30sXG4gICAgICAgIGNvbnRhaW5lclByb3BzID0ge30sXG4gICAgICAgIGNvbHVtbnMgPSB0cnVlLFxuICAgICAgICBoaWRkZW4sXG4gICAgICAgIGlucHV0cyA9IFtdLFxuICAgIH0gPSBwcm9wc1xuICAgIGNvbnN0IGNoaWxkcmVuID0gaW5wdXRzPy5tYXA/Lih4ID0+IDxGb3JtSW5wdXQgey4uLnh9IC8+KVxuICAgIGlmICghY2hpbGRyZW4/Lmxlbmd0aCB8fCBoaWRkZW4pIHJldHVybiAnJ1xuXG4gICAgY29sdW1ucyA9IGlzVmFsaWROdW1iZXIoY29sdW1ucykgJiYgY29sdW1ucyA+IDBcbiAgICAgICAgPyBjb2x1bW5zXG4gICAgICAgIDogY29sdW1ucyA9PT0gdHJ1ZSAmJiBjaGlsZHJlbj8ubGVuZ3RoIHx8IDBcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxHcmlkIHsuLi57XG4gICAgICAgICAgICAuLi5jb250YWluZXJQcm9wcyxcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUoW1xuICAgICAgICAgICAgICAgICdGb3JtSW5wdXQtQ29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICAnRm9ybUlucHV0R3JvdXAnLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclByb3BzPy5jbGFzc05hbWUsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGNvbHVtbnM6IDIsXG4gICAgICAgICAgICBDb21wb25lbnQ6IENvbnRhaW5lcixcbiAgICAgICAgfX0gLz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oRm9ybUlucHV0R3JvdXApIl0sIm5hbWVzIjpbIlJlYWN0IiwiY2xhc3NOYW1lIiwiaXNWYWxpZE51bWJlciIsIkdyaWQiLCJGb3JtSW5wdXRHcm91cCIsInByb3BzIiwiX2lucHV0cyRtYXAiLCJfcHJvcHMkY29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJfcHJvcHMkY29tcG9uZW50czIiLCJfcHJvcHMkY29tcG9uZW50czIkQ28iLCJDb250YWluZXIiLCJGb3JtSW5wdXQiLCJfcHJvcHMkY29udGFpbmVyUHJvcHMiLCJjb250YWluZXJQcm9wcyIsIl9wcm9wcyRjb2x1bW5zIiwiY29sdW1ucyIsImhpZGRlbiIsIl9wcm9wcyRpbnB1dHMiLCJpbnB1dHMiLCJjaGlsZHJlbiIsIm1hcCIsImNhbGwiLCJ4IiwiY3JlYXRlRWxlbWVudCIsImxlbmd0aCIsIl9vYmplY3RTcHJlYWQiLCJDb21wb25lbnQiLCJtZW1vIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/FormInputGroup.jsx\n')},"./src/utils/reactjs/components/form/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "FormBuilder": () => (/* reexport safe */ _FormBuilder__WEBPACK_IMPORTED_MODULE_0__.FormBuilder),\n/* harmony export */   "FormInput": () => (/* reexport safe */ _FormInput__WEBPACK_IMPORTED_MODULE_1__.FormInput),\n/* harmony export */   "addMissingProps": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.addMissingProps),\n/* harmony export */   "checkInputInvalid": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.checkInputInvalid),\n/* harmony export */   "checkValuesChanged": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.checkValuesChanged),\n/* harmony export */   "errorMessages": () => (/* reexport safe */ _FormInput__WEBPACK_IMPORTED_MODULE_1__.errorMessages),\n/* harmony export */   "fillInputs": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.fillInputs),\n/* harmony export */   "findInput": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.findInput),\n/* harmony export */   "getValues": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getValues),\n/* harmony export */   "useOptions": () => (/* reexport safe */ _useOptions__WEBPACK_IMPORTED_MODULE_3__.useOptions),\n/* harmony export */   "validateCriteria": () => (/* reexport safe */ _validateCriteria__WEBPACK_IMPORTED_MODULE_5__.validateCriteria)\n/* harmony export */ });\n/* harmony import */ var _FormBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/reactjs/components/form/FormBuilder.jsx");\n/* harmony import */ var _FormInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/components/form/FormInput.jsx");\n/* harmony import */ var _FormInputGroup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/components/form/FormInputGroup.jsx");\n/* harmony import */ var _useOptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/components/form/useOptions.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/form/utils.js");\n/* harmony import */ var _validateCriteria__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/components/form/validateCriteria.jsx");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL2Zvcm0vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDRjtBQUNLO0FBQ0o7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL2Zvcm0vaW5kZXguanM/NmZhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL0Zvcm1CdWlsZGVyJ1xuZXhwb3J0ICogZnJvbSAnLi9Gb3JtSW5wdXQnXG5leHBvcnQgKiBmcm9tICcuL0Zvcm1JbnB1dEdyb3VwJ1xuZXhwb3J0ICogZnJvbSAnLi91c2VPcHRpb25zJ1xuZXhwb3J0ICogZnJvbSAnLi91dGlscydcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdGVDcml0ZXJpYSciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/index.js\n')},"./src/utils/reactjs/components/form/useOptions.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useOptions": () => (/* binding */ useOptions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\nvar textsCap = {\n  noOptions: \'no options available\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(textsCap, true);\n\n/**\n * @name    useOptions\n * @summary a hook to make use of the rxOptions and rxOptionsModifier and auto update options.\n * \n * @param   {Object}    input\n * @param   {Object}    input.components\n * @param   {*}         input.components.Input        \n * @param   {*}         input.components.OptionItem  (optional) component to be used to generate option items.\n *                                                   Relevant `options array` item (object) will be supplied as props.\n *                                                   Default: \'option\' (if InputComponent is \'input\' or \'select\')\n * @param   {*}         input.components.OptionsWrap (optional) \n * @param   {Object}    input.inputProps \n * @param   {Array}     input.inputProps.options     (optional) default options\n * @param   {String}    input.inputProps.type        (optional) input type\n * @param   {*}         input.optionsEmptyMessage    (optional) empty message for dropdown input\n * \n * @returns {Array}     [replaceOptionsProp bool, optionItems array/element]\n */\nvar useOptions = function useOptions() {\n  var _optionsReplaceProp;\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _input$components = input.components,\n    Input = _input$components.Input,\n    _input$components$Opt = _input$components.OptionItem,\n    OptionItem = _input$components$Opt === void 0 ? [\'input\', \'select\'].includes(Input) ? \'option\' : undefined : _input$components$Opt,\n    OptionsWrap = _input$components.OptionsWrap,\n    _input$inputProps = input.inputProps,\n    _input$inputProps2 = _input$inputProps === void 0 ? {} : _input$inputProps,\n    _input$inputProps2$op = _input$inputProps2.options,\n    options = _input$inputProps2$op === void 0 ? [] : _input$inputProps2$op,\n    typeAlt = _input$inputProps2.type,\n    optionsEmptyText = input.optionsEmptyText,\n    optionsReplaceProp = input.optionsReplaceProp,\n    renderItem = input.optionsRenderItem,\n    optionsWrapProps = input.optionsWrapProps,\n    _input$rxOptions = input.rxOptions,\n    rxOptions = _input$rxOptions === void 0 ? options : _input$rxOptions,\n    rxOptionsModifier = input.rxOptionsModifier,\n    _input$type = input.type,\n    type = _input$type === void 0 ? typeAlt : _input$type;\n  var _useRxSubject = (0,_hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubject)(rxOptions, function (options) {\n      options = (rxOptionsModifier === null || rxOptionsModifier === void 0 ? void 0 : rxOptionsModifier(options)) || options;\n      // element or element array received\n      var ignore = !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.isArr)(options) //\n      || /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(options) // element supplied\n      || /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(options[0]); // array of item elements\n      if (ignore) return options;\n      var emptyText = optionsEmptyText !== undefined ? optionsEmptyText : [\'dropdown\', \'select\'].includes("".concat(type).toLowerCase()) && textsCap.noOptions;\n      // Add an option to indicate no result available.\n      // Only for specific types.\n      var isEmpty = !options.length;\n      var addEmptyItem = isEmpty && emptyText;\n      if (addEmptyItem) options = [{\n        label: emptyText,\n        text: emptyText,\n        value: \'\'\n      }];\n\n      // option items are objects and to be passed on to input element\'s `option` prop\n      if (!OptionItem && !renderItem) return options;\n      var optionItems = options.map(function (o, i) {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isStr)(o) ? {\n          children: o,\n          key: o,\n          value: o\n        } : _objectSpread(_objectSpread({}, o), {}, {\n          children: o.text || o.label,\n          key: o.key || "".concat(o.value).concat(i)\n        });\n      }).map(function (option, index) {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(renderItem) ? renderItem(option, index, options, input) : !OptionItem ? option : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(OptionItem, option);\n      });\n      return optionItems;\n    }),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 1),\n    optionItems = _useRxSubject2[0];\n\n  // whether to replace inputProps.options\n  // or place the optionItems directly into the DOM\n  (_optionsReplaceProp = optionsReplaceProp) !== null && _optionsReplaceProp !== void 0 ? _optionsReplaceProp : optionsReplaceProp = !!OptionsWrap || !OptionItem && !renderItem;\n  return [optionsReplaceProp, !OptionsWrap || !optionItems ? optionItems || \'\' : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(OptionsWrap, _objectSpread(_objectSpread({}, optionsWrapProps), {}, {\n    children: optionItems\n  }))];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useOptions);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/useOptions.js\n')},"./src/utils/reactjs/components/form/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "addMissingProps": () => (/* binding */ addMissingProps),\n/* harmony export */   "checkInputInvalid": () => (/* binding */ checkInputInvalid),\n/* harmony export */   "checkValuesChanged": () => (/* binding */ checkValuesChanged),\n/* harmony export */   "fillInputs": () => (/* binding */ fillInputs),\n/* harmony export */   "findInput": () => (/* binding */ findInput),\n/* harmony export */   "getValues": () => (/* binding */ getValues)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n\n\n/**\n * @name    addMissingProps\n * @summary add missing properties that are required to use `FormInput` component\n * \n * @param   {Object} input \n * @param   {*}      keyPrefix      (optional) used as prefix to generate `key` property if not already defined.\n *                                  Default: random number\n * \n * @returns {Object} input\n */\nvar addMissingProps = function addMissingProps(input) {\n  var _input$inputProps, _ip$type, _ip$name, _ip$id;\n  var keyPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.randomInt)(99, 9999);\n  (_input$inputProps = input.inputProps) !== null && _input$inputProps !== void 0 ? _input$inputProps : input.inputProps = {};\n  var id = input.id,\n    ip = input.inputProps,\n    childInputs = input.inputs,\n    name = input.name,\n    _input$type = input.type,\n    type = _input$type === void 0 ? ip === null || ip === void 0 ? void 0 : ip.type : _input$type;\n  if (type === \'group\') {\n    var _childInputs$forEach;\n    childInputs === null || childInputs === void 0 ? void 0 : (_childInputs$forEach = childInputs.forEach) === null || _childInputs$forEach === void 0 ? void 0 : _childInputs$forEach.call(childInputs, addMissingProps);\n    return input;\n  }\n  (_ip$type = ip.type) !== null && _ip$type !== void 0 ? _ip$type : ip.type = type || \'text\';\n  (_ip$name = ip.name) !== null && _ip$name !== void 0 ? _ip$name : ip.name = name || "".concat(ip.type).concat(keyPrefix);\n  (_ip$id = ip.id) !== null && _ip$id !== void 0 ? _ip$id : ip.id = id || ip.name;\n  return input;\n};\n\n/**\n * @name    checkInput\n * @summary checks if everything is okay with an input: value is valid, not loading, not hidden....\n * \n * @param   {Object} input \n * \n * @returns {Boolean} true: submit button should be disabled\n */\nvar checkInputInvalid = function checkInputInvalid(input) {\n  var inputsHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var _input$inputProps2 = input.inputProps,\n    inputProps = _input$inputProps2 === void 0 ? {} : _input$inputProps2,\n    rxValue = input.rxValue,\n    valid = input.valid,\n    _input$type2 = input.type,\n    type = _input$type2 === void 0 ? typeAlt : _input$type2;\n  var error = inputProps.error,\n    loading = inputProps.loading,\n    name = inputProps.name,\n    required = inputProps.required,\n    typeAlt = inputProps.type,\n    value = inputProps.value;\n  value = (rxValue === null || rxValue === void 0 ? void 0 : rxValue.value) || value;\n  var isValid = error !== true && valid !== false;\n  var ignore = inputsHidden.includes(name) || [\'group\', \'hidden\', \'html\'].includes(type);\n  if (ignore) return false;\n  if (error || loading) return true;\n  var isEmpty = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.hasValue)(value);\n  // value must be valid if not empty or required field\n  var invalid = isEmpty ? required : !isValid;\n  return invalid;\n};\n\n// one or more input\'s value has changed\nvar checkValuesChanged = function checkValuesChanged(inputs) {\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var valuesOriginal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var inputsHidden = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  return inputs.find(function (_ref) {\n    var name = _ref.name;\n    if (inputsHidden.includes(name)) return;\n    var newValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(values[name]) ? values[name] : \'\';\n    var oldValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(valuesOriginal[name]) ? valuesOriginal[name] : \'\';\n    return newValue !== oldValue;\n  }) !== undefined;\n};\n\n/**\n * @name    fillInputs\n * @summary fill inputs with values\n * \n * @param   {Array}     inputs \n * @param   {Object}    values \n * \n * @returns {Array} inputs\n */\nvar fillInputs = function fillInputs() {\n  var inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  inputs.forEach(function (input) {\n    var childInputs = input.inputs,\n      name = input.name;\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(childInputs)) return fillInputs(childInputs, values);\n    if (!values.hasOwnProperty(name)) return;\n    var value = values[name];\n    // if value is RxJS subject trigger a value change\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isSubjectLike)(input.value)) return input.value.next(value);\n    input.value = value;\n  });\n  return inputs;\n};\n\n/**\n * @name    findInputs\n * @summary recursively search for input by name\n * \n * @param   {String}    name \n * @param   {Array}     inputs \n * \n * @returns {Object} input\n */\nvar findInput = function findInput(name) {\n  var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  inputs = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isSubjectLike)(inputs) ? inputs.value : inputs;\n  for (var i = 0; i < inputs.length; i++) {\n    var _inputs$i, _inputs$i$inputProps;\n    if (name === ((_inputs$i = inputs[i]) === null || _inputs$i === void 0 ? void 0 : (_inputs$i$inputProps = _inputs$i.inputProps) === null || _inputs$i$inputProps === void 0 ? void 0 : _inputs$i$inputProps.name)) return inputs[i];\n    var children = inputs[i].inputs;\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(children)) continue;\n    var child = findInput(name, children);\n    if (child) return child;\n  }\n};\n\n/**\n * @name    getValues\n * @summary extract values from inputs\n * \n * @param   {Array} inputs \n * \n * @returns {Object} values\n */\nvar getValues = function getValues() {\n  var inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return inputs.reduce(function (values, input) {\n    var childInputs = input.inputs,\n      inputProps = input.inputProps,\n      _name = input.name,\n      rxValue = input.rxValue;\n    var _inputProps$name = inputProps.name,\n      name = _inputProps$name === void 0 ? _name : _inputProps$name,\n      _inputProps$value = inputProps.value,\n      value = _inputProps$value === void 0 ? rxValue === null || rxValue === void 0 ? void 0 : rxValue.value : _inputProps$value;\n    values[name] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(childInputs) ? getValues(childInputs, values) : value;\n    return values;\n  }, values);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL2Zvcm0vdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU11Qjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNSyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLEtBQUssRUFBc0M7RUFBQSxJQUFBQyxpQkFBQSxFQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsTUFBQTtFQUFBLElBQXBDQyxTQUFTLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHUixpREFBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUM7RUFDbEUsQ0FBQUcsaUJBQUEsR0FBQUQsS0FBSyxDQUFDUyxVQUFVLGNBQUFSLGlCQUFBLGNBQUFBLGlCQUFBLEdBQWhCRCxLQUFLLENBQUNTLFVBQVUsR0FBSyxDQUFDLENBQUM7RUFDdkIsSUFDSUMsRUFBRSxHQUtGVixLQUFLLENBTExVLEVBQUU7SUFDVUMsRUFBRSxHQUlkWCxLQUFLLENBSkxTLFVBQVU7SUFDRkcsV0FBVyxHQUduQlosS0FBSyxDQUhMYSxNQUFNO0lBQ05DLElBQUksR0FFSmQsS0FBSyxDQUZMYyxJQUFJO0lBQUFDLFdBQUEsR0FFSmYsS0FBSyxDQURMZ0IsSUFBSTtJQUFKQSxJQUFJLEdBQUFELFdBQUEsY0FBR0osRUFBRSxhQUFGQSxFQUFFLHVCQUFGQSxFQUFFLENBQUVLLElBQUksR0FBQUQsV0FBQTtFQUVuQixJQUFJQyxJQUFJLEtBQUssT0FBTyxFQUFFO0lBQUEsSUFBQUMsb0JBQUE7SUFDbEJMLFdBQVcsYUFBWEEsV0FBVyx3QkFBQUssb0JBQUEsR0FBWEwsV0FBVyxDQUFFTSxPQUFPLGNBQUFELG9CQUFBLHVCQUFwQkEsb0JBQUEsQ0FBQUUsSUFBQSxDQUFBUCxXQUFXLEVBQVliLGVBQWUsQ0FBQztJQUN2QyxPQUFPQyxLQUFL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VyxFQUFFMEIsTUFBTSxDQUFDLEdBQzlCUCxLQUFLO0lBQ1gsT0FBT08sTUFBTTtFQUNqQixDQUFDLEVBQUVBLE1BQU0sQ0FBQztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2NvbXBvbmVudHMvZm9ybS91dGlscy5qcz9hODc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgaGFzVmFsdWUsXG4gICAgaXNBcnIsXG4gICAgaXNEZWZpbmVkLFxuICAgIGlzU3ViamVjdExpa2UsXG4gICAgcmFuZG9tSW50LFxufSBmcm9tICcuLi8uLi8uLi91dGlscydcblxuLyoqXG4gKiBAbmFtZSAgICBhZGRNaXNzaW5nUHJvcHNcbiAqIEBzdW1tYXJ5IGFkZCBtaXNzaW5nIHByb3BlcnRpZXMgdGhhdCBhcmUgcmVxdWlyZWQgdG8gdXNlIGBGb3JtSW5wdXRgIGNvbXBvbmVudFxuICogXG4gKiBAcGFyYW0gICB7T2JqZWN0fSBpbnB1dCBcbiAqIEBwYXJhbSAgIHsqfSAgICAgIGtleVByZWZpeCAgICAgIChvcHRpb25hbCkgdXNlZCBhcyBwcmVmaXggdG8gZ2VuZXJhdGUgYGtleWAgcHJvcGVydHkgaWYgbm90IGFscmVhZHkgZGVmaW5lZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IHJhbmRvbSBudW1iZXJcbiAqIFxuICogQHJldHVybnMge09iamVjdH0gaW5wdXRcbiAqL1xuZXhwb3J0IGNvbnN0IGFkZE1pc3NpbmdQcm9wcyA9IChpbnB1dCwga2V5UHJlZml4ID0gcmFuZG9tSW50KDk5LCA5OTk5KSkgPT4ge1xuICAgIGlucHV0LmlucHV0UHJvcHMgPz89IHt9XG4gICAgY29uc3Qge1xuICAgICAgICBpZCxcbiAgICAgICAgaW5wdXRQcm9wczogaXAsXG4gICAgICAgIGlucHV0czogY2hpbGRJbnB1dHMsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGUgPSBpcD8udHlwZSxcbiAgICB9ID0gaW5wdXRcbiAgICBpZiAodHlwZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBjaGlsZElucHV0cz8uZm9yRWFjaD8uKGFkZE1pc3NpbmdQcm9wcylcbiAgICAgICAgcmV0dXJuIGlucHV0XG4gICAgfVxuXG4gICAgaXAudHlwZSA/Pz0gdHlwZSB8fCAndGV4dCdcbiAgICBpcC5uYW1lID8/PSBuYW1lIHx8IGAke2lwLnR5cGV9JHtrZXlQcmVmaXh9YFxuICAgIGlwLmlkID8/PSBpZCB8fCBpcC5uYW1lXG4gICAgcmV0dXJuIGlucHV0XG59XG5cbi8qKlxuICogQG5hbWUgICAgY2hlY2tJbnB1dFxuICogQHN1bW1hcnkgY2hlY2tzIGlmIGV2ZXJ5dGhpbmcgaXMgb2theSB3aXRoIGFuIGlucHV0OiB2YWx1ZSBpcyB2YWxpZCwgbm90IGxvYWRpbmcsIG5vdCBoaWRkZW4uLi4uXG4gKiBcbiAqIEBwYXJhbSAgIHtPYmplY3R9IGlucHV0IFxuICogXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZTogc3VibWl0IGJ1dHRvbiBzaG91bGQgYmUgZGlzYWJsZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrSW5wdXRJbnZhbGlkID0gKGlucHV0LCBpbnB1dHNIaWRkZW4gPSBbXSkgPT4ge1xuICAgIGxldCB7XG4gICAgICAgIGlucHV0UHJvcHMgPSB7fSxcbiAgICAgICAgcnhWYWx1ZSxcbiAgICAgICAgdmFsaWQsXG4gICAgICAgIHR5cGUgPSB0eXBlQWx0XG4gICAgfSA9IGlucHV0XG4gICAgbGV0IHtcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGxvYWRpbmcsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHJlcXVpcmVkLFxuICAgICAgICB0eXBlOiB0eXBlQWx0LFxuICAgICAgICB2YWx1ZSxcbiAgICB9ID0gaW5wdXRQcm9wc1xuICAgIHZhbHVlID0gcnhWYWx1ZT8udmFsdWUgfHwgdmFsdWVcbiAgICBjb25zdCBpc1ZhbGlkID0gZXJyb3IgIT09IHRydWUgJiYgdmFsaWQgIT09IGZhbHNlXG4gICAgY29uc3QgaWdub3JlID0gaW5wdXRzSGlkZGVuLmluY2x1ZGVzKG5hbWUpXG4gICAgICAgIHx8IFtcbiAgICAgICAgICAgICdncm91cCcsXG4gICAgICAgICAgICAnaGlkZGVuJyxcbiAgICAgICAgICAgICdodG1sJyxcbiAgICAgICAgXS5pbmNsdWRlcyh0eXBlKVxuICAgIGlmIChpZ25vcmUpIHJldHVybiBmYWxzZVxuICAgIGlmIChlcnJvciB8fCBsb2FkaW5nKSByZXR1cm4gdHJ1ZVxuXG4gICAgY29uc3QgaXNFbXB0eSA9ICFoYXNWYWx1ZSh2YWx1ZSlcbiAgICAvLyB2YWx1ZSBtdXN0IGJlIHZhbGlkIGlmIG5vdCBlbXB0eSBvciByZXF1aXJlZCBmaWVsZFxuICAgIGNvbnN0IGludmFsaWQgPSBpc0VtcHR5XG4gICAgICAgID8gcmVxdWlyZWRcbiAgICAgICAgOiAhaXNWYWxpZFxuXG4gICAgcmV0dXJuIGludmFsaWRcbn1cblxuLy8gb25lIG9yIG1vcmUgaW5wdXQncyB2YWx1ZSBoYXMgY2hhbmdlZFxuZXhwb3J0IGNvbnN0IGNoZWNrVmFsdWVzQ2hhbmdlZCA9IChcbiAgICBpbnB1dHMsXG4gICAgdmFsdWVzID0ge30sXG4gICAgdmFsdWVzT3JpZ2luYWwgPSB7fSxcbiAgICBpbnB1dHNIaWRkZW4gPSBbXVxuKSA9PiBpbnB1dHNcbiAgICAuZmluZCgoeyBuYW1lIH0pID0+IHtcbiAgICAgICAgaWYgKGlucHV0c0hpZGRlbi5pbmNsdWRlcyhuYW1lKSkgcmV0dXJuXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gaXNEZWZpbmVkKHZhbHVlc1tuYW1lXSlcbiAgICAgICAgICAgID8gdmFsdWVzW25hbWVdXG4gICAgICAgICAgICA6ICcnXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gaXNEZWZpbmVkKHZhbHVlc09yaWdpbmFsW25hbWVdKVxuICAgICAgICAgICAgPyB2YWx1ZXNPcmlnaW5hbFtuYW1lXVxuICAgICAgICAgICAgOiAnJ1xuICAgICAgICByZXR1cm4gbmV3VmFsdWUgIT09IG9sZFZhbHVlXG4gICAgfSkgIT09IHVuZGVmaW5lZFxuXG4vKipcbiAqIEBuYW1lICAgIGZpbGxJbnB1dHNcbiAqIEBzdW1tYXJ5IGZpbGwgaW5wdXRzIHdpdGggdmFsdWVzXG4gKiBcbiAqIEBwYXJhbSAgIHtBcnJheX0gICAgIGlucHV0cyBcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIHZhbHVlcyBcbiAqIFxuICogQHJldHVybnMge0FycmF5fSBpbnB1dHNcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbGxJbnB1dHMgPSAoaW5wdXRzID0gW10sIHZhbHVlcyA9IFtdKSA9PiB7XG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpbnB1dHM6IGNoaWxkSW5wdXRzLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgfSA9IGlucHV0XG4gICAgICAgIGlmIChpc0FycihjaGlsZElucHV0cykpIHJldHVybiBmaWxsSW5wdXRzKGNoaWxkSW5wdXRzLCB2YWx1ZXMpXG5cbiAgICAgICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW25hbWVdXG4gICAgICAgIC8vIGlmIHZhbHVlIGlzIFJ4SlMgc3ViamVjdCB0cmlnZ2VyIGEgdmFsdWUgY2hhbmdlXG4gICAgICAgIGlmIChpc1N1YmplY3RMaWtlKGlucHV0LnZhbHVlKSkgcmV0dXJuIGlucHV0LnZhbHVlLm5leHQodmFsdWUpXG5cbiAgICAgICAgaW5wdXQudmFsdWUgPSB2YWx1ZVxuICAgIH0pXG4gICAgcmV0dXJuIGlucHV0c1xufVxuXG4vKipcbiAqIEBuYW1lICAgIGZpbmRJbnB1dHNcbiAqIEBzdW1tYXJ5IHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgaW5wdXQgYnkgbmFtZVxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSAgICBuYW1lIFxuICogQHBhcmFtICAge0FycmF5fSAgICAgaW5wdXRzIFxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBpbnB1dFxuICovXG5leHBvcnQgY29uc3QgZmluZElucHV0ID0gKG5hbWUsIGlucHV0cyA9IFtdKSA9PiB7XG4gICAgaW5wdXRzID0gaXNTdWJqZWN0TGlrZShpbnB1dHMpXG4gICAgICAgID8gaW5wdXRzLnZhbHVlXG4gICAgICAgIDogaW5wdXRzXG4gICAgZm9yIChsZXQgaSA9IDA7aSA8IGlucHV0cy5sZW5ndGg7aSsrKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBpbnB1dHNbaV0/LmlucHV0UHJvcHM/Lm5hbWUpIHJldHVybiBpbnB1dHNbaV1cblxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGlucHV0c1tpXS5pbnB1dHNcbiAgICAgICAgaWYgKCFpc0FycihjaGlsZHJlbikpIGNvbnRpbnVlXG5cbiAgICAgICAgY29uc3QgY2hpbGQgPSBmaW5kSW5wdXQobmFtZSwgY2hpbGRyZW4pXG4gICAgICAgIGlmIChjaGlsZCkgcmV0dXJuIGNoaWxkXG4gICAgfVxufVxuXG4vKipcbiAqIEBuYW1lICAgIGdldFZhbHVlc1xuICogQHN1bW1hcnkgZXh0cmFjdCB2YWx1ZXMgZnJvbSBpbnB1dHNcbiAqIFxuICogQHBhcmFtICAge0FycmF5fSBpbnB1dHMgXG4gKiBcbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbHVlc1xuICovXG5leHBvcnQgY29uc3QgZ2V0VmFsdWVzID0gKGlucHV0cyA9IFtdLCB2YWx1ZXMgPSB7fSkgPT4gaW5wdXRzXG4gICAgLnJlZHVjZSgodmFsdWVzLCBpbnB1dCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpbnB1dHM6IGNoaWxkSW5wdXRzLFxuICAgICAgICAgICAgaW5wdXRQcm9wcyxcbiAgICAgICAgICAgIG5hbWU6IF9uYW1lLFxuICAgICAgICAgICAgcnhWYWx1ZSxcbiAgICAgICAgfSA9IGlucHV0XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG5hbWUgPSBfbmFtZSxcbiAgICAgICAgICAgIHZhbHVlID0gcnhWYWx1ZT8udmFsdWUsXG4gICAgICAgIH0gPSBpbnB1dFByb3BzXG4gICAgICAgIHZhbHVlc1tuYW1lXSA9IGlzQXJyKGNoaWxkSW5wdXRzKVxuICAgICAgICAgICAgPyBnZXRWYWx1ZXMoY2hpbGRJbnB1dHMsIHZhbHVlcylcbiAgICAgICAgICAgIDogdmFsdWVcbiAgICAgICAgcmV0dXJuIHZhbHVlc1xuICAgIH0sIHZhbHVlcykiXSwibmFtZXMiOlsiaGFzVmFsdWUiLCJpc0FyciIsImlzRGVmaW5lZCIsImlzU3ViamVjdExpa2UiLCJyYW5kb21JbnQiLCJhZGRNaXNzaW5nUHJvcHMiLCJpbnB1dCIsIl9pbnB1dCRpbnB1dFByb3BzIiwiX2lwJHR5cGUiLCJfaXAkbmFtZSIsIl9pcCRpZCIsImtleVByZWZpeCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImlucHV0UHJvcHMiLCJpZCIsImlwIiwiY2hpbGRJbnB1dHMiLCJpbnB1dHMiLCJuYW1lIiwiX2lucHV0JHR5cGUiLCJ0eXBlIiwiX2NoaWxkSW5wdXRzJGZvckVhY2giLCJmb3JFYWNoIiwiY2FsbCIsImNvbmNhdCIsImNoZWNrSW5wdXRJbnZhbGlkIiwiaW5wdXRzSGlkZGVuIiwiX2lucHV0JGlucHV0UHJvcHMyIiwicnhWYWx1ZSIsInZhbGlkIiwiX2lucHV0JHR5cGUyIiwidHlwZUFsdCIsImVycm9yIiwibG9hZGluZyIsInJlcXVpcmVkIiwidmFsdWUiLCJpc1ZhbGlkIiwiaWdub3JlIiwiaW5jbHVkZXMiLCJpc0VtcHR5IiwiaW52YWxpZCIsImNoZWNrVmFsdWVzQ2hhbmdlZCIsInZhbHVlcyIsInZhbHVlc09yaWdpbmFsIiwiZmluZCIsIl9yZWYiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiZmlsbElucHV0cyIsImhhc093blByb3BlcnR5IiwibmV4dCIsImZpbmRJbnB1dCIsImkiLCJfaW5wdXRzJGkiLCJfaW5wdXRzJGkkaW5wdXRQcm9wcyIsImNoaWxkcmVuIiwiY2hpbGQiLCJnZXRWYWx1ZXMiLCJyZWR1Y2UiLCJfbmFtZSIsIl9pbnB1dFByb3BzJG5hbWUiLCJfaW5wdXRQcm9wcyR2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/utils.js\n')},"./src/utils/reactjs/components/form/validateCriteria.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "validateCriteria": () => (/* binding */ validateCriteria)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/components/Message.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/**\n * @name    validateCriteria\n * @summary validate input value against a list of criteria.\n * Generate a message showing whether individual critera is valid or not\n * \n * @param   {*}                     value                           input value\n * @param   {Object}                conf                            input props/validation configuration\n * @param   {Function|Object}       conf.components.CriteriaItem    (optional) criteria item component\n * @param   {Function|Object}       conf.components.CriteriaList    (optional) criteria list container component\n * @param   {Function|Object}       conf.components.Icon            (optional) icon component\n * @param   {Array}                 conf.criteria                   list of criteria\n * @param   {String|Element|Object} conf.criteria[].content         (optional) regular expression to test the criteria\n * Set criteria[i].style.verticalAlign = \'top\' for multiline text\n * @param   {String|Element|Object} conf.criteria[].iconInvalid     (optional) criteria invalid icon \n * @param   {String|Element|Object} conf.criteria[].iconInvalid     (optional) criteria valid icon\n * @param   {Bool}                  conf.criteria[].persist         (optional) if falsy, hides criteria element from \n * message when value is valid against the criteria.\n * @param   {String|Element|Object} conf.criteria[].regex           (option) regular expression to test the criteria\n * @param   {String|Element|Object} conf.criteria[].validate        (option) use a function for custom validation.\n *                                                                  Either regex or plain function required.\n *                                                                  Function arguments: value.\n *                                                                  Function should return one of the following:\n *                                                                  - Boolean|String|Element (truthy = value is invalid)\n *                                                                  - Object with following properties:\n *                                                                      - content: String|Element\n *                                                                      - icon: String|Object|Element\n *                                                                      - status (optional): String (Default: "error")\n *                                                                      - style (optional): Object\n * @param   {*}                     conf.criteriaFooter             (optional) message footer\n * @param   {*}                     conf.criteriaHeader             (optional) message header\n * @param   {String|Element|Object} conf.criteriaIconInvalid        (optional) default value for `iconInvalid` \n * @param   {String|Element|Object} conf.criteriaIconInvalid        (optional) default value for  `iconValid`\n * @param   {Boolean}               conf.criteriaPersist            (optional) default value for `criteria[0].persist`\n *                                                                  Default: `true`\n * \n * @returns {Array} ```javascript\n * [\n *  message,        // object: criteria message\n *  invalid,        // boolean: whether one or more criteria is invalid\n *  criteriaItems,  // array: criteria items used to populate message\n *  numInvalid      // number: number of criteria is invalid\n * ]\n * ```\n */\nvar validateCriteria = function validateCriteria(value, conf) {\n  var hasVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var _conf$components = conf.components,\n    _conf$components2 = _conf$components === void 0 ? {} : _conf$components,\n    _conf$components2$Cri = _conf$components2.CriteriaItem,\n    CriteriaItem = _conf$components2$Cri === void 0 ? \'div\' : _conf$components2$Cri,\n    _conf$components2$Cri2 = _conf$components2.CriteriaList,\n    CriteriaList = _conf$components2$Cri2 === void 0 ? \'div\' : _conf$components2$Cri2,\n    Icon = _conf$components2.Icon,\n    _conf$criteria = conf.criteria,\n    criteria = _conf$criteria === void 0 ? [] : _conf$criteria,\n    criteriaFooter = conf.criteriaFooter,\n    criteriaHeader = conf.criteriaHeader,\n    _conf$criteriaIconInv = conf.criteriaIconInvalid,\n    _iconInvalid = _conf$criteriaIconInv === void 0 ? _Message__WEBPACK_IMPORTED_MODULE_2__.statusIcons.error : _conf$criteriaIconInv,\n    _conf$criteriaIconVal = conf.criteriaIconValid,\n    _iconValid = _conf$criteriaIconVal === void 0 ? _Message__WEBPACK_IMPORTED_MODULE_2__.statusIcons.success : _conf$criteriaIconVal,\n    _conf$criteriaPersist = conf.criteriaPersist,\n    criteriaPersist = _conf$criteriaPersist === void 0 ? true : _conf$criteriaPersist;\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isArr)(criteria) || !criteria.length) return [];\n  var criteriaItems = criteria.map(function (c, i) {\n    var _status, _icon, _icon2;\n    var content = c.content,\n      _c$iconInvalid = c.iconInvalid,\n      iconInvalid = _c$iconInvalid === void 0 ? _iconInvalid : _c$iconInvalid,\n      _c$iconValid = c.iconValid,\n      iconValid = _c$iconValid === void 0 ? _iconValid : _c$iconValid,\n      _c$persist = c.persist,\n      persist = _c$persist === void 0 ? criteriaPersist : _c$persist,\n      regex = c.regex,\n      _c$style = c.style,\n      style = _c$style === void 0 ? {} : _c$style,\n      validate = c.validate;\n    var icon, status;\n    var invalid = regex instanceof RegExp ? !regex.test("".concat(value)) : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(validate) && validate(value);\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(invalid) || /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(content)) {\n      content = invalid;\n    } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(invalid)) {\n      var o = invalid;\n      content = o.content;\n      icon = o.icon;\n      invalid = o.status === _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.error;\n      status = _Message__WEBPACK_IMPORTED_MODULE_2__.statuses[o.status] ? o.status : _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.error;\n      style = _objectSpread(_objectSpread({}, style), o.style);\n    }\n    (_status = status) !== null && _status !== void 0 ? _status : status = invalid ? _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.error : _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.success;\n    invalid = !!invalid;\n    c.valid = !invalid;\n    (_icon = icon) !== null && _icon !== void 0 ? _icon : icon = !hasVal || invalid ? iconInvalid : status === _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.success ? iconValid : _Message__WEBPACK_IMPORTED_MODULE_2__.statusIcons[status] || iconValid;\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(icon)) icon = {\n      icon: icon,\n      name: icon\n    };\n    icon = !!Icon && ! /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(icon) && !!((_icon2 = icon) !== null && _icon2 !== void 0 && _icon2.name) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Icon, icon) : icon;\n    var color = !hasVal ? undefined : status === _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.warning ? _Message__WEBPACK_IMPORTED_MODULE_2__.statusColors.warning_bg // regular warning color isn\'t visible \n    : _Message__WEBPACK_IMPORTED_MODULE_2__.statusColors[status];\n    return content && (persist || invalid) && {\n      color: color,\n      icon: /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(icon) && icon,\n      invalid: invalid,\n      style: style,\n      content: content\n    };\n  }).filter(Boolean);\n  if (!criteriaItems.length) return [undefined, 0];\n  var numInvalid = criteriaItems.filter(function (x) {\n    return x.invalid;\n  }).length;\n  var getItem = function getItem(item, i) {\n    var color = item.color,\n      content = item.content,\n      icon = item.icon,\n      style = item.style;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CriteriaItem, {\n      content: content,\n      icon: icon,\n      key: "".concat(value).concat(i),\n      style: _objectSpread({\n        color: color,\n        display: \'table-row\',\n        marginTop: 2,\n        // set criteria[].style.verticalAlign = \'top\' for multiline content\n        verticalAlign: \'middle\',\n        width: \'100%\'\n      }, style)\n    }, icon && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n      children: icon,\n      style: {\n        display: \'table-cell\',\n        lineHeight: 1,\n        padding: \'0 5px\',\n        verticalAlign: \'inherit\'\n      }\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n      children: content,\n      style: {\n        display: \'table-cell\',\n        verticalAlign: \'inherit\'\n      }\n    }));\n  };\n  var message = {\n    content: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CriteriaList, null, criteriaItems.map(getItem), criteriaFooter),\n    header: criteriaHeader,\n    key: "".concat(numInvalid).concat(value),\n    icon: false,\n    status: !hasVal ? _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.info : !!numInvalid ? _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.error : _Message__WEBPACK_IMPORTED_MODULE_2__.statuses.success,\n    style: {\n      textAlign: \'left\'\n    }\n  };\n  return [message, numInvalid > 0, criteriaItems, numInvalid];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validateCriteria);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/form/validateCriteria.jsx\n')},"./src/utils/reactjs/components/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Button": () => (/* reexport safe */ _Button__WEBPACK_IMPORTED_MODULE_2__.Button),\n/* harmony export */   "CharacterCount": () => (/* reexport safe */ _CharacterCount__WEBPACK_IMPORTED_MODULE_3__.CharacterCount),\n/* harmony export */   "FormBuilder": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.FormBuilder),\n/* harmony export */   "FormInput": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.FormInput),\n/* harmony export */   "Grid": () => (/* reexport safe */ _Grid__WEBPACK_IMPORTED_MODULE_4__.Grid),\n/* harmony export */   "Memo": () => (/* reexport safe */ _Memo__WEBPACK_IMPORTED_MODULE_5__.Memo),\n/* harmony export */   "Message": () => (/* reexport safe */ _Message__WEBPACK_IMPORTED_MODULE_6__.Message),\n/* harmony export */   "ModalBasic": () => (/* reexport safe */ _modal__WEBPACK_IMPORTED_MODULE_1__.ModalBasic),\n/* harmony export */   "ModalBuilder": () => (/* reexport safe */ _modal__WEBPACK_IMPORTED_MODULE_1__.ModalBuilder),\n/* harmony export */   "ModalService": () => (/* reexport safe */ _modal__WEBPACK_IMPORTED_MODULE_1__.ModalService),\n/* harmony export */   "ModalTitle": () => (/* reexport safe */ _modal__WEBPACK_IMPORTED_MODULE_1__.ModalTitle),\n/* harmony export */   "ModalsContainer": () => (/* reexport safe */ _modal__WEBPACK_IMPORTED_MODULE_1__.ModalsContainer),\n/* harmony export */   "QueueItemStatus": () => (/* reexport safe */ _QueueItemStatus__WEBPACK_IMPORTED_MODULE_7__.QueueItemStatus),\n/* harmony export */   "RxSubjectView": () => (/* reexport safe */ _RxSubjectView__WEBPACK_IMPORTED_MODULE_8__.RxSubjectView),\n/* harmony export */   "ScrollIndicator": () => (/* reexport safe */ _ScrollIndicator__WEBPACK_IMPORTED_MODULE_10__.ScrollIndicator),\n/* harmony export */   "ScrollbarStyled": () => (/* reexport safe */ _ScrollbarStyled__WEBPACK_IMPORTED_MODULE_9__.ScrollbarStyled),\n/* harmony export */   "UseHook": () => (/* reexport safe */ _UseHook__WEBPACK_IMPORTED_MODULE_12__.UseHook),\n/* harmony export */   "addMissingProps": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.addMissingProps),\n/* harmony export */   "checkInputInvalid": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.checkInputInvalid),\n/* harmony export */   "checkValuesChanged": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.checkValuesChanged),\n/* harmony export */   "errorMessages": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.errorMessages),\n/* harmony export */   "fillInputs": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.fillInputs),\n/* harmony export */   "findInput": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.findInput),\n/* harmony export */   "getValues": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.getValues),\n/* harmony export */   "setupDefaults": () => (/* reexport safe */ _setupDefaults__WEBPACK_IMPORTED_MODULE_11__.setupDefaults),\n/* harmony export */   "statusColors": () => (/* reexport safe */ _Message__WEBPACK_IMPORTED_MODULE_6__.statusColors),\n/* harmony export */   "statusIcons": () => (/* reexport safe */ _Message__WEBPACK_IMPORTED_MODULE_6__.statusIcons),\n/* harmony export */   "statuses": () => (/* reexport safe */ _Message__WEBPACK_IMPORTED_MODULE_6__.statuses),\n/* harmony export */   "styleAScollbar": () => (/* reexport safe */ _ScrollbarStyled__WEBPACK_IMPORTED_MODULE_9__.styleAScollbar),\n/* harmony export */   "useOptions": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.useOptions),\n/* harmony export */   "useQueueItemStatus": () => (/* reexport safe */ _QueueItemStatus__WEBPACK_IMPORTED_MODULE_7__.useQueueItemStatus),\n/* harmony export */   "validateCriteria": () => (/* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_0__.validateCriteria)\n/* harmony export */ });\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/reactjs/components/form/index.js");\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/components/modal/index.js");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/components/Button.jsx");\n/* harmony import */ var _CharacterCount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/components/CharacterCount.jsx");\n/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/Grid.jsx");\n/* harmony import */ var _Memo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/components/Memo.jsx");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/reactjs/components/Message.jsx");\n/* harmony import */ var _QueueItemStatus__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/reactjs/components/QueueItemStatus.jsx");\n/* harmony import */ var _RxSubjectView__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/utils/reactjs/components/RxSubjectView.jsx");\n/* harmony import */ var _ScrollbarStyled__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/utils/reactjs/components/ScrollbarStyled.jsx");\n/* harmony import */ var _ScrollIndicator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/utils/reactjs/components/ScrollIndicator.jsx");\n/* harmony import */ var _setupDefaults__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/utils/reactjs/components/setupDefaults.js");\n/* harmony import */ var _UseHook__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/utils/reactjs/components/UseHook.jsx");\n// directories\n\n\n// files\n\n\n\n\n\n\n\n\n\n // keep at the end \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ3NCO0FBQ0M7QUFDdkI7QUFDd0I7QUFDUTtBQUNWO0FBQ0E7QUFDRztBQUNRO0FBQ0Y7QUFDRTtBQUNBO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL2luZGV4LmpzP2VhNGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZGlyZWN0b3JpZXNcbmV4cG9ydCAqIGZyb20gJy4vZm9ybSdcbmV4cG9ydCAqIGZyb20gJy4vbW9kYWwnXG4vLyBmaWxlc1xuZXhwb3J0ICogZnJvbSAnLi9CdXR0b24nXG5leHBvcnQgKiBmcm9tICcuL0NoYXJhY3RlckNvdW50J1xuZXhwb3J0ICogZnJvbSAnLi9HcmlkJ1xuZXhwb3J0ICogZnJvbSAnLi9NZW1vJ1xuZXhwb3J0ICogZnJvbSAnLi9NZXNzYWdlJ1xuZXhwb3J0ICogZnJvbSAnLi9RdWV1ZUl0ZW1TdGF0dXMnXG5leHBvcnQgKiBmcm9tICcuL1J4U3ViamVjdFZpZXcnXG5leHBvcnQgKiBmcm9tICcuL1Njcm9sbGJhclN0eWxlZCdcbmV4cG9ydCAqIGZyb20gJy4vU2Nyb2xsSW5kaWNhdG9yJ1xuZXhwb3J0ICogZnJvbSAnLi9zZXR1cERlZmF1bHRzJyAvLyBrZWVwIGF0IHRoZSBlbmQgXG5leHBvcnQgKiBmcm9tICcuL1VzZUhvb2snIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/index.js\n')},"./src/utils/reactjs/components/modal/ModalBasic.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ModalBasic": () => (/* binding */ ModalBasic),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/window.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _ScrollbarStyled__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/components/ScrollbarStyled.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar _templateObject;\nvar _excluded = ["children", "onClose", "closeButton", "closeOnBackdropClick", "isMobile", "style"];\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar textsCap = {\n  close: \'close\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(textsCap, true);\nfunction ModalBasic(_ref) {\n  var _isMobile, _closeButton;\n  var children = _ref.children,\n    onClose = _ref.onClose,\n    closeButton = _ref.closeButton,\n    _ref$closeOnBackdropC = _ref.closeOnBackdropClick,\n    closeOnBackdropClick = _ref$closeOnBackdropC === void 0 ? true : _ref$closeOnBackdropC,\n    isMobile = _ref.isMobile,\n    style = _ref.style,\n    props = _objectWithoutProperties(_ref, _excluded);\n  (_isMobile = isMobile) !== null && _isMobile !== void 0 ? _isMobile : isMobile = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.useRxSubject)(_window__WEBPACK_IMPORTED_MODULE_3__.rxLayout, function (l) {\n    return l === _window__WEBPACK_IMPORTED_MODULE_3__.MOBILE;\n  })[0];\n  (_closeButton = closeButton) !== null && _closeButton !== void 0 ? _closeButton : closeButton = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CloseButton, {\n    style: !isMobile ? undefined : {\n      background: \'black\',\n      position: \'absolute\',\n      right: 15,\n      top: 15\n    },\n    title: textsCap.close\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ScrollbarStyled__WEBPACK_IMPORTED_MODULE_5__["default"], _objectSpread(_objectSpread({}, props), {}, {\n    className: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.className)([\'ModalBasic\', props.className]),\n    indicator: {\n      styles: {\n        // places the indicator bar at the top and fixes placement issue due the \'fixed\' positioning above\n        root: {\n          position: \'fixed\'\n        }\n      }\n    },\n    onClick: closeOnBackdropClick && onClose,\n    style: {\n      alignItems: \'start\',\n      background: \'#000000eb\',\n      cursor: closeOnBackdropClick ? \'pointer\' : \'\',\n      display: \'flex\',\n      justifyContent: \'center\',\n      height: \'100%\',\n      left: 0,\n      overflowY: \'scroll\',\n      padding: isMobile ? \'6px 3px\' : \'2.5% 0\',\n      // padding: \'2.5% 0\',\n      position: \'fixed\',\n      top: 0,\n      width: \'100%\'\n    }\n  }), closeButton, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    className: \'ModalBasicInner\',\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    },\n    style: _objectSpread({\n      background: (0,_window__WEBPACK_IMPORTED_MODULE_3__.useInverted)() ? \'#212121\' : \'white\',\n      borderRadius: 5,\n      cursor: \'initial\',\n      maxHeight: \'95%\',\n      overflowY: \'auto\',\n      padding: \'20px 25px 15px\'\n    }, style)\n  }, children));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalBasic);\nvar CloseButton = styled_components__WEBPACK_IMPORTED_MODULE_6__/* ["default"].div */ .ZP.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\\nborder: 1px solid white;\\nborder-radius: 100%;\\ncursor: pointer;\\nheight: 28px;\\nopacity: 0.3;\\npadding: 6px 0 0 0;\\nposition: fixed;\\nright: 20px;\\ntop: 20px;\\nwidth: 30px;\\n\\n&:hover {\\n    opacity: 1;\\n}\\n\\n&:before, &:after {\\n    background-color: white;\\n    content: \' \';\\n    height: 15px;\\n    left: 13px;\\n    position: absolute;\\n    width: 2px;\\n}\\n\\n&:before {\\n    transform: rotate(45deg);\\n}\\n\\n&:after {\\n    transform: rotate(-45deg);\\n}"])));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/modal/ModalBasic.jsx\n')},"./src/utils/reactjs/components/modal/ModalBuilder.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ModalBuilder": () => (/* binding */ ModalBuilder),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _toProps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/toProps.js");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/components/Button.jsx");\n/* harmony import */ var _ModalBasic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalBasic.jsx");\n/* harmony import */ var _ModalTitle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalTitle.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar _excluded = ["actionButtons", "actionsProps", "closeButton", "components", "content", "header", "ignore", "onClose", "open", "prefix", "subtitle", "suffix", "title"];\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar textsCap = (0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)({\n  close: \'close\'\n}, true)[1];\nvar defaultComponents = Object.freeze({\n  Actions: \'div\',\n  Button: _Button__WEBPACK_IMPORTED_MODULE_5__["default"],\n  Content: \'div\',\n  ContentInner: \'div\',\n  Modal: _ModalBasic__WEBPACK_IMPORTED_MODULE_6__["default"],\n  ModalInner: function ModalInner(props) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", props);\n  },\n  Subtitle: \'div\',\n  Title: _ModalTitle__WEBPACK_IMPORTED_MODULE_7__["default"]\n});\nfunction ModalBuilder(_ref) {\n  var _objectSpread2;\n  var _ref$actionButtons = _ref.actionButtons,\n    actionButtons = _ref$actionButtons === void 0 ? [] : _ref$actionButtons,\n    actionsProps = _ref.actionsProps,\n    closeButton = _ref.closeButton,\n    components = _ref.components,\n    content = _ref.content,\n    header = _ref.header,\n    _ref$ignore = _ref.ignore,\n    ignore = _ref$ignore === void 0 ? [] : _ref$ignore,\n    onClose = _ref.onClose,\n    _ref$open = _ref.open,\n    _open = _ref$open === void 0 ? false : _ref$open,\n    prefix = _ref.prefix,\n    subtitle = _ref.subtitle,\n    suffix = _ref.suffix,\n    _ref$title = _ref.title,\n    title = _ref$title === void 0 ? header : _ref$title,\n    props = _objectWithoutProperties(_ref, _excluded);\n  components = _objectSpread(_objectSpread({}, defaultComponents), components);\n  var _components = components,\n    Actions = _components.Actions,\n    Button = _components.Button,\n    Content = _components.Content,\n    ContentInner = _components.ContentInner,\n    Modal = _components.Modal,\n    ModalInner = _components.ModalInner,\n    Subtitle = _components.Subtitle,\n    Title = _components.Title;\n  var _useRxSubject = (0,_hooks__WEBPACK_IMPORTED_MODULE_3__.useRxSubject)(_open),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 2),\n    open = _useRxSubject2[0],\n    setOpen = _useRxSubject2[1];\n  var handleClose = function handleClose() {\n    setOpen(false);\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(onClose) && onClose();\n  };\n\n  // keep an eye on open prop and change accordingly\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    !_open ? handleClose() : setOpen(_open);\n  }, [_open]);\n  if (!Modal) return;\n  var closeBtnProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_4__["default"])(closeButton);\n  if (closeBtnProps) {\n    var _closeBtnProps$color;\n    var onClick = closeBtnProps.onClick;\n    // if no color specified use grey background\n    (_closeBtnProps$color = closeBtnProps.color) !== null && _closeBtnProps$color !== void 0 ? _closeBtnProps$color : closeBtnProps.color = \'inherit\';\n    closeBtnProps.onClick = function () {\n      handleClose();\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(onClick) && onClick.apply(void 0, arguments);\n    };\n  }\n  // actions buttons\n  var actionBtns = [closeBtnProps].concat(_toConsumableArray((actionButtons || []).map(function (x) {\n    return _objectSpread({\n      variant: \'contained\'\n    }, (0,_toProps__WEBPACK_IMPORTED_MODULE_4__["default"])(x) || {});\n  }))).filter(Boolean).map(function (props, i) {\n    var btnProps = _objectSpread({}, props);\n    var _btnProps$Component = btnProps.Component,\n      Component = _btnProps$Component === void 0 ? Button : _btnProps$Component;\n    delete btnProps.Component;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _objectSpread(_objectSpread({}, btnProps), {}, {\n      key: i\n    }));\n  });\n  var contentProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_4__["default"])(content, undefined, false);\n  var titleProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_4__["default"])(title, undefined, false);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Modal, _objectSpread(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, \'aria-describedby\', \'alert-dialog-description\'), _defineProperty(_objectSpread2, \'aria-labelledby\', \'alert-dialog-title\'), _objectSpread2), (0,_utils__WEBPACK_IMPORTED_MODULE_2__.objWithoutKeys)(props, ignore)), {}, {\n    onClose: handleClose,\n    open: open\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ModalInner, {\n    open: open,\n    onClose: handleClose\n  }, prefix, titleProps && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Title, titleProps, titleProps.children, subtitle && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Subtitle, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("small", null, subtitle))), contentProps && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Content, contentProps, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ContentInner, {\n    component: \'div\'\n  }, contentProps.children)), !!actionBtns.length && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Actions, _objectSpread(_objectSpread({\n    children: actionBtns\n  }, actionsProps), {}, {\n    style: _objectSpread({\n      padding: \'15px 0\',\n      textAlign: \'right\'\n    }, actionsProps === null || actionsProps === void 0 ? void 0 : actionsProps.style)\n  })), suffix));\n}\nvar actionPropType = prop_types__WEBPACK_IMPORTED_MODULE_8___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_8___default().string),\n// any props that are accepted by MUI Button component\nprop_types__WEBPACK_IMPORTED_MODULE_8___default().shape({\n  Component: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().element) // for custom button\n}), (prop_types__WEBPACK_IMPORTED_MODULE_8___default().element)]);\nModalBuilder.propTypes = {\n  // Additional buttons to be displayed on the right side of the close button\n  actionButtons: prop_types__WEBPACK_IMPORTED_MODULE_8___default().arrayOf(actionPropType),\n  // Footer Actions component props\n  actionsProps: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().object),\n  // The close button\n  closeButton: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any),\n  components: prop_types__WEBPACK_IMPORTED_MODULE_8___default().shape({\n    // container for footer action buttons\n    Actions: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType),\n    // Default Button component\n    Button: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType),\n    Content: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType),\n    ContentInner: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType),\n    Modal: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType),\n    Subtitle: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType),\n    // Modal header/title component\n    Title: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().elementType)\n  }),\n  // Modal body content\n  content: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any),\n  // Callback to be triggered when modal is closed\n  onClose: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().func),\n  // Show or hide the modal. NB: if falsy, modal component will still be on the virtual DOM.\n  // Default: true\n  open: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any),\n  // Content to be displayed before the title. Eg: to add a mobile modal header\n  prefix: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any),\n  // Modal subtitle/subheader displayed underneath the title.\n  // A good place to place short explanation or guideline for the user.\n  subtitle: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any),\n  // Content to be displayed after the action and close buttons.\n  suffix: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any),\n  // Modal title/header\n  title: (prop_types__WEBPACK_IMPORTED_MODULE_8___default().any)\n  //... any other props accepted by MUI Modal component\n};\n\nModalBuilder.defaultProps = {\n  closeButton: textsCap.close,\n  components: _objectSpread({}, defaultComponents),\n  // exclude props being passed on to Modals component\n  ignore: [\'actionButtons\', \'actionsProps\', \'closeButton\',\n  // \'content\',\n  \'conntentInnder\', \'ignore\'\n  // \'prefix\',\n  // \'subtitle\',\n  // \'suffix\',\n  // \'title\',\n  ],\n\n  open: true\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalBuilder);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/modal/ModalBuilder.jsx\n')},"./src/utils/reactjs/components/modal/ModalTitle.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ModalTitle": () => (/* binding */ ModalTitle),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar _excluded = ["Component"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\nvar ModalTitle = function ModalTitle(_ref) {\n  var _ref$Component = _ref.Component,\n    Component = _ref$Component === void 0 ? \'h2\' : _ref$Component,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _objectSpread(_objectSpread({}, props), {}, {\n    style: _objectSpread({\n      borderBottom: \'1px solid rgb(51 51 51 / 30%)\',\n      margin: \'0 0 15px\'\n    }, props.style)\n  }));\n};\nModalTitle.propTypes = {\n  Component: (prop_types__WEBPACK_IMPORTED_MODULE_1___default().elementType)\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalTitle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL21vZGFsL01vZGFsVGl0bGUuanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFrQztBQUNUO0FBRWxCLElBQU1FLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFBQyxJQUFBO0VBQUEsSUFBQUMsY0FBQSxHQUFBRCxJQUFBLENBQU1FLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxjQUFBLGNBQUcsSUFBSSxHQUFBQSxjQUFBO0lBQUtFLEtBQUssR0FBQUMsd0JBQUEsQ0FBQUosSUFBQSxFQUFBSyxTQUFBO0VBQUEsb0JBQ25EUCwwREFBQSxDQUFDSSxTQUFTLEVBQUFLLGFBQUEsQ0FBQUEsYUFBQSxLQUNISixLQUFLO0lBQ1JLLEtBQUssRUFBQUQsYUFBQTtNQUNERSxZQUFZLEVBQUUsK0JBQStCO01BQzdDQyxNQUFNLEVBQUU7SUFBVSxHQUNmUCxLQUFLLENBQUNLLEtBQUs7RUFDakIsRUFDRCxDQUFDO0FBQUEsQ0FDUjtBQUNEVCxVQUFVLENBQUNZLFNBQVMsR0FBRztFQUNuQlQsU0FBUyxFQUFFTCwrREFBcUJlO0FBQ3BDLENBQUM7QUFDRCxpRUFBZWIsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL21vZGFsL01vZGFsVGl0bGUuanN4PzE2ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgY29uc3QgTW9kYWxUaXRsZSA9ICh7IENvbXBvbmVudCA9ICdoMicsIC4uLnByb3BzIH0pID0+IChcbiAgICA8Q29tcG9uZW50IHsuLi57XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIHJnYig1MSA1MSA1MSAvIDMwJSknLFxuICAgICAgICAgICAgbWFyZ2luOiAnMCAwIDE1cHgnLFxuICAgICAgICAgICAgLi4ucHJvcHMuc3R5bGUsXG4gICAgICAgIH1cbiAgICB9fSAvPlxuKVxuTW9kYWxUaXRsZS5wcm9wVHlwZXMgPSB7XG4gICAgQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG59XG5leHBvcnQgZGVmYXVsdCBNb2RhbFRpdGxlIl0sIm5hbWVzIjpbIlByb3BUeXBlcyIsIlJlYWN0IiwiTW9kYWxUaXRsZSIsIl9yZWYiLCJfcmVmJENvbXBvbmVudCIsIkNvbXBvbmVudCIsInByb3BzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwiY3JlYXRlRWxlbWVudCIsIl9vYmplY3RTcHJlYWQiLCJzdHlsZSIsImJvcmRlckJvdHRvbSIsIm1hcmdpbiIsInByb3BUeXBlcyIsImVsZW1lbnRUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/modal/ModalTitle.jsx\n')},"./src/utils/reactjs/components/modal/ModalsContainer.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ModalsContainer": () => (/* binding */ ModalsContainer),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _toProps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/toProps.js");\n/* harmony import */ var _ModalBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalBuilder.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\nfunction ModalsContainer(props) {\n  var _defaults$containerPr;\n  var _defaults$props$compo = _objectSpread(_objectSpread(_objectSpread({}, defaults), props), {}, {\n      components: _objectSpread(_objectSpread({}, defaults.components), props.components),\n      modalProps: _objectSpread(_objectSpread({}, defaults.modalProps), props.modalProps)\n    }),\n    _defaults$props$compo2 = _defaults$props$compo.components,\n    _defaults$props$compo3 = _defaults$props$compo2.Container,\n    Container = _defaults$props$compo3 === void 0 ? \'div\' : _defaults$props$compo3,\n    _defaults$props$compo4 = _defaults$props$compo2.Modal,\n    Modal = _defaults$props$compo4 === void 0 ? _ModalBuilder__WEBPACK_IMPORTED_MODULE_4__["default"] : _defaults$props$compo4,\n    containerProps = _defaults$props$compo.containerProps,\n    modalProps = _defaults$props$compo.modalProps,\n    modals = _defaults$props$compo.modals;\n  var _useRxSubject = (0,_hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubject)(modals, function () {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n      return Array.from(x);\n    }),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 1),\n    modalsArr = _useRxSubject2[0];\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, _objectSpread(_objectSpread(_objectSpread({}, defaults.containerProps), containerProps), {}, {\n    className: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.className)([\'modals-container\', (_defaults$containerPr = defaults.containerProps) === null || _defaults$containerPr === void 0 ? void 0 : _defaults$containerPr.className, containerProps === null || containerProps === void 0 ? void 0 : containerProps.className])\n  }), modalsArr.map(function (_ref) {\n    var _Modal$defaultProps;\n    var _ref2 = _slicedToArray(_ref, 2),\n      id = _ref2[0],\n      modalOrProps = _ref2[1];\n    // element supplied > pass on as is\n    if ( /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(modalOrProps)) return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n      id: id,\n      key: id\n    }, modalOrProps);\n\n    // object supplied > use the Modal component\n    var iProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_3__["default"])(modalOrProps);\n    iProps = _objectSpread(_objectSpread(_objectSpread({}, modalProps), iProps), {}, {\n      components: _objectSpread(_objectSpread({}, modalProps === null || modalProps === void 0 ? void 0 : modalProps.components), iProps.components)\n    });\n    iProps.ignore = [].concat(_toConsumableArray((Modal === null || Modal === void 0 ? void 0 : (_Modal$defaultProps = Modal.defaultProps) === null || _Modal$defaultProps === void 0 ? void 0 : _Modal$defaultProps.ignore) || []), _toConsumableArray(iProps.ignore || []));\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n      id: id,\n      key: id\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Modal, iProps));\n  }));\n}\nvar defaults = {\n  components: {\n    Container: \'div\',\n    // without proper element (or style) modal will not work as expected\n    Modal: _ModalBuilder__WEBPACK_IMPORTED_MODULE_4__["default"]\n  },\n  containerProps: {},\n  modalProps: {},\n  modals: undefined\n};\nModalsContainer.defaultProps = defaults;\nModalsContainer.propTypes = {\n  components: prop_types__WEBPACK_IMPORTED_MODULE_5___default().shape({\n    Container: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().elementType),\n    Modal: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().elementType)\n  }),\n  // Container component props\n  containerProps: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().object),\n  // common props for each Modal element\n  modalProps: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().object),\n  modals: prop_types__WEBPACK_IMPORTED_MODULE_5___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_5___default().instanceOf(rxjs__WEBPACK_IMPORTED_MODULE_6__/* .BehaviorSubject */ .X), prop_types__WEBPACK_IMPORTED_MODULE_5___default().instanceOf(Map)]).isRequired\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalsContainer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/modal/ModalsContainer.jsx\n')},"./src/utils/reactjs/components/modal/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ModalBasic": () => (/* reexport safe */ _ModalBasic__WEBPACK_IMPORTED_MODULE_0__.ModalBasic),\n/* harmony export */   "ModalBuilder": () => (/* reexport safe */ _ModalBuilder__WEBPACK_IMPORTED_MODULE_1__.ModalBuilder),\n/* harmony export */   "ModalService": () => (/* reexport safe */ _modalService__WEBPACK_IMPORTED_MODULE_4__.ModalService),\n/* harmony export */   "ModalTitle": () => (/* reexport safe */ _ModalTitle__WEBPACK_IMPORTED_MODULE_2__.ModalTitle),\n/* harmony export */   "ModalsContainer": () => (/* reexport safe */ _ModalsContainer__WEBPACK_IMPORTED_MODULE_3__.ModalsContainer)\n/* harmony export */ });\n/* harmony import */ var _ModalBasic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalBasic.jsx");\n/* harmony import */ var _ModalBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalBuilder.jsx");\n/* harmony import */ var _ModalTitle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalTitle.jsx");\n/* harmony import */ var _ModalsContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/components/modal/ModalsContainer.jsx");\n/* harmony import */ var _modalService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/components/modal/modalService.js");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL21vZGFsL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBNEI7QUFDRTtBQUNGO0FBQ0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvY29tcG9uZW50cy9tb2RhbC9pbmRleC5qcz8yMjU4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vTW9kYWxCYXNpYydcbmV4cG9ydCAqIGZyb20gJy4vTW9kYWxCdWlsZGVyJ1xuZXhwb3J0ICogZnJvbSAnLi9Nb2RhbFRpdGxlJ1xuZXhwb3J0ICogZnJvbSAnLi9Nb2RhbHNDb250YWluZXInXG5leHBvcnQgKiBmcm9tICcuL21vZGFsU2VydmljZSciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/modal/index.js\n')},"./src/utils/reactjs/components/modal/modalService.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ModalService": () => (/* binding */ ModalService),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/uuid/index.js");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _isMemo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/isMemo.js");\n/* harmony import */ var _toProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/toProps.js");\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/reactjs/components/Button.jsx");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\nvar textsCap = (0,_languageHelper__WEBPACK_IMPORTED_MODULE_2__.translated)({\n  cancel: \'cancel\',\n  close: \'close\',\n  confirm: \'confirm\',\n  ruSure: \'are you sure?\'\n}, true)[1];\n/**\n * @name    ModalService\n * @summary modal sevice provides a simple way to add, update and remove modals when used with the ModalsContainer\n * component which uses the ModalBuilder component.\n * \n * The goal is to eliminate the need to manually modal related code inside the individual components and make working \n * with modals more fun rather a tedius task.\n * \n * The default exported instance is the global modal service which is used in the App.js.\n * \n * @example ```javascript\n * // === Create a new modal ===\n * // For a full list of accepted props see ModalBuilder component.\n * const modalProps = {\n *       actionButtons: [{\n *          content: \'Click Me!\',\n *          onClicked: () => alert(\'You clicked me!\'),\n *       }],\n *       content: \'This is the body/content of the modal. You can use text or any React element here.\',\n *       subtitle: \'This is the subtitle that appears underneath the title.\',\n *       title: \'This is the title.\',\n * }\n * const modalId = modalService.set(modalProps)\n * \n * // === Update existing modal ===\n * modalProps.title = \'The updated title\'\n * modalProps.subittle = \'This is cool!\'\n * modalService.set(modalProps, modalId)\n * \n * // === Remove modal ===\n * modalService.delete(modalId)\n * \n * \n * \n * ```\n */\nvar ModalService = /*#__PURE__*/_createClass(function ModalService() {\n  var _this = this;\n  _classCallCheck(this, ModalService);\n  /**\n   * @name confirm\n   * @summary \n   * @param   {Object}    confirmProps    all modal props accepted in the `set` function plus the following:\n   * @param   {*}         confirmProps.confirmButton  (optional)\n   * @param   {Function}  confirmProps.onConfirm (optional) callback triggered when user confirms or cancels/closes\n   * @param   {String}    id              (optional) modal ID\n   * \n   * @returns {String}    id\n   * \n   * @example ```javascript\n   * const confirmProps = {\n   *     closeButton: \'No\',\n   *     confirmButton: \'Yes\',\n   *     content: \'Are you sure? This action is irreversible!\',\n   *     onConfirm: accepted => console.log({ accepted }),\n   *     maxWidth: \'md\',\n   *     title: \'Delete object\',\n   * }\n   * modalService.confirm(confirmProps)\n   * ```\n   */\n  _defineProperty(this, "confirm", function (confirmProps) {\n    var _component$defaultPro, _confirmProps2;\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,uuid__WEBPACK_IMPORTED_MODULE_1__.v1)();\n    var component = arguments.length > 2 ? arguments[2] : undefined;\n    confirmProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(confirmProps, \'content\');\n    var _confirmProps = confirmProps,\n      _confirmProps$actionB = _confirmProps.actionButtons,\n      actionButtons = _confirmProps$actionB === void 0 ? [] : _confirmProps$actionB,\n      closeButton = _confirmProps.closeButton,\n      confirmButton = _confirmProps.confirmButton,\n      _confirmProps$content = _confirmProps.content,\n      content = _confirmProps$content === void 0 ? textsCap.ruSure : _confirmProps$content,\n      _onClose = _confirmProps.onClose,\n      onConfirm = _confirmProps.onConfirm;\n    var btnClose = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(closeButton);\n    var btnConfirm = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(confirmButton);\n    var doConfirm = function doConfirm(accepted) {\n      (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(onConfirm) && onConfirm(accepted);\n      _this.delete(id);\n    };\n    closeButton = btnClose !== null && _objectSpread(_objectSpread({}, btnClose), {}, {\n      children: (btnClose === null || btnClose === void 0 ? void 0 : btnClose.children) || textsCap.cancel,\n      onClick: function onClick() {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(btnClose === null || btnClose === void 0 ? void 0 : btnClose.onClick) && btnClose.onClick.apply(btnClose, arguments);\n      }\n    });\n    confirmButton = btnConfirm !== null && _objectSpread(_objectSpread({}, btnConfirm || {}), {}, {\n      status: (btnConfirm === null || btnConfirm === void 0 ? void 0 : btnConfirm.status) || \'success\',\n      children: (btnConfirm === null || btnConfirm === void 0 ? void 0 : btnConfirm.children) || textsCap.confirm,\n      onClick: function onClick() {\n        doConfirm(true);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(btnConfirm === null || btnConfirm === void 0 ? void 0 : btnConfirm.onClick) && btnConfirm.onClick.apply(btnConfirm, arguments);\n      }\n    });\n    return _this.show(_objectSpread(_objectSpread({}, confirmProps), {}, {\n      actionButtons: [].concat(_toConsumableArray(actionButtons), [confirmButton]).filter(Boolean),\n      closeButton: closeButton,\n      content: content,\n      ignore: [].concat(_toConsumableArray((component === null || component === void 0 ? void 0 : (_component$defaultPro = component.defaultProps) === null || _component$defaultPro === void 0 ? void 0 : _component$defaultPro.ignore) || []), _toConsumableArray(((_confirmProps2 = confirmProps) === null || _confirmProps2 === void 0 ? void 0 : _confirmProps2.ignore) || []), [\'onConfirm\', \'confirmButton\']),\n      open: true,\n      onClose: function onClose() {\n        doConfirm(false);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(_onClose) && _onClose.apply(void 0, arguments);\n      }\n    }), id, component);\n  });\n  /**\n   * @name    delete\n   * @summary close/remove modal\n   * \n   * @param   {String} id\n   */\n  _defineProperty(this, "delete", function (id) {\n    return _this.rxModals.value.get(id) && _this.show(null, id);\n  });\n  _defineProperty(this, "info", function () {\n    var confirmProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var id = arguments.length > 1 ? arguments[1] : undefined;\n    var component = arguments.length > 2 ? arguments[2] : undefined;\n    confirmProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(confirmProps, \'content\');\n    confirmProps.confirmButton = null;\n    confirmProps.closeButton = null;\n    // confirmProps.disableEscapeKeyDown ??= false\n    return _this.confirm(confirmProps, id, component);\n  });\n  /**\n   * @name    set\n   * @summary add or update a modal\n   * \n   * @param   {Object|null}   modalProps  custom modal or props to be supplied to the MUI Dialog component\n   * @param   {String}        id          (optional) modal ID.\n   *                                      Default: random  UUID V1\n   * @param   {*}             Component   Default: `ModalsContainer.defaultProps.components.Modal` or `ModalBuilder`\n   * \n   * @returns {String} id \n   */\n  _defineProperty(this, "show", function (modalProps) {\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,uuid__WEBPACK_IMPORTED_MODULE_1__.v1)();\n    var Component = arguments.length > 2 ? arguments[2] : undefined;\n    modalProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(modalProps, \'content\');\n    var modals = _this.rxModals.value;\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isObj)(modalProps)) {\n      var _modalProps;\n      var onClose = (_modalProps = modalProps) === null || _modalProps === void 0 ? void 0 : _modalProps.onClose;\n      modalProps.onClose = function () {\n        _this.delete(id);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(onClose) && onClose.apply(void 0, arguments);\n      };\n      modals.set(id, (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isFn)(Component) || (0,_isMemo__WEBPACK_IMPORTED_MODULE_4__["default"])(Component) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, modalProps) : modalProps);\n    } else {\n      modals.delete(id);\n    }\n    _this.rxModals.next(new Map(modals));\n    return id;\n  });\n  /**\n   * @name    showCompact\n   * @summary show a compact modal. Hides the close button and removes content padding.\n   * \n   * @param   {Object}    modalProps \n   * @param   {String}    id \n   * @param   {*}         Component \n   * \n   * @returns {String}    id\n   */\n  _defineProperty(this, "showCompact", function (modalProps, id, Component) {\n    var _closeButton$status, _modalProps2, _modalProps3, _modalProps3$contentP;\n    modalProps = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(modalProps, \'content\');\n    var closeButton = (0,_toProps__WEBPACK_IMPORTED_MODULE_5__["default"])(modalProps.closeButton || null);\n    if (closeButton) (_closeButton$status = closeButton.status) !== null && _closeButton$status !== void 0 ? _closeButton$status : closeButton.status = \'error\';\n    return _this.show(_objectSpread(_objectSpread({}, modalProps), {}, {\n      closeButton: closeButton,\n      contentProps: _objectSpread(_objectSpread({}, (_modalProps2 = modalProps) === null || _modalProps2 === void 0 ? void 0 : _modalProps2.contentProps), {}, {\n        style: _objectSpread({\n          padding: 0\n        }, (_modalProps3 = modalProps) === null || _modalProps3 === void 0 ? void 0 : (_modalProps3$contentP = _modalProps3.contentProps) === null || _modalProps3$contentP === void 0 ? void 0 : _modalProps3$contentP.style)\n      })\n    }), id, Component);\n  });\n  _defineProperty(this, "showForm", function (FormComponent) {\n    var _formProps$components, _formProps$components2, _formProps$components3;\n    var formProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var modalProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0,uuid__WEBPACK_IMPORTED_MODULE_1__.v1)();\n    var Component = arguments.length > 4 ? arguments[4] : undefined;\n    (_formProps$components = formProps.components) !== null && _formProps$components !== void 0 ? _formProps$components : formProps.components = {};\n    (_formProps$components3 = (_formProps$components2 = formProps.components).Button) !== null && _formProps$components3 !== void 0 ? _formProps$components3 : _formProps$components2.Button = _Button__WEBPACK_IMPORTED_MODULE_6__["default"];\n    modalProps.content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FormComponent, _objectSpread(_objectSpread({}, formProps), {}, {\n      onClose: function onClose() {\n        return _this.delete(id);\n      }\n    }));\n    modalProps.closeButton = null;\n    _this.show(modalProps, id, Component);\n  });\n  this.rxModals = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .BehaviorSubject */ .X(new Map());\n});\nvar modalService = new ModalService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (modalService);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/modal/modalService.js\n')},"./src/utils/reactjs/components/setupDefaults.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "setupDefaults": () => (/* binding */ setupDefaults)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n// ToDo: configure components for specific frameworks (MUI/Semantic)\n\nvar setupDefaults = function setupDefaults(name, library) {\n  var everything = __webpack_require__("./src/utils/reactjs/components/index.js");\n  Object.keys(everything).forEach(function (key) {\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.fallbackIfFails)(function () {\n      var _everything$key, _everything$key$setup;\n      return (_everything$key = everything[key]) === null || _everything$key === void 0 ? void 0 : (_everything$key$setup = _everything$key.setupDefaults) === null || _everything$key$setup === void 0 ? void 0 : _everything$key$setup.call(_everything$key, name, library);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL3NldHVwRGVmYXVsdHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNnRDtBQUV6QyxJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUlDLElBQUksRUFBRUMsT0FBTyxFQUFLO0VBQzVDLElBQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyx5Q0FBSSxDQUFDO0VBQ2hDQyxNQUFNLENBQ0RDLElBQUksQ0FBQ0gsVUFBVSxDQUFDLENBQ2hCSSxPQUFPLENBQUMsVUFBQUMsR0FBRztJQUFBLE9BQ1JULDBEQUFlLENBQUM7TUFBQSxJQUFBVSxlQUFBLEVBQUFDLHFCQUFBO01BQUEsUUFBQUQsZUFBQSxHQUNaTixVQUFVLENBQUNLLEdBQUcsQ0FBQyxjQUFBQyxlQUFBLHdCQUFBQyxxQkFBQSxHQUFmRCxlQUFBLENBQ01ULGFBQWEsY0FBQVUscUJBQUEsdUJBRG5CQSxxQkFBQSxDQUFBQyxJQUFBLENBQUFGLGVBQUEsRUFFT1IsSUFBSSxFQUFFQyxPQUFPLENBQUM7SUFBQSxDQUN6QixDQUFDO0VBQUEsQ0FDTCxDQUFDO0FBQ1QsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9jb21wb25lbnRzL3NldHVwRGVmYXVsdHMuanM/NjJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUb0RvOiBjb25maWd1cmUgY29tcG9uZW50cyBmb3Igc3BlY2lmaWMgZnJhbWV3b3JrcyAoTVVJL1NlbWFudGljKVxuaW1wb3J0IHsgZmFsbGJhY2tJZkZhaWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnXG5cbmV4cG9ydCBjb25zdCBzZXR1cERlZmF1bHRzID0gKG5hbWUsIGxpYnJhcnkpID0+IHtcbiAgICBjb25zdCBldmVyeXRoaW5nID0gcmVxdWlyZSgnLi8nKVxuICAgIE9iamVjdFxuICAgICAgICAua2V5cyhldmVyeXRoaW5nKVxuICAgICAgICAuZm9yRWFjaChrZXkgPT5cbiAgICAgICAgICAgIGZhbGxiYWNrSWZGYWlscygoKSA9PlxuICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmdba2V5XVxuICAgICAgICAgICAgICAgICAgICA/LnNldHVwRGVmYXVsdHNcbiAgICAgICAgICAgICAgICAgICAgPy4obmFtZSwgbGlicmFyeSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxufSJdLCJuYW1lcyI6WyJmYWxsYmFja0lmRmFpbHMiLCJzZXR1cERlZmF1bHRzIiwibmFtZSIsImxpYnJhcnkiLCJldmVyeXRoaW5nIiwicmVxdWlyZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiX2V2ZXJ5dGhpbmcka2V5IiwiX2V2ZXJ5dGhpbmcka2V5JHNldHVwIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/components/setupDefaults.js\n')},"./src/utils/reactjs/hooks/iUseReducer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "iUseReducer": () => (/* binding */ iUseReducer),\n/* harmony export */   "reducer": () => (/* binding */ reducer)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n/** ToDo: deprecate (use `useRxState` instead)\n * @name    iUseReducer\n * @summary A sugar for React `userReducer` with added benefit of tracking of component mounted status.\n *          Prevents state update if component is not mounted.\n *\n * @param   {Function}          reducerFn\n * @param   {Object|Function}   initialState    if function, a RxJS Subject will be supplied as argument\n *                                              as an alternative to setState\n *\n * @returns {Array}     [@state {Object}, @setState {Function}]\n */\nvar iUseReducer = function iUseReducer(reducerFn) {\n  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var onUnmount = arguments.length > 2 ? arguments[2] : undefined;\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n      var rxSetState = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(initialState) && new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .BehaviorSubject */ .X({});\n      initialState = !rxSetState ? initialState : initialState(rxSetState);\n      return [rxSetState, _objectSpread(_objectSpread({}, initialState), rxSetState && rxSetState.value || {})];\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    _useState2$ = _slicedToArray(_useState2[0], 2),\n    rxSetState = _useState2$[0],\n    iniState = _useState2$[1];\n  var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(reducerFn) ? reducerFn : reducer, iniState),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    state = _useReducer2[0],\n    setStateOrg = _useReducer2[1];\n  // ignores state update if component is unmounted\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n      return function () {\n        return setStateOrg.mounted && setStateOrg.apply(void 0, arguments);\n      };\n    }),\n    _useState4 = _slicedToArray(_useState3, 1),\n    setState = _useState4[0];\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    setStateOrg.mounted = true;\n    var subscription = rxSetState && rxSetState.subscribe(setState);\n    return function () {\n      setStateOrg.mounted = false;\n      (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(onUnmount) && onUnmount();\n      subscription && subscription.unsubscribe();\n    };\n  }, [setStateOrg, rxSetState]);\n  return [state, setState];\n};\n\n/** ToDo: deprecate along with iUserReducer\n * @name    reducer\n * @summary simple reducer to mimic Class component setState behavior\n *\n * @param   {Object}    state\n * @param   {Object}    newValue\n *\n * @returns {Object}\n */\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var newValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _objectSpread(_objectSpread({}, state), newValue);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (iUseReducer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy9pVXNlUmVkdWNlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSWM7QUFDd0I7QUFDSjs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1LLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFJQyxTQUFTLEVBQW1DO0VBQUEsSUFBakNDLFlBQVksR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBQUEsSUFBRUcsU0FBUyxHQUFBSCxTQUFBLENBQUFDLE1BQUEsT0FBQUQsU0FBQSxNQUFBRSxTQUFBO0VBQy9ELElBQUFFLFNBQUEsR0FBaUNWLCtDQUFRLENBQUMsWUFBTTtNQUM1QyxJQUFNVyxVQUFVLEdBQUdULDRDQUFJLENBQUNHLFlBQVksQ0FBQyxJQUFJLElBQUlKLDBEQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDaEVJLFlBQVksR0FBRyxDQUFDTSxVQUFVLEdBQ3BCTixZQUFZLEdBQ1pBLFlBQVksQ0FBQ00sVUFBVSxDQUFDO01BRTlCLE9BQU8sQ0FDSEEsVUFBVSxFQUFBQyxhQUFBLENBQUFBLGFBQUEsS0FFSFAsWUFBWSxHQUNaTSxVQUFVLElBQUlBLFVBQVUsQ0FBQ0UsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUU5QztJQUNMLENBQUMsQ0FBQztJQUFBQyxVQUFBLEdBQUFDLGNBQUEsQ0FBQUwsU0FBQTtJQUFBTSxXQUFBLEdBQUFELGNBQUEsQ0FBQUQsVUFBQTtJQWJNSCxVQUFVLEdBQUFLLFdBQUE7SUFBRUMsUUFBUSxHQUFBRCxXQUFBO0VBYzVCLElBQUFFLFdBQUEsR0FBNkJuQixpREFBVSxDQUNuQ0csNENBQUksQ0FBQ0UsU0FBUyxDQUFDLEdBQ1RBLFNBQVMsR0FDVGUsT0FBTyxFQUNiRixRQUNKLENBQUM7SUFBQUcsWUFBQSxHQUFBTCxjQUFBLENBQUFHLFdBQUE7SUFMTUcsS0FBSyxHQUFBRCxZQUFBO0lBQUVFLFdBQVcsR0FBQUYsWUFBQTtFQU16QjtFQUNBLElBQUFHLFVBQUEsR0FBbUJ2QiwrQ0FBUSxDQUFDO01BQUEsT0FDeEI7UUFBQSxPQUFhc0IsV0FBVyxDQUFDRSxPQUFPLElBQUlGLFdBQVcsQ0FBQUcsS0FBQSxTQUFBbkIsU0FBUSxDQUFDO01BQUE7SUFBQSxDQUM1RCxDQUFDO0lBQUFvQixVQUFBLEdBQUFYLGNBQUEsQ0FBQVEsVUFBQTtJQUZNSSxRQUFRLEdBQUFELFVBQUE7RUFJZjVCLGdEQUFTLENBQUMsWUFBTTtJQUNad0IsV0FBVyxDQUFDRSxPQUFPLEdBQUcsSUFBSTtJQUMxQixJQUFNSSxZQUFZLEdBQUdqQixVQUFVLElBQUlBLFVBQVUsQ0FBQ2tCLFNBQVMsQ0FBQ0YsUUFBUSxDQUFDO0lBRWpFLE9BQU8sWUFBTTtNQUNUTCxXQUFXLENBQUNFLE9BQU8sR0FBRyxLQUFLO01BQzNCdEIsNENBQUksQ0FBQ08sU0FBUyxDQUFDLElBQUlBLFNBQVMsQ0FBQyxDQUFDO01BQzlCbUIsWUFBWSxJQUFJQSxZQUFZLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7RUFDTCxDQUFDLEVBQUUsQ0FBQ1IsV0FBVyxFQUFFWCxVQUFVLENBQUMsQ0FBQztFQUU3QixPQUFPLENBQUNVLEtBQUssRUFBRU0sUUFBUSxDQUFDO0FBQzVCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTVIsT0FBTyxHQUFHLFNBQVZBLE9BQU9BLENBQUE7RUFBQSxJQUFJRSxLQUFLLEdBQUFmLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztFQUFBLElBQUV5QixRQUFRLEdBQUF6QixTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7RUFBQSxPQUFBTSxhQUFBLENBQUFBLGFBQUEsS0FBV1MsS0FBSyxHQUFLVSxRQUFRO0FBQUEsQ0FBRztBQUVqRixpRUFBZTVCLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvaG9va3MvaVVzZVJlZHVjZXIuanM/ZDliOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIHVzZUVmZmVjdCxcbiAgICB1c2VSZWR1Y2VyLFxuICAgIHVzZVN0YXRlLFxufSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBpc0ZuIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5cbi8qKiBUb0RvOiBkZXByZWNhdGUgKHVzZSBgdXNlUnhTdGF0ZWAgaW5zdGVhZClcbiAqIEBuYW1lICAgIGlVc2VSZWR1Y2VyXG4gKiBAc3VtbWFyeSBBIHN1Z2FyIGZvciBSZWFjdCBgdXNlclJlZHVjZXJgIHdpdGggYWRkZWQgYmVuZWZpdCBvZiB0cmFja2luZyBvZiBjb21wb25lbnQgbW91bnRlZCBzdGF0dXMuXG4gKiAgICAgICAgICBQcmV2ZW50cyBzdGF0ZSB1cGRhdGUgaWYgY29tcG9uZW50IGlzIG5vdCBtb3VudGVkLlxuICpcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gICAgICAgICAgcmVkdWNlckZuXG4gKiBAcGFyYW0gICB7T2JqZWN0fEZ1bmN0aW9ufSAgIGluaXRpYWxTdGF0ZSAgICBpZiBmdW5jdGlvbiwgYSBSeEpTIFN1YmplY3Qgd2lsbCBiZSBzdXBwbGllZCBhcyBhcmd1bWVudFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gc2V0U3RhdGVcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9ICAgICBbQHN0YXRlIHtPYmplY3R9LCBAc2V0U3RhdGUge0Z1bmN0aW9ufV1cbiAqL1xuZXhwb3J0IGNvbnN0IGlVc2VSZWR1Y2VyID0gKHJlZHVjZXJGbiwgaW5pdGlhbFN0YXRlID0ge30sIG9uVW5tb3VudCkgPT4ge1xuICAgIGNvbnN0IFtbcnhTZXRTdGF0ZSwgaW5pU3RhdGVdXSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICAgICAgY29uc3QgcnhTZXRTdGF0ZSA9IGlzRm4oaW5pdGlhbFN0YXRlKSAmJiBuZXcgQmVoYXZpb3JTdWJqZWN0KHt9KVxuICAgICAgICBpbml0aWFsU3RhdGUgPSAhcnhTZXRTdGF0ZVxuICAgICAgICAgICAgPyBpbml0aWFsU3RhdGVcbiAgICAgICAgICAgIDogaW5pdGlhbFN0YXRlKHJ4U2V0U3RhdGUpXG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHJ4U2V0U3RhdGUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxuICAgICAgICAgICAgICAgIC4uLnJ4U2V0U3RhdGUgJiYgcnhTZXRTdGF0ZS52YWx1ZSB8fCB7fSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pXG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZU9yZ10gPSB1c2VSZWR1Y2VyKFxuICAgICAgICBpc0ZuKHJlZHVjZXJGbilcbiAgICAgICAgICAgID8gcmVkdWNlckZuXG4gICAgICAgICAgICA6IHJlZHVjZXIsXG4gICAgICAgIGluaVN0YXRlLFxuICAgIClcbiAgICAvLyBpZ25vcmVzIHN0YXRlIHVwZGF0ZSBpZiBjb21wb25lbnQgaXMgdW5tb3VudGVkXG4gICAgY29uc3QgW3NldFN0YXRlXSA9IHVzZVN0YXRlKCgpID0+XG4gICAgICAgICguLi5hcmdzKSA9PiBzZXRTdGF0ZU9yZy5tb3VudGVkICYmIHNldFN0YXRlT3JnKC4uLmFyZ3MpXG4gICAgKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0U3RhdGVPcmcubW91bnRlZCA9IHRydWVcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gcnhTZXRTdGF0ZSAmJiByeFNldFN0YXRlLnN1YnNjcmliZShzZXRTdGF0ZSlcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2V0U3RhdGVPcmcubW91bnRlZCA9IGZhbHNlXG4gICAgICAgICAgICBpc0ZuKG9uVW5tb3VudCkgJiYgb25Vbm1vdW50KClcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiAmJiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxuICAgICAgICB9XG4gICAgfSwgW3NldFN0YXRlT3JnLCByeFNldFN0YXRlXSlcblxuICAgIHJldHVybiBbc3RhdGUsIHNldFN0YXRlXVxufVxuXG4vKiogVG9EbzogZGVwcmVjYXRlIGFsb25nIHdpdGggaVVzZXJSZWR1Y2VyXG4gKiBAbmFtZSAgICByZWR1Y2VyXG4gKiBAc3VtbWFyeSBzaW1wbGUgcmVkdWNlciB0byBtaW1pYyBDbGFzcyBjb21wb25lbnQgc2V0U3RhdGUgYmVoYXZpb3JcbiAqXG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBzdGF0ZVxuICogQHBhcmFtICAge09iamVjdH0gICAgbmV3VmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChzdGF0ZSA9IHt9LCBuZXdWYWx1ZSA9IHt9KSA9PiAoeyAuLi5zdGF0ZSwgLi4ubmV3VmFsdWUgfSlcblxuZXhwb3J0IGRlZmF1bHQgaVVzZVJlZHVjZXIiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVkdWNlciIsInVzZVN0YXRlIiwiQmVoYXZpb3JTdWJqZWN0IiwiaXNGbiIsImlVc2VSZWR1Y2VyIiwicmVkdWNlckZuIiwiaW5pdGlhbFN0YXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwib25Vbm1vdW50IiwiX3VzZVN0YXRlIiwicnhTZXRTdGF0ZSIsIl9vYmplY3RTcHJlYWQiLCJ2YWx1ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsIl91c2VTdGF0ZTIkIiwiaW5pU3RhdGUiLCJfdXNlUmVkdWNlciIsInJlZHVjZXIiLCJfdXNlUmVkdWNlcjIiLCJzdGF0ZSIsInNldFN0YXRlT3JnIiwiX3VzZVN0YXRlMyIsIm1vdW50ZWQiLCJhcHBseSIsIl91c2VTdGF0ZTQiLCJzZXRTdGF0ZSIsInN1YnNjcmlwdGlvbiIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwibmV3VmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/iUseReducer.js\n')},"./src/utils/reactjs/hooks/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "iUseReducer": () => (/* reexport safe */ _iUseReducer__WEBPACK_IMPORTED_MODULE_1__.iUseReducer),\n/* harmony export */   "reducer": () => (/* reexport safe */ _iUseReducer__WEBPACK_IMPORTED_MODULE_1__.reducer),\n/* harmony export */   "useCallbackDeferred": () => (/* reexport safe */ _useCallbackDeferred__WEBPACK_IMPORTED_MODULE_0__.useCallbackDeferred),\n/* harmony export */   "useInverted": () => (/* reexport safe */ _window__WEBPACK_IMPORTED_MODULE_2__.useInverted),\n/* harmony export */   "useIsMobile": () => (/* reexport safe */ _useIsMobile__WEBPACK_IMPORTED_MODULE_3__.useIsMobile),\n/* harmony export */   "useMount": () => (/* reexport safe */ _useMount__WEBPACK_IMPORTED_MODULE_4__.useMount),\n/* harmony export */   "useMutationObserver": () => (/* reexport safe */ _useMutationObserver__WEBPACK_IMPORTED_MODULE_5__.useMutationObserver),\n/* harmony export */   "usePromise": () => (/* reexport safe */ _usePromise__WEBPACK_IMPORTED_MODULE_6__.usePromise),\n/* harmony export */   "useQueryBlockchain": () => (/* reexport safe */ _useQueryBlockchain__WEBPACK_IMPORTED_MODULE_7__.useQueryBlockchain),\n/* harmony export */   "useResizeObserver": () => (/* reexport safe */ _useResizeObserver__WEBPACK_IMPORTED_MODULE_8__.useResizeObserver),\n/* harmony export */   "useRxState": () => (/* reexport safe */ _useRxState__WEBPACK_IMPORTED_MODULE_9__.useRxState),\n/* harmony export */   "useRxStateDeferred": () => (/* reexport safe */ _useRxStateDeferred__WEBPACK_IMPORTED_MODULE_13__.useRxStateDeferred),\n/* harmony export */   "useRxSubject": () => (/* reexport safe */ _useRxSubject__WEBPACK_IMPORTED_MODULE_10__.useRxSubject),\n/* harmony export */   "useRxSubjectOrValue": () => (/* reexport safe */ _useRxSubjectOrValue__WEBPACK_IMPORTED_MODULE_11__.useRxSubjectOrValue),\n/* harmony export */   "useRxSubjects": () => (/* reexport safe */ _useRxSubjects__WEBPACK_IMPORTED_MODULE_12__.useRxSubjects),\n/* harmony export */   "useUnmount": () => (/* reexport safe */ _useMount__WEBPACK_IMPORTED_MODULE_4__.useUnmount),\n/* harmony export */   "useUnsubscribe": () => (/* reexport safe */ _useMount__WEBPACK_IMPORTED_MODULE_4__.useUnsubscribe)\n/* harmony export */ });\n/* harmony import */ var _useCallbackDeferred__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/reactjs/hooks/useCallbackDeferred.js");\n/* harmony import */ var _iUseReducer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/hooks/iUseReducer.js");\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/window.js");\n/* harmony import */ var _useIsMobile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/hooks/useIsMobile.js");\n/* harmony import */ var _useMount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/reactjs/hooks/useMount.js");\n/* harmony import */ var _useMutationObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/hooks/useMutationObserver.js");\n/* harmony import */ var _usePromise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/reactjs/hooks/usePromise.js");\n/* harmony import */ var _useQueryBlockchain__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/reactjs/hooks/useQueryBlockchain.js");\n/* harmony import */ var _useResizeObserver__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/utils/reactjs/hooks/useResizeObserver.js");\n/* harmony import */ var _useRxState__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/utils/reactjs/hooks/useRxState.js");\n/* harmony import */ var _useRxSubject__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubject.js");\n/* harmony import */ var _useRxSubjectOrValue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubjectOrValue.js");\n/* harmony import */ var _useRxSubjects__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubjects.js");\n/* harmony import */ var _useRxStateDeferred__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/utils/reactjs/hooks/useRxStateDeferred.js");\n\n // ToDo: deprecate\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ1IsQ0FBQztBQUNZO0FBQ2I7QUFDSDtBQUNXO0FBQ1Q7QUFDUTtBQUNEO0FBQ1A7QUFDRTtBQUNPO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvaG9va3MvaW5kZXguanM/MGZjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL3VzZUNhbGxiYWNrRGVmZXJyZWQnXG5leHBvcnQgKiBmcm9tICcuL2lVc2VSZWR1Y2VyJyAvLyBUb0RvOiBkZXByZWNhdGVcbmV4cG9ydCB7IHVzZUludmVydGVkIH0gZnJvbSAnLi4vLi4vd2luZG93J1xuZXhwb3J0ICogZnJvbSAnLi91c2VJc01vYmlsZSdcbmV4cG9ydCAqIGZyb20gJy4vdXNlTW91bnQnXG5leHBvcnQgKiBmcm9tICcuL3VzZU11dGF0aW9uT2JzZXJ2ZXInXG5leHBvcnQgKiBmcm9tICcuL3VzZVByb21pc2UnXG5leHBvcnQgKiBmcm9tICcuL3VzZVF1ZXJ5QmxvY2tjaGFpbidcbmV4cG9ydCAqIGZyb20gJy4vdXNlUmVzaXplT2JzZXJ2ZXInXG5leHBvcnQgKiBmcm9tICcuL3VzZVJ4U3RhdGUnXG5leHBvcnQgKiBmcm9tICcuL3VzZVJ4U3ViamVjdCdcbmV4cG9ydCAqIGZyb20gJy4vdXNlUnhTdWJqZWN0T3JWYWx1ZSdcbmV4cG9ydCAqIGZyb20gJy4vdXNlUnhTdWJqZWN0cydcbmV4cG9ydCAqIGZyb20gJy4vdXNlUnhTdGF0ZURlZmVycmVkJyJdLCJuYW1lcyI6WyJ1c2VJbnZlcnRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/index.js\n')},"./src/utils/reactjs/hooks/useCallbackDeferred.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useCallbackDeferred": () => (/* binding */ useCallbackDeferred)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n\n\n\n/**\n * @name    useCallbackDeferred\n * @summary combines React `useCallback` hook and `deferred` together\n * \n * @param   {Function}  callback    \n * @param   {Number}    defer       (optional) Default: `50`\n * \n * @returns {Function}\n */\nvar useCallbackDeferred = function useCallbackDeferred(callback, defer) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((0,_utils__WEBPACK_IMPORTED_MODULE_1__.deferred)(callback, defer));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useCallbackDeferred);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VDYWxsYmFja0RlZmVycmVkLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1DO0FBQ0c7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1FLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBbUJBLENBQUlDLFFBQVEsRUFBRUMsS0FBSztFQUFBLE9BQUtKLGtEQUFXLENBQUNDLGdEQUFRLENBQUNFLFFBQVEsRUFBRUMsS0FBSyxDQUFDLENBQUM7QUFBQTtBQUM5RixpRUFBZUYsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2hvb2tzL3VzZUNhbGxiYWNrRGVmZXJyZWQuanM/ZDc3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgZGVmZXJyZWQgfSBmcm9tICcuLi8uLi91dGlscydcblxuLyoqXG4gKiBAbmFtZSAgICB1c2VDYWxsYmFja0RlZmVycmVkXG4gKiBAc3VtbWFyeSBjb21iaW5lcyBSZWFjdCBgdXNlQ2FsbGJhY2tgIGhvb2sgYW5kIGBkZWZlcnJlZGAgdG9nZXRoZXJcbiAqIFxuICogQHBhcmFtICAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgICAgXG4gKiBAcGFyYW0gICB7TnVtYmVyfSAgICBkZWZlciAgICAgICAob3B0aW9uYWwpIERlZmF1bHQ6IGA1MGBcbiAqIFxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgY29uc3QgdXNlQ2FsbGJhY2tEZWZlcnJlZCA9IChjYWxsYmFjaywgZGVmZXIpID0+IHVzZUNhbGxiYWNrKGRlZmVycmVkKGNhbGxiYWNrLCBkZWZlcikpXG5leHBvcnQgZGVmYXVsdCB1c2VDYWxsYmFja0RlZmVycmVkIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwiZGVmZXJyZWQiLCJ1c2VDYWxsYmFja0RlZmVycmVkIiwiY2FsbGJhY2siLCJkZWZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useCallbackDeferred.js\n')},"./src/utils/reactjs/hooks/useIsMobile.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useIsMobile": () => (/* binding */ useIsMobile)\n/* harmony export */ });\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/window.js");\n/* harmony import */ var _useRxSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubject.js");\n\n\nvar useIsMobile = function useIsMobile() {\n  return (0,_useRxSubject__WEBPACK_IMPORTED_MODULE_1__["default"])(_window__WEBPACK_IMPORTED_MODULE_0__.rxLayout, function (l) {\n    return l === _window__WEBPACK_IMPORTED_MODULE_0__.MOBILE;\n  })[0];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useIsMobile);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VJc01vYmlsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStDO0FBQ047QUFFbEMsSUFBTUcsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUE7RUFBQSxPQUFTRCx5REFBWSxDQUFDRCw2Q0FBUSxFQUFFLFVBQUFHLENBQUM7SUFBQSxPQUFJQSxDQUFDLEtBQUtKLDJDQUFNO0VBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQztBQUFBO0FBRTdFLGlFQUFlRyxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2hvb2tzL3VzZUlzTW9iaWxlLmpzPzlhMjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTU9CSUxFLCByeExheW91dCB9IGZyb20gJy4uLy4uL3dpbmRvdydcbmltcG9ydCB1c2VSeFN1YmplY3QgZnJvbSAnLi91c2VSeFN1YmplY3QnXG5cbmV4cG9ydCBjb25zdCB1c2VJc01vYmlsZSA9ICgpID0+IHVzZVJ4U3ViamVjdChyeExheW91dCwgbCA9PiBsID09PSBNT0JJTEUpWzBdXG5cbmV4cG9ydCBkZWZhdWx0IHVzZUlzTW9iaWxlIl0sIm5hbWVzIjpbIk1PQklMRSIsInJ4TGF5b3V0IiwidXNlUnhTdWJqZWN0IiwidXNlSXNNb2JpbGUiLCJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useIsMobile.js\n')},"./src/utils/reactjs/hooks/useMount.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useMount": () => (/* binding */ useMount),\n/* harmony export */   "useUnmount": () => (/* binding */ useUnmount),\n/* harmony export */   "useUnsubscribe": () => (/* binding */ useUnsubscribe)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _rx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/rx.js");\n\n\n\n\n/**\n * @name    useMount\n * @summary simple React hook to trigger callback when component mounts and/or unmounts\n * \n * @param {Function}         onMount   (optional) Callback to be triggered when component mounts.\n *                                     Args: `{ isMounted }`\n * @param {Function|Boolean} onUnmount (optional) Callback invoked when component unmounts.\n *                                     Alternatively, if `onUnmount === true`, `onMount` function will be #\n *                                     invoked when component is unmounted with.\n *                                     Args: same as `onMount`\n */\nvar useMount = function useMount(onMount, onUnmount) {\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var x = {\n      isMounted: true\n    };\n    onMount && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.fallbackIfFails)(onMount, [x]);\n    if (onMount && onUnmount === true) onUnmount = onMount;\n    return function () {\n      x.isMounted = false;\n      onUnmount && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.fallbackIfFails)(onUnmount, [x]);\n    };\n  }, []);\n};\n\n/**\n * @name    useUnmount\n * @summary sugar for `useMount` with only using the `onUnmount` callback\n * \n * @param   {Function} onUnmount \n*/\nvar useUnmount = function useUnmount(onUnmount) {\n  return useMount(null, onUnmount);\n};\n\n/**\n * @name    useUnsubscribe\n * @summary unsubscribe from subscriptions when unmounting a component.\n * \n * @param   {Array|Object|Function} subscriptions\n */\nvar useUnsubscribe = function useUnsubscribe(subscriptions) {\n  return useUnmount(function () {\n    return (0,_rx__WEBPACK_IMPORTED_MODULE_2__.unsubscribe)(subscriptions);\n  });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useMount);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VNb3VudC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFpQztBQUNZO0FBQ1A7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNRyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBSUMsT0FBTyxFQUFFQyxTQUFTLEVBQUs7RUFDNUNMLGdEQUFTLENBQUMsWUFBTTtJQUNaLElBQU1NLENBQUMsR0FBRztNQUFFQyxTQUFTLEVBQUU7SUFBSyxDQUFDO0lBQzdCSCxPQUFPLElBQUlILHVEQUFlLENBQUNHLE9BQU8sRUFBRSxDQUFDRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxJQUFJRixPQUFPLElBQUlDLFNBQVMsS0FBSyxJQUFJLEVBQUVBLFNBQVMsR0FBR0QsT0FBTztJQUV0RCxPQUFPLFlBQU07TUFDVEUsQ0FBQyxDQUFDQyxTQUFTLEdBQUcsS0FBSztNQUNuQkYsU0FBUyxJQUFJSix1REFBZSxDQUFDSSxTQUFTLEVBQUUsQ0FBQ0MsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztFQUNMLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDVixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1FLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFHSCxTQUFTO0VBQUEsT0FBSUYsUUFBUSxDQUFDLElBQUksRUFBRUUsU0FBUyxDQUFDO0FBQUE7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1JLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBR0MsYUFBYTtFQUFBLE9BQUlGLFVBQVUsQ0FBQztJQUFBLE9BQU1OLGdEQUFXLENBQUNRLGFBQWEsQ0FBQztFQUFBLEVBQUM7QUFBQTtBQUUzRixpRUFBZVAsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VNb3VudC5qcz8xZWFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgZmFsbGJhY2tJZkZhaWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5pbXBvcnQgeyB1bnN1YnNjcmliZSB9IGZyb20gJy4uLy4uL3J4J1xuXG4vKipcbiAqIEBuYW1lICAgIHVzZU1vdW50XG4gKiBAc3VtbWFyeSBzaW1wbGUgUmVhY3QgaG9vayB0byB0cmlnZ2VyIGNhbGxiYWNrIHdoZW4gY29tcG9uZW50IG1vdW50cyBhbmQvb3IgdW5tb3VudHNcbiAqIFxuICogQHBhcmFtIHtGdW5jdGlvbn0gICAgICAgICBvbk1vdW50ICAgKG9wdGlvbmFsKSBDYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiBjb21wb25lbnQgbW91bnRzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJnczogYHsgaXNNb3VudGVkIH1gXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IG9uVW5tb3VudCAob3B0aW9uYWwpIENhbGxiYWNrIGludm9rZWQgd2hlbiBjb21wb25lbnQgdW5tb3VudHMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbHRlcm5hdGl2ZWx5LCBpZiBgb25Vbm1vdW50ID09PSB0cnVlYCwgYG9uTW91bnRgIGZ1bmN0aW9uIHdpbGwgYmUgI1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlZCB3aGVuIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgd2l0aC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFyZ3M6IHNhbWUgYXMgYG9uTW91bnRgXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VNb3VudCA9IChvbk1vdW50LCBvblVubW91bnQpID0+IHtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCB4ID0geyBpc01vdW50ZWQ6IHRydWUgfVxuICAgICAgICBvbk1vdW50ICYmIGZhbGxiYWNrSWZGYWlscyhvbk1vdW50LCBbeF0pXG4gICAgICAgIGlmIChvbk1vdW50ICYmIG9uVW5tb3VudCA9PT0gdHJ1ZSkgb25Vbm1vdW50ID0gb25Nb3VudFxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB4LmlzTW91bnRlZCA9IGZhbHNlXG4gICAgICAgICAgICBvblVubW91bnQgJiYgZmFsbGJhY2tJZkZhaWxzKG9uVW5tb3VudCwgW3hdKVxuICAgICAgICB9XG4gICAgfSwgW10pXG59XG5cbi8qKlxuICogQG5hbWUgICAgdXNlVW5tb3VudFxuICogQHN1bW1hcnkgc3VnYXIgZm9yIGB1c2VNb3VudGAgd2l0aCBvbmx5IHVzaW5nIHRoZSBgb25Vbm1vdW50YCBjYWxsYmFja1xuICogXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259IG9uVW5tb3VudCBcbiovXG5leHBvcnQgY29uc3QgdXNlVW5tb3VudCA9IG9uVW5tb3VudCA9PiB1c2VNb3VudChudWxsLCBvblVubW91bnQpXG5cbi8qKlxuICogQG5hbWUgICAgdXNlVW5zdWJzY3JpYmVcbiAqIEBzdW1tYXJ5IHVuc3Vic2NyaWJlIGZyb20gc3Vic2NyaXB0aW9ucyB3aGVuIHVubW91bnRpbmcgYSBjb21wb25lbnQuXG4gKiBcbiAqIEBwYXJhbSAgIHtBcnJheXxPYmplY3R8RnVuY3Rpb259IHN1YnNjcmlwdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVVuc3Vic2NyaWJlID0gc3Vic2NyaXB0aW9ucyA9PiB1c2VVbm1vdW50KCgpID0+IHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbnMpKVxuXG5leHBvcnQgZGVmYXVsdCB1c2VNb3VudCJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJmYWxsYmFja0lmRmFpbHMiLCJ1bnN1YnNjcmliZSIsInVzZU1vdW50Iiwib25Nb3VudCIsIm9uVW5tb3VudCIsIngiLCJpc01vdW50ZWQiLCJ1c2VVbm1vdW50IiwidXNlVW5zdWJzY3JpYmUiLCJzdWJzY3JpcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useMount.js\n')},"./src/utils/reactjs/hooks/useMutationObserver.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useMutationObserver": () => (/* binding */ useMutationObserver)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _useMount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/hooks/useMount.js");\n\n\n\n/**\n * @name    useMutationObserver\n * @summary React hook for observing mutation in child components using `MutationObserver`\n * \n * @param   {*}         ref         React.Ref instance\n * @param   {Function}  callback\n * @param   {Object}    conf        (optional) MutationObserver config.\n *                                  Default: `{ childList: true }`\n * \n * @returns {*}   return the ref\n */\nvar useMutationObserver = function useMutationObserver(ref, callback, conf) {\n  var observer;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    var _conf;\n    observer = new MutationObserver(callback);\n    var el = ref === null || ref === void 0 ? void 0 : ref.current;\n    (_conf = conf) !== null && _conf !== void 0 ? _conf : conf = {\n      childList: true\n    };\n    el && conf && observer.observe(el, conf);\n  }, [ref, callback]);\n\n  // stop observing\n  (0,_useMount__WEBPACK_IMPORTED_MODULE_1__.useUnmount)(function () {\n    var _observer;\n    return (_observer = observer) === null || _observer === void 0 ? void 0 : _observer.disconnect();\n  });\n  return ref;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useMutationObserver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VNdXRhdGlvbk9ic2VydmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBQ1E7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNRSxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQW1CQSxDQUFJQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFLO0VBQ3hELElBQUlDLFFBQVE7RUFDWk4sOENBQU8sQ0FBQyxZQUFNO0lBQUEsSUFBQU8sS0FBQTtJQUNWRCxRQUFRLEdBQUcsSUFBSUUsZ0JBQWdCLENBQUNKLFFBQVEsQ0FBQztJQUN6QyxJQUFNSyxFQUFFLEdBQUdOLEdBQUcsYUFBSEEsR0FBRyx1QkFBSEEsR0FBRyxDQUFFTyxPQUFPO0lBQ3ZCLENBQUFILEtBQUEsR0FBQUYsSUFBSSxjQUFBRSxLQUFBLGNBQUFBLEtBQUEsR0FBSkYsSUFBSSxHQUFLO01BQUVNLFNBQVMsRUFBRTtJQUFLLENBQUM7SUFDNUJGLEVBQUUsSUFBSUosSUFBSSxJQUFJQyxRQUFRLENBQUNNLE9BQU8sQ0FBQ0gsRUFBRSxFQUFFSixJQUFJLENBQUM7RUFDNUMsQ0FBQyxFQUFFLENBQUNGLEdBQUcsRUFBRUMsUUFBUSxDQUFDLENBQUM7O0VBRW5CO0VBQ0FILHFEQUFVLENBQUM7SUFBQSxJQUFBWSxTQUFBO0lBQUEsUUFBQUEsU0FBQSxHQUFNUCxRQUFRLGNBQUFPLFNBQUEsdUJBQVJBLFNBQUEsQ0FBVUMsVUFBVSxDQUFDLENBQUM7RUFBQSxFQUFDO0VBRXhDLE9BQU9YLEdBQUc7QUFDZCxDQUFDO0FBQ0QsaUVBQWVELG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VNdXRhdGlvbk9ic2VydmVyLmpzPzZhNzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVW5tb3VudCB9IGZyb20gJy4vdXNlTW91bnQnXG5cbi8qKlxuICogQG5hbWUgICAgdXNlTXV0YXRpb25PYnNlcnZlclxuICogQHN1bW1hcnkgUmVhY3QgaG9vayBmb3Igb2JzZXJ2aW5nIG11dGF0aW9uIGluIGNoaWxkIGNvbXBvbmVudHMgdXNpbmcgYE11dGF0aW9uT2JzZXJ2ZXJgXG4gKiBcbiAqIEBwYXJhbSAgIHsqfSAgICAgICAgIHJlZiAgICAgICAgIFJlYWN0LlJlZiBpbnN0YW5jZVxuICogQHBhcmFtICAge0Z1bmN0aW9ufSAgY2FsbGJhY2tcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGNvbmYgICAgICAgIChvcHRpb25hbCkgTXV0YXRpb25PYnNlcnZlciBjb25maWcuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBgeyBjaGlsZExpc3Q6IHRydWUgfWBcbiAqIFxuICogQHJldHVybnMgeyp9ICAgcmV0dXJuIHRoZSByZWZcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZU11dGF0aW9uT2JzZXJ2ZXIgPSAocmVmLCBjYWxsYmFjaywgY29uZikgPT4ge1xuICAgIGxldCBvYnNlcnZlclxuICAgIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKVxuICAgICAgICBjb25zdCBlbCA9IHJlZj8uY3VycmVudFxuICAgICAgICBjb25mID8/PSB7IGNoaWxkTGlzdDogdHJ1ZSB9XG4gICAgICAgIGVsICYmIGNvbmYgJiYgb2JzZXJ2ZXIub2JzZXJ2ZShlbCwgY29uZilcbiAgICB9LCBbcmVmLCBjYWxsYmFja10pXG5cbiAgICAvLyBzdG9wIG9ic2VydmluZ1xuICAgIHVzZVVubW91bnQoKCkgPT4gb2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKSlcblxuICAgIHJldHVybiByZWZcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZU11dGF0aW9uT2JzZXJ2ZXIiXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVVubW91bnQiLCJ1c2VNdXRhdGlvbk9ic2VydmVyIiwicmVmIiwiY2FsbGJhY2siLCJjb25mIiwib2JzZXJ2ZXIiLCJfY29uZiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJlbCIsImN1cnJlbnQiLCJjaGlsZExpc3QiLCJvYnNlcnZlIiwiX29ic2VydmVyIiwiZGlzY29ubmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useMutationObserver.js\n')},"./src/utils/reactjs/hooks/usePromise.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "usePromise": () => (/* binding */ usePromise)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n/**\n * @name        usePromise\n * @summary     a custom React hook for use with a Promise\n * @description state update will occur only once when then @promise is either rejected or resolved.\n *\n *\n * @param   {Promise|Function}  promise\n * @param   {Function}          resultModifier\n * @param   {Function}          errorModifier\n *\n * @returns {Array} [\n *                      0. @result : anyting the promise resolves with\n *                      1. @error  : anything the promise rejects with\n *                  ]\n *\n * @example\n * ```javascript\n * const [result, error] = usePromise(Promise.resolve(1))\n * ```\n */\nvar usePromise = function usePromise(promise, resultModifier, errorModifier) {\n  promise = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return new _PromisE__WEBPACK_IMPORTED_MODULE_1__["default"]((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(promise) ? promise() : promise);\n  }, []);\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () {\n    var mounted = true;\n    var handler = function handler(key, modifier, setState) {\n      return function (value) {\n        if (!mounted) return;\n        var newState = {};\n        newState[key] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(modifier) ? modifier(value) : value;\n        setState(newState);\n      };\n    };\n    promise.then(handler(\'result\', resultModifier, setState)).catch(handler(\'error\', errorModifier, setState));\n    return function () {\n      return mounted = false;\n    };\n  }, [promise]); //[setState, promise]\n\n  return [state.result, state.error];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (usePromise);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VQcm9taXNlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUF5QztBQUNOO0FBQ0Q7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNSSxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBSUMsT0FBTyxFQUFFQyxjQUFjLEVBQUVDLGFBQWEsRUFBSztFQUNsRUYsT0FBTyxHQUFHTCw4Q0FBTyxDQUNiO0lBQUEsT0FBTSxJQUFJRSxnREFBTyxDQUFDQyw0Q0FBSSxDQUFDRSxPQUFPLENBQUMsR0FDekJBLE9BQU8sQ0FBQyxDQUFDLEdBQ1RBLE9BQU8sQ0FBQztFQUFBLEdBQ2QsRUFDSixDQUFDO0VBQ0QsSUFBQUcsU0FBQSxHQUEwQlAsK0NBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUFBUSxVQUFBLEdBQUFDLGNBQUEsQ0FBQUYsU0FBQTtJQUEvQkcsS0FBSyxHQUFBRixVQUFBO0lBQUVHLFFBQVEsR0FBQUgsVUFBQTtFQUV0QlIsK0NBQVEsQ0FBQyxZQUFNO0lBQ1gsSUFBSVksT0FBTyxHQUFHLElBQUk7SUFDbEIsSUFBTUMsT0FBTyxHQUFHLFNBQVZBLE9BQU9BLENBQUlDLEdBQUcsRUFBRUMsUUFBUSxFQUFFSixRQUFRO01BQUEsT0FBSyxVQUFBSyxLQUFLLEVBQUk7UUFDbEQsSUFBSSxDQUFDSixPQUFPLEVBQUU7UUFDZCxJQUFNSyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ25CQSxRQUFRLENBQUNILEdBQUcsQ0FBQyxHQUFHWiw0Q0FBSSxDQUFDYSxRQUFRLENBQUMsR0FDeEJBLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDLEdBQ2ZBLEtBQUs7UUFDWEwsUUFBUSxDQUFDTSxRQUFRLENBQUM7TUFDdEIsQ0FBQztJQUFBO0lBRURiLE9BQU8sQ0FBQ2MsSUFBSSxDQUFDTCxPQUFPLENBQUMsUUFBUSxFQUFFUixjQUFjLEVBQUVNLFFBQVEsQ0FBQyxDQUFDLENBQ3BEUSxLQUFLLENBQUNOLE9BQU8sQ0FBQyxPQUFPLEVBQUVQLGFBQWEsRUFBRUssUUFBUSxDQUFDLENBQUM7SUFDckQsT0FBTztNQUFBLE9BQU1DLE9BQU8sR0FBRyxLQUFLO0lBQUE7RUFDaEMsQ0FBQyxFQUFFLENBQUNSLE9BQU8sQ0FBQyxDQUFDOztFQUViLE9BQU8sQ0FBQ00sS0FBSyxDQUFDVSxNQUFNLEVBQUVWLEtBQUssQ0FBQ1csS0FBSyxDQUFDO0FBQ3RDLENBQUM7QUFDRCxpRUFBZWxCLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvaG9va3MvdXNlUHJvbWlzZS5qcz8xZmRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvbWlzRSBmcm9tICcuLi8uLi9Qcm9taXNFJ1xuaW1wb3J0IHsgaXNGbiB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuXG4vKipcbiAqIEBuYW1lICAgICAgICB1c2VQcm9taXNlXG4gKiBAc3VtbWFyeSAgICAgYSBjdXN0b20gUmVhY3QgaG9vayBmb3IgdXNlIHdpdGggYSBQcm9taXNlXG4gKiBAZGVzY3JpcHRpb24gc3RhdGUgdXBkYXRlIHdpbGwgb2NjdXIgb25seSBvbmNlIHdoZW4gdGhlbiBAcHJvbWlzZSBpcyBlaXRoZXIgcmVqZWN0ZWQgb3IgcmVzb2x2ZWQuXG4gKlxuICpcbiAqIEBwYXJhbSAgIHtQcm9taXNlfEZ1bmN0aW9ufSAgcHJvbWlzZVxuICogQHBhcmFtICAge0Z1bmN0aW9ufSAgICAgICAgICByZXN1bHRNb2RpZmllclxuICogQHBhcmFtICAge0Z1bmN0aW9ufSAgICAgICAgICBlcnJvck1vZGlmaWVyXG4gKlxuICogQHJldHVybnMge0FycmF5fSBbXG4gKiAgICAgICAgICAgICAgICAgICAgICAwLiBAcmVzdWx0IDogYW55dGluZyB0aGUgcHJvbWlzZSByZXNvbHZlcyB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICAgICAxLiBAZXJyb3IgIDogYW55dGhpbmcgdGhlIHByb21pc2UgcmVqZWN0cyB3aXRoXG4gKiAgICAgICAgICAgICAgICAgIF1cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgW3Jlc3VsdCwgZXJyb3JdID0gdXNlUHJvbWlzZShQcm9taXNlLnJlc29sdmUoMSkpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVByb21pc2UgPSAocHJvbWlzZSwgcmVzdWx0TW9kaWZpZXIsIGVycm9yTW9kaWZpZXIpID0+IHtcbiAgICBwcm9taXNlID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT4gbmV3IFByb21pc0UoaXNGbihwcm9taXNlKVxuICAgICAgICAgICAgPyBwcm9taXNlKClcbiAgICAgICAgICAgIDogcHJvbWlzZSksXG4gICAgICAgIFtdLFxuICAgIClcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHt9KVxuXG4gICAgdXNlU3RhdGUoKCkgPT4ge1xuICAgICAgICBsZXQgbW91bnRlZCA9IHRydWVcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IChrZXksIG1vZGlmaWVyLCBzZXRTdGF0ZSkgPT4gdmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb3VudGVkKSByZXR1cm5cbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0ge31cbiAgICAgICAgICAgIG5ld1N0YXRlW2tleV0gPSBpc0ZuKG1vZGlmaWVyKVxuICAgICAgICAgICAgICAgID8gbW9kaWZpZXIodmFsdWUpXG4gICAgICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgc2V0U3RhdGUobmV3U3RhdGUpXG4gICAgICAgIH1cblxuICAgICAgICBwcm9taXNlLnRoZW4oaGFuZGxlcigncmVzdWx0JywgcmVzdWx0TW9kaWZpZXIsIHNldFN0YXRlKSlcbiAgICAgICAgICAgIC5jYXRjaChoYW5kbGVyKCdlcnJvcicsIGVycm9yTW9kaWZpZXIsIHNldFN0YXRlKSlcbiAgICAgICAgcmV0dXJuICgpID0+IG1vdW50ZWQgPSBmYWxzZVxuICAgIH0sIFtwcm9taXNlXSkvL1tzZXRTdGF0ZSwgcHJvbWlzZV1cblxuICAgIHJldHVybiBbc3RhdGUucmVzdWx0LCBzdGF0ZS5lcnJvcl1cbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVByb21pc2UiXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVN0YXRlIiwiUHJvbWlzRSIsImlzRm4iLCJ1c2VQcm9taXNlIiwicHJvbWlzZSIsInJlc3VsdE1vZGlmaWVyIiwiZXJyb3JNb2RpZmllciIsIl91c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsInN0YXRlIiwic2V0U3RhdGUiLCJtb3VudGVkIiwiaGFuZGxlciIsImtleSIsIm1vZGlmaWVyIiwidmFsdWUiLCJuZXdTdGF0ZSIsInRoZW4iLCJjYXRjaCIsInJlc3VsdCIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/usePromise.js\n')},"./src/utils/reactjs/hooks/useQueryBlockchain.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useQueryBlockchain": () => (/* binding */ useQueryBlockchain)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _polkadotHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/polkadotHelper.js");\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _useRxStateDeferred__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/hooks/useRxStateDeferred.js");\n/* harmony import */ var _useRxSubjectOrValue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubjectOrValue.js");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _useRxState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/utils/reactjs/hooks/useRxState.js");\n/* harmony import */ var _useRxSubject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubject.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\nvar textsCap = {\n  loading: \'loading...\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_1__.translated)(textsCap, true);\n\n/**\n * @name    useQueryBlockchain\n * @summary a React Hook to query (and optionally subscribe) blockchain storage.\n * CAUTION: make sure to store query (`q`) object in a state to prevent infinite loop\n *\n * @param {Object}                q\n * @param {BehaviorSubject|Array} q.args     (optional) If last item is a function, `q.subscribe` will be set to `true`.\n * @param {Object|Promise}        q.connection  not requried if `useQueryBlockchain.defaultConnection` is already set.\n * @param {BehaviorSubject|String|Function} q.func blockchain query function. Eg: \'api.query.blances.freeBalance\'\n * @param {String}                q.loadingText\n * @param {BehaviorSubject|Boolean} q.multi     (optional)\n * @param {Boolean}               q.print       (optional)\n * @param {Boolean}               q.subjectOnly (optional) if true, will return `rxState` instaed of the `state` object\n * @param {Boolean}               q.subscribe   (optional)\n *                                              Defualt: `true`                                          \n * @param {Function}              q.valueModifier (optional) callback to modify the query result\n *\n * @returns {Object} { message, result, unsubscribe }\n * \n * @example `javascript\n * // make sure to use `useMemo` to prevent making redundant queries\n * const query = useMemo(() => ({\n *     args: [],\n *     connection: getConnection(),\n *     func: \'api.rpc.chain.subscribeFinalizedHeads\',\n *     multi: false,\n *     subscribe: true\n *     valueModifier: result => result,\n * }), [])\n * const result = useQueryBlockchain(query)\n * `\n */\nvar useQueryBlockchain = function useQueryBlockchain(_ref) {\n  var args = _ref.args,\n    _ref$connection = _ref.connection,\n    connection = _ref$connection === void 0 ? useQueryBlockchain.defaultConnection : _ref$connection,\n    func = _ref.func,\n    _ref$loadingText = _ref.loadingText,\n    loadingText = _ref$loadingText === void 0 ? textsCap.loading : _ref$loadingText,\n    multi = _ref.multi,\n    onError = _ref.onError,\n    print = _ref.print,\n    subject = _ref.subject,\n    _ref$subjectOnly = _ref.subjectOnly,\n    subjectOnly = _ref$subjectOnly === void 0 ? false : _ref$subjectOnly,\n    _ref$subscribe = _ref.subscribe,\n    subscribe = _ref$subscribe === void 0 ? true : _ref$subscribe,\n    valueModifier = _ref.valueModifier;\n  args = (0,_useRxSubjectOrValue__WEBPACK_IMPORTED_MODULE_6__["default"])(args);\n  func = (0,_useRxSubjectOrValue__WEBPACK_IMPORTED_MODULE_6__["default"])(func);\n  multi = (0,_useRxSubjectOrValue__WEBPACK_IMPORTED_MODULE_6__["default"])(multi);\n  var rxQuery = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return subject || new rxjs__WEBPACK_IMPORTED_MODULE_9__/* .BehaviorSubject */ .X({\n      message: !func || loadingText === null || !connection ? null : {\n        content: loadingText,\n        icon: true,\n        status: \'loading\'\n      }\n    });\n  }, [subject]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var _rxQuery$value;\n    if (!func || !connection) return function () {};\n    var mounted = true;\n    var unsubscribed = false;\n    var unsubscribe;\n    var queryArgs = _toConsumableArray(args || []);\n    var callback = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(queryArgs.slice(-1)[0]) && queryArgs.splice(-1);\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(callback)) subscribe = true;\n    var handleConnection = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n        var api, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              api = _ref2.api;\n              if (!(unsubscribed || !mounted)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt("return");\n            case 3:\n              _context.next = 5;\n              return (0,_polkadotHelper__WEBPACK_IMPORTED_MODULE_2__.query)(api, func, queryArgs, multi, print);\n            case 5:\n              result = _context.sent;\n              if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(result)) {\n                _context.next = 8;\n                break;\n              }\n              return _context.abrupt("return", handleResult(result));\n            case 8:\n              // subscription\n              unsubscribe = result;\n            case 9:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function handleConnection(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var handleError = function handleError(err) {\n      if (unsubscribed || !mounted) return;\n      rxQuery.next({\n        message: err && {\n          content: "".concat(err),\n          icon: true,\n          status: \'error\'\n        }\n      });\n      (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(onError) && onError(err);\n    };\n    var handleResult = function handleResult(resultSanitised, resultOriginal) {\n      if (unsubscribed || !mounted) return;\n      var result = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(valueModifier) ? valueModifier(resultSanitised, resultOriginal) : resultSanitised;\n      rxQuery.next({\n        message: null,\n        result: result,\n        unsubscribe: handleUnsubscribe\n      });\n      (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(callback) && callback(resultSanitised, resultOriginal);\n    };\n    var handleUnsubscribe = function handleUnsubscribe() {\n      if (!(0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(unsubscribe) || unsubscribed) return;\n      unsubscribed = true;\n      unsubscribe();\n    };\n    if (subscribe) queryArgs.push(handleResult);\n    loadingText !== null && !!((_rxQuery$value = rxQuery.value) !== null && _rxQuery$value !== void 0 && _rxQuery$value.message) && rxQuery.next({\n      message: {\n        content: loadingText,\n        icon: true,\n        status: \'loading\'\n      }\n    });\n    (0,_PromisE__WEBPACK_IMPORTED_MODULE_3__["default"])(connection).then(handleConnection).catch(handleError);\n    return function () {\n      mounted = false;\n      subscribe && handleUnsubscribe();\n    };\n  }, [func, args, multi]);\n  if (subjectOnly) return rxQuery;\n  return (0,_useRxSubject__WEBPACK_IMPORTED_MODULE_8__["default"])(rxQuery)[0]; //{ message, result, unsubscribe } \n};\n\nuseQueryBlockchain.defaultConnection = null;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useQueryBlockchain);\n\n// WIP: needs testing\nuseQueryBlockchain.multi = function () {\n  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref4$connection = _ref4.connection,\n    connection = _ref4$connection === void 0 ? useQueryBlockchain.defaultConnection : _ref4$connection,\n    loadingText = _ref4.loadingText,\n    print = _ref4.print,\n    queries = _ref4.queries,\n    _ref4$subscribe = _ref4.subscribe,\n    subscribe = _ref4$subscribe === void 0 ? false : _ref4$subscribe,\n    valuesModifier = _ref4.valuesModifier;\n  console.log(\'mulit\', queries);\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_4__.isArr)(queries)) return [];\n  var values = queries.map(function (query) {\n    return useQueryBlockchain(_objectSpread({\n      connection: connection,\n      loadingText: loadingText,\n      print: print,\n      subscribe: subscribe\n    }, !(0,_utils__WEBPACK_IMPORTED_MODULE_4__.isObj)(query) ? {\n      func: query\n    } : query));\n  });\n  return !(0,_utils__WEBPACK_IMPORTED_MODULE_4__.isFn)(valuesModifier) ? values : valuesModifier(values, queries);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useQueryBlockchain.js\n')},"./src/utils/reactjs/hooks/useResizeObserver.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useResizeObserver": () => (/* binding */ useResizeObserver)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _useMount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/hooks/useMount.js");\n\n\nvar useResizeObserver = function useResizeObserver(ref, callback) {\n  var observer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return new ResizeObserver(callback);\n  }, [callback]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    try {\n      var el = ref === null || ref === void 0 ? void 0 : ref.current;\n      // start observing\n      el && observer.observe(el);\n    } catch (_) {}\n  }, [ref]);\n\n  // stop observing\n  (0,_useMount__WEBPACK_IMPORTED_MODULE_1__.useUnmount)(function () {\n    return observer.disconnect();\n  });\n  return ref;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useResizeObserver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VSZXNpemVPYnNlcnZlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErQjtBQUNRO0FBRWhDLElBQU1FLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUlDLEdBQUcsRUFBRUMsUUFBUSxFQUFLO0VBQ2hELElBQU1DLFFBQVEsR0FBR0wsOENBQU8sQ0FBQztJQUFBLE9BQU0sSUFBSU0sY0FBYyxDQUFDRixRQUFRLENBQUM7RUFBQSxHQUFFLENBQUNBLFFBQVEsQ0FBQyxDQUFDO0VBRXhFSiw4Q0FBTyxDQUFDLFlBQU07SUFDVixJQUFJO01BQ0EsSUFBTU8sRUFBRSxHQUFHSixHQUFHLGFBQUhBLEdBQUcsdUJBQUhBLEdBQUcsQ0FBRUssT0FBTztNQUN2QjtNQUNBRCxFQUFFLElBQUlGLFFBQVEsQ0FBQ0ksT0FBTyxDQUFDRixFQUFFLENBQUM7SUFDOUIsQ0FBQyxDQUFDLE9BQU9HLENBQUMsRUFBRSxDQUNaO0VBQ0osQ0FBQyxFQUFFLENBQUNQLEdBQUcsQ0FBQyxDQUFDOztFQUVUO0VBQ0FGLHFEQUFVLENBQUM7SUFBQSxPQUFNSSxRQUFRLENBQUNNLFVBQVUsQ0FBQyxDQUFDO0VBQUEsRUFBQztFQUV2QyxPQUFPUixHQUFHO0FBQ2QsQ0FBQztBQUNELGlFQUFlRCxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvaG9va3MvdXNlUmVzaXplT2JzZXJ2ZXIuanM/MWU5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VVbm1vdW50IH0gZnJvbSAnLi91c2VNb3VudCdcblxuZXhwb3J0IGNvbnN0IHVzZVJlc2l6ZU9ic2VydmVyID0gKHJlZiwgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBvYnNlcnZlciA9IHVzZU1lbW8oKCkgPT4gbmV3IFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSwgW2NhbGxiYWNrXSlcblxuICAgIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZWwgPSByZWY/LmN1cnJlbnRcbiAgICAgICAgICAgIC8vIHN0YXJ0IG9ic2VydmluZ1xuICAgICAgICAgICAgZWwgJiYgb2JzZXJ2ZXIub2JzZXJ2ZShlbClcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICB9XG4gICAgfSwgW3JlZl0pXG5cbiAgICAvLyBzdG9wIG9ic2VydmluZ1xuICAgIHVzZVVubW91bnQoKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpKVxuXG4gICAgcmV0dXJuIHJlZlxufVxuZXhwb3J0IGRlZmF1bHQgdXNlUmVzaXplT2JzZXJ2ZXIiXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVVubW91bnQiLCJ1c2VSZXNpemVPYnNlcnZlciIsInJlZiIsImNhbGxiYWNrIiwib2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImVsIiwiY3VycmVudCIsIm9ic2VydmUiLCJfIiwiZGlzY29ubmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useResizeObserver.js\n')},"./src/utils/reactjs/hooks/useRxState.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useRxState": () => (/* binding */ useRxState)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _useRxSubject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubject.js");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n/**\n * @name    useRxState\n * @summary React hook to maintain state utilizing RxJS\n * \n * @param   {Function|*}        initialState    (optional)\n *                                          Function arguments: rxState BehaviorSubject\n *                                          Default: `{}`\n * @param   {Object|Function}      conf             if function, it will be used as `valueModifier`\n * @param   {Function}             conf.allowMerge  (optional) whether to merge old and new values into an object.\n *                                                  If `valueModifier` is used, it needs to merge the first\n *                                                  argument with the returned value otherwise `allowMerge` won\'t work.\n *                                                  Default: `true` if initial state is an object.         \n * @param   {Function}             conf.onMount     (optional)\n * @param   {Function}             conf.onUnmount   (optional)\n * @param   {SubjectLike|Function} conf.subject     (optional)\n * @param   {Function}             conf.valueModifier (optional)\n * \n * @returns {[*, Function, BehaviorSubject, Function]} [state, setState, rxState, setStateDeferred]\n */\nvar useRxState = function useRxState() {\n  var _allowMerge;\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var debugTag = arguments.length > 2 ? arguments[2] : undefined;\n  var _conf$allowMerge = conf.allowMerge,\n    allowMerge = _conf$allowMerge === void 0 ? true : _conf$allowMerge,\n    _conf$allowSubjectUpd = conf.allowSubjectUpdate,\n    allowSubjectUpdate = _conf$allowSubjectUpd === void 0 ? true : _conf$allowSubjectUpd,\n    defer = conf.defer,\n    onUnmount = conf.onUnmount,\n    subject = conf.subject,\n    valueModifier = conf.valueModifier;\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(conf)) valueModifier = conf;\n  var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n      subject = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(subject) ? subject() : subject;\n      var rxState = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isSubjectLike)(subject) ? subject : new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X({});\n      initialState = !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(initialState) ? initialState : initialState(rxState);\n      rxState.next(initialState);\n      return [rxState, initialState];\n    }, []),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    rxState = _useMemo2[0],\n    iniState = _useMemo2[1];\n  (_allowMerge = allowMerge) !== null && _allowMerge !== void 0 ? _allowMerge : allowMerge = !!iniState && ! /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(iniState) && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(iniState);\n  var _useRxSubject = (0,_useRxSubject__WEBPACK_IMPORTED_MODULE_2__["default"])(rxState, valueModifier, iniState, allowMerge, allowSubjectUpdate, defer, onUnmount),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 4),\n    state = _useRxSubject2[0],\n    setState = _useRxSubject2[1],\n    _ = _useRxSubject2[2],\n    setStateDeferred = _useRxSubject2[3];\n  debugTag && console.log(debugTag, state);\n  return [state, setState, rxState, setStateDeferred];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRxState);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VSeFN0YXRlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0M7QUFDSTtBQUsvQjtBQUNxQjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNUSxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUlsQjtFQUFBLElBQUFDLFdBQUE7RUFBQSxJQUhEQyxZQUFZLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztFQUFBLElBQ2pCRyxJQUFJLEdBQUFILFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUMsQ0FBQztFQUFBLElBQ1RJLFFBQVEsR0FBQUosU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtFQUVSLElBQUFHLGdCQUFBLEdBT0lGLElBQUksQ0FOSkcsVUFBVTtJQUFWQSxVQUFVLEdBQUFELGdCQUFBLGNBQUcsSUFBSSxHQUFBQSxnQkFBQTtJQUFBRSxxQkFBQSxHQU1qQkosSUFBSSxDQUxKSyxrQkFBa0I7SUFBbEJBLGtCQUFrQixHQUFBRCxxQkFBQSxjQUFHLElBQUksR0FBQUEscUJBQUE7SUFDekJFLEtBQUssR0FJTE4sSUFBSSxDQUpKTSxLQUFLO0lBQ0xDLFNBQVMsR0FHVFAsSUFBSSxDQUhKTyxTQUFTO0lBQ1RDLE9BQU8sR0FFUFIsSUFBSSxDQUZKUSxPQUFPO0lBQ1BDLGFBQWEsR0FDYlQsSUFBSSxDQURKUyxhQUFhO0VBRWpCLElBQUluQiw0Q0FBSSxDQUFDVSxJQUFJLENBQUMsRUFBRVMsYUFBYSxHQUFHVCxJQUFJO0VBQ3BDLElBQUFVLFFBQUEsR0FBNEJ2Qiw4Q0FBTyxDQUFDLFlBQU07TUFDdENxQixPQUFPLEdBQUdsQiw0Q0FBSSxDQUFDa0IsT0FBTyxDQUFDLEdBQ2pCQSxPQUFPLENBQUMsQ0FBQyxHQUNUQSxPQUFPO01BQ2IsSUFBTUcsT0FBTyxHQUFHbkIscURBQWEsQ0FBQ2dCLE9BQU8sQ0FBQyxHQUNoQ0EsT0FBTyxHQUNQLElBQUlwQiwwREFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzdCUSxZQUFZLEdBQUcsQ0FBQ04sNENBQUksQ0FBQ00sWUFBWSxDQUFDLEdBQzVCQSxZQUFZLEdBQ1pBLFlBQVksQ0FBQ2UsT0FBTyxDQUFDO01BQzNCQSxPQUFPLENBQUNDLElBQUksQ0FBQ2hCLFlBQVksQ0FBQztNQUMxQixPQUFPLENBQ0hlLE9BQU8sRUFDUGYsWUFBWSxDQUNmO0lBQ0wsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUFBaUIsU0FBQSxHQUFBQyxjQUFBLENBQUFKLFFBQUE7SUFmQ0MsT0FBTyxHQUFBRSxTQUFBO0lBQUVFLFFBQVEsR0FBQUYsU0FBQTtFQWdCeEIsQ0FBQWxCLFdBQUEsR0FBQVEsVUFBVSxjQUFBUixXQUFBLGNBQUFBLFdBQUEsR0FBVlEsVUFBVSxHQUFLLENBQUMsQ0FBQ1ksUUFBUSxJQUNsQixlQUFDN0IscURBQWMsQ0FBQzZCLFFBQVEsQ0FBQyxJQUN6QnhCLDZDQUFLLENBQUN3QixRQUFRLENBQUM7RUFDdEIsSUFBQUMsYUFBQSxHQUErQ3ZCLHlEQUFZLENBQ3ZEa0IsT0FBTyxFQUNQRixhQUFhLEVBQ2JNLFFBQVEsRUFDUlosVUFBVSxFQUNWRSxrQkFBa0IsRUFDbEJDLEtBQUssRUFDTEMsU0FDSixDQUFDO0lBQUFVLGNBQUEsR0FBQUgsY0FBQSxDQUFBRSxhQUFBO0lBUk1FLEtBQUssR0FBQUQsY0FBQTtJQUFFRSxRQUFRLEdBQUFGLGNBQUE7SUFBRUcsQ0FBQyxHQUFBSCxjQUFBO0lBQUVJLGdCQUFnQixHQUFBSixjQUFBO0VBVTNDaEIsUUFBUSxJQUFJcUIsT0FBTyxDQUFDQyxHQUFHLENBQUN0QixRQUFRLEVBQUVpQixLQUFLLENBQUM7RUFFeEMsT0FBTyxDQUNIQSxLQUFLLEVBQ0xDLFFBQVEsRUFDUlIsT0FBTyxFQUNQVSxnQkFBZ0IsQ0FDbkI7QUFDTCxDQUFDO0FBQ0QsaUVBQWUzQixVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2hvb2tzL3VzZVJ4U3RhdGUuanM/NWRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1ZhbGlkRWxlbWVudCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0TGlrZSB9IGZyb20gJ3J4anMnXG5pbXBvcnQge1xuICAgIGlzRm4sXG4gICAgaXNPYmosXG4gICAgaXNTdWJqZWN0TGlrZVxufSBmcm9tICcuLi8uLi91dGlscydcbmltcG9ydCB1c2VSeFN1YmplY3QgZnJvbSAnLi91c2VSeFN1YmplY3QnXG5cbi8qKlxuICogQG5hbWUgICAgdXNlUnhTdGF0ZVxuICogQHN1bW1hcnkgUmVhY3QgaG9vayB0byBtYWludGFpbiBzdGF0ZSB1dGlsaXppbmcgUnhKU1xuICogXG4gKiBAcGFyYW0gICB7RnVuY3Rpb258Kn0gICAgICAgIGluaXRpYWxTdGF0ZSAgICAob3B0aW9uYWwpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uIGFyZ3VtZW50czogcnhTdGF0ZSBCZWhhdmlvclN1YmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogYHt9YFxuICogQHBhcmFtICAge09iamVjdHxGdW5jdGlvbn0gICAgICBjb25mICAgICAgICAgICAgIGlmIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIHVzZWQgYXMgYHZhbHVlTW9kaWZpZXJgXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgICAgICAgIGNvbmYuYWxsb3dNZXJnZSAgKG9wdGlvbmFsKSB3aGV0aGVyIHRvIG1lcmdlIG9sZCBhbmQgbmV3IHZhbHVlcyBpbnRvIGFuIG9iamVjdC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBgdmFsdWVNb2RpZmllcmAgaXMgdXNlZCwgaXQgbmVlZHMgdG8gbWVyZ2UgdGhlIGZpcnN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgd2l0aCB0aGUgcmV0dXJuZWQgdmFsdWUgb3RoZXJ3aXNlIGBhbGxvd01lcmdlYCB3b24ndCB3b3JrLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IGB0cnVlYCBpZiBpbml0aWFsIHN0YXRlIGlzIGFuIG9iamVjdC4gICAgICAgICBcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gICAgICAgICAgICAgY29uZi5vbk1vdW50ICAgICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgICAgICAgIGNvbmYub25Vbm1vdW50ICAgKG9wdGlvbmFsKVxuICogQHBhcmFtICAge1N1YmplY3RMaWtlfEZ1bmN0aW9ufSBjb25mLnN1YmplY3QgICAgIChvcHRpb25hbClcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gICAgICAgICAgICAgY29uZi52YWx1ZU1vZGlmaWVyIChvcHRpb25hbClcbiAqIFxuICogQHJldHVybnMge1sqLCBGdW5jdGlvbiwgQmVoYXZpb3JTdWJqZWN0LCBGdW5jdGlvbl19IFtzdGF0ZSwgc2V0U3RhdGUsIHJ4U3RhdGUsIHNldFN0YXRlRGVmZXJyZWRdXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSeFN0YXRlID0gKFxuICAgIGluaXRpYWxTdGF0ZSA9IHt9LFxuICAgIGNvbmYgPSB7fSxcbiAgICBkZWJ1Z1RhZ1xuKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgICAgYWxsb3dNZXJnZSA9IHRydWUsXG4gICAgICAgIGFsbG93U3ViamVjdFVwZGF0ZSA9IHRydWUsXG4gICAgICAgIGRlZmVyLFxuICAgICAgICBvblVubW91bnQsXG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIHZhbHVlTW9kaWZpZXIsXG4gICAgfSA9IGNvbmZcbiAgICBpZiAoaXNGbihjb25mKSkgdmFsdWVNb2RpZmllciA9IGNvbmZcbiAgICBjb25zdCBbcnhTdGF0ZSwgaW5pU3RhdGVdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHN1YmplY3QgPSBpc0ZuKHN1YmplY3QpXG4gICAgICAgICAgICA/IHN1YmplY3QoKVxuICAgICAgICAgICAgOiBzdWJqZWN0XG4gICAgICAgIGNvbnN0IHJ4U3RhdGUgPSBpc1N1YmplY3RMaWtlKHN1YmplY3QpXG4gICAgICAgICAgICA/IHN1YmplY3RcbiAgICAgICAgICAgIDogbmV3IEJlaGF2aW9yU3ViamVjdCh7fSlcbiAgICAgICAgaW5pdGlhbFN0YXRlID0gIWlzRm4oaW5pdGlhbFN0YXRlKVxuICAgICAgICAgICAgPyBpbml0aWFsU3RhdGVcbiAgICAgICAgICAgIDogaW5pdGlhbFN0YXRlKHJ4U3RhdGUpXG4gICAgICAgIHJ4U3RhdGUubmV4dChpbml0aWFsU3RhdGUpXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICByeFN0YXRlLFxuICAgICAgICAgICAgaW5pdGlhbFN0YXRlXG4gICAgICAgIF1cbiAgICB9LCBbXSlcbiAgICBhbGxvd01lcmdlID8/PSAhIWluaVN0YXRlXG4gICAgICAgICYmICFpc1ZhbGlkRWxlbWVudChpbmlTdGF0ZSlcbiAgICAgICAgJiYgaXNPYmooaW5pU3RhdGUpXG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZSwgXywgc2V0U3RhdGVEZWZlcnJlZF0gPSB1c2VSeFN1YmplY3QoXG4gICAgICAgIHJ4U3RhdGUsXG4gICAgICAgIHZhbHVlTW9kaWZpZXIsXG4gICAgICAgIGluaVN0YXRlLFxuICAgICAgICBhbGxvd01lcmdlLFxuICAgICAgICBhbGxvd1N1YmplY3RVcGRhdGUsXG4gICAgICAgIGRlZmVyLFxuICAgICAgICBvblVubW91bnQsXG4gICAgKVxuXG4gICAgZGVidWdUYWcgJiYgY29uc29sZS5sb2coZGVidWdUYWcsIHN0YXRlKVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHNldFN0YXRlLFxuICAgICAgICByeFN0YXRlLFxuICAgICAgICBzZXRTdGF0ZURlZmVycmVkXG4gICAgXVxufVxuZXhwb3J0IGRlZmF1bHQgdXNlUnhTdGF0ZSJdLCJuYW1lcyI6WyJpc1ZhbGlkRWxlbWVudCIsInVzZU1lbW8iLCJCZWhhdmlvclN1YmplY3QiLCJTdWJqZWN0TGlrZSIsImlzRm4iLCJpc09iaiIsImlzU3ViamVjdExpa2UiLCJ1c2VSeFN1YmplY3QiLCJ1c2VSeFN0YXRlIiwiX2FsbG93TWVyZ2UiLCJpbml0aWFsU3RhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjb25mIiwiZGVidWdUYWciLCJfY29uZiRhbGxvd01lcmdlIiwiYWxsb3dNZXJnZSIsIl9jb25mJGFsbG93U3ViamVjdFVwZCIsImFsbG93U3ViamVjdFVwZGF0ZSIsImRlZmVyIiwib25Vbm1vdW50Iiwic3ViamVjdCIsInZhbHVlTW9kaWZpZXIiLCJfdXNlTWVtbyIsInJ4U3RhdGUiLCJuZXh0IiwiX3VzZU1lbW8yIiwiX3NsaWNlZFRvQXJyYXkiLCJpbmlTdGF0ZSIsIl91c2VSeFN1YmplY3QiLCJfdXNlUnhTdWJqZWN0MiIsInN0YXRlIiwic2V0U3RhdGUiLCJfIiwic2V0U3RhdGVEZWZlcnJlZCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useRxState.js\n')},"./src/utils/reactjs/hooks/useRxStateDeferred.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useRxStateDeferred": () => (/* binding */ useRxStateDeferred)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _useRxState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/useRxState.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n/**\n * @name    useRxStateDeferred\n * @summary sugar for `useRxState` hook with delayed/deferred `setState` functionality by default\n *\n * @param   {*|Function}        initialState\n * @param   {Number}            defer               (optional) duration in milliseconds\n *                                                  Default: `100`\n * @param   {Object}            conf\n * @param   {Function}          conf.allowMerge     (optional) Default: `true` if initial state is an object.         \n * @param   {Function}          conf.onMount        (optional)\n * @param   {Function}          conf.onUnmount      (optional)\n * @param   {BehaviorSubject}   conf.subject        (optional)\n * @param   {Function}          conf.valueModifier  (optional)\n *\n * @returns {Array}      [state, setStateDeferred, setState, rxSate]\n */\nvar useRxStateDeferred = function useRxStateDeferred(initialState) {\n  var defer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var conf = arguments.length > 2 ? arguments[2] : undefined;\n  var _useRxState = (0,_useRxState__WEBPACK_IMPORTED_MODULE_2__["default"])(initialState, _objectSpread(_objectSpread({}, conf), {}, {\n      defer: defer\n    })),\n    _useRxState2 = _slicedToArray(_useRxState, 4),\n    state = _useRxState2[0],\n    setState = _useRxState2[1],\n    rxState = _useRxState2[2],\n    setStateDeferred = _useRxState2[3];\n  return [state, setStateDeferred, rxState, setState];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRxStateDeferred);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VSeFN0YXRlRGVmZXJyZWQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ087QUFDRDs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNRyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFJQyxZQUFZLEVBQXdCO0VBQUEsSUFBdEJDLEtBQUssR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsR0FBRztFQUFBLElBQUVHLElBQUksR0FBQUgsU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtFQUM5RCxJQUFBRSxXQUFBLEdBS0lSLHVEQUFVLENBQUNFLFlBQVksRUFBQU8sYUFBQSxDQUFBQSxhQUFBLEtBQU9GLElBQUk7TUFBRUosS0FBSyxFQUFMQTtJQUFLLEVBQUUsQ0FBQztJQUFBTyxZQUFBLEdBQUFDLGNBQUEsQ0FBQUgsV0FBQTtJQUo1Q0ksS0FBSyxHQUFBRixZQUFBO0lBQ0xHLFFBQVEsR0FBQUgsWUFBQTtJQUNSSSxPQUFPLEdBQUFKLFlBQUE7SUFDUEssZ0JBQWdCLEdBQUFMLFlBQUE7RUFHcEIsT0FBTyxDQUNIRSxLQUFLLEVBQ0xHLGdCQUFnQixFQUNoQkQsT0FBTyxFQUNQRCxRQUFRLENBQ1g7QUFDTCxDQUFDO0FBQ0QsaUVBQWVaLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VSeFN0YXRlRGVmZXJyZWQuanM/NzlhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBkZWZlcnJlZCB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuaW1wb3J0IHVzZVJ4U3RhdGUgZnJvbSAnLi91c2VSeFN0YXRlJ1xuXG4vKipcbiAqIEBuYW1lICAgIHVzZVJ4U3RhdGVEZWZlcnJlZFxuICogQHN1bW1hcnkgc3VnYXIgZm9yIGB1c2VSeFN0YXRlYCBob29rIHdpdGggZGVsYXllZC9kZWZlcnJlZCBgc2V0U3RhdGVgIGZ1bmN0aW9uYWxpdHkgYnkgZGVmYXVsdFxuICpcbiAqIEBwYXJhbSAgIHsqfEZ1bmN0aW9ufSAgICAgICAgaW5pdGlhbFN0YXRlXG4gKiBAcGFyYW0gICB7TnVtYmVyfSAgICAgICAgICAgIGRlZmVyICAgICAgICAgICAgICAgKG9wdGlvbmFsKSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBgMTAwYFxuICogQHBhcmFtICAge09iamVjdH0gICAgICAgICAgICBjb25mXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgICAgIGNvbmYuYWxsb3dNZXJnZSAgICAgKG9wdGlvbmFsKSBEZWZhdWx0OiBgdHJ1ZWAgaWYgaW5pdGlhbCBzdGF0ZSBpcyBhbiBvYmplY3QuICAgICAgICAgXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgICAgIGNvbmYub25Nb3VudCAgICAgICAgKG9wdGlvbmFsKVxuICogQHBhcmFtICAge0Z1bmN0aW9ufSAgICAgICAgICBjb25mLm9uVW5tb3VudCAgICAgIChvcHRpb25hbClcbiAqIEBwYXJhbSAgIHtCZWhhdmlvclN1YmplY3R9ICAgY29uZi5zdWJqZWN0ICAgICAgICAob3B0aW9uYWwpXG4gKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgICAgIGNvbmYudmFsdWVNb2RpZmllciAgKG9wdGlvbmFsKVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX0gICAgICBbc3RhdGUsIHNldFN0YXRlRGVmZXJyZWQsIHNldFN0YXRlLCByeFNhdGVdXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSeFN0YXRlRGVmZXJyZWQgPSAoaW5pdGlhbFN0YXRlLCBkZWZlciA9IDEwMCwgY29uZikgPT4ge1xuICAgIGNvbnN0IFtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHNldFN0YXRlLFxuICAgICAgICByeFN0YXRlLFxuICAgICAgICBzZXRTdGF0ZURlZmVycmVkLFxuICAgIF0gPSB1c2VSeFN0YXRlKGluaXRpYWxTdGF0ZSwgeyAuLi5jb25mLCBkZWZlciB9KVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHNldFN0YXRlRGVmZXJyZWQsXG4gICAgICAgIHJ4U3RhdGUsXG4gICAgICAgIHNldFN0YXRlLFxuICAgIF1cbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVJ4U3RhdGVEZWZlcnJlZFxuXG4iXSwibmFtZXMiOlsidXNlTWVtbyIsImRlZmVycmVkIiwidXNlUnhTdGF0ZSIsInVzZVJ4U3RhdGVEZWZlcnJlZCIsImluaXRpYWxTdGF0ZSIsImRlZmVyIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY29uZiIsIl91c2VSeFN0YXRlIiwiX29iamVjdFNwcmVhZCIsIl91c2VSeFN0YXRlMiIsIl9zbGljZWRUb0FycmF5Iiwic3RhdGUiLCJzZXRTdGF0ZSIsInJ4U3RhdGUiLCJzZXRTdGF0ZURlZmVycmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useRxStateDeferred.js\n')},"./src/utils/reactjs/hooks/useRxSubject.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useRxSubject": () => (/* binding */ useRxSubject)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _rx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/rx.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _useMount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/hooks/useMount.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n// returning this symbol in the valueModifier will skip the state update\n// export const IGNORE_UPDATE_SYMBOL = IUS\n\n/**\n * @name    useRxSubject\n * @summary custom React hook for use with RxJS subject and auto update when value changes\n *\n * @param   {SubjectLike} subject             (optional) RxJS subject to observe, collect & update value from.\n *                                            If a not "subject like", will created an instance of BehaviorSubject\n * @param   {Function}    valueModifier       (optional) callback to modify the value received on subject change.\n *                                            Args:\n *                                            - newValue\n *                                            - oldValue (or initial value when first invoked)\n *                                            - rxSubject\n *                                            - unsubscribe: unsubscribe from all future updates\n *                                            - oldValueUnmodified: previous value before using `valueModifier()`\n *                                            If function returns a promise, it will be awaited.\n *                                            If function is `async`, `initialValue` will be the first value returned.\n *                                            Whatever result is returned from this will be returned as the final value.\n *                                            as the value of this hook, with the exception of the following:\n *                                            - `IGNORE_UPDATE_SYMBOL`: skip the current update.\n * @param   {*}           initialValue        (optional) initial value if `subject.value` is undefined\n * @param   {Boolean}     allowMerge          (optional) whether to merge previous value with new value.\n *                                            Only applicable if value is an object\n *                                            Default: true (if first value is an object)\n * @param   {Boolean}     allowSubjectUpdate  (optional) whether to allow update of the subject or only state.\n *                                            CAUTION: if true and `@subject` is sourced from a DataStorage\n *                                            instance, it may override values in the LocalStorage values.\n *                                            Default: `false`\n * @param   {Number}      defer               (optional)\n *                                            Default: `100`\n *\n * @returns {[\n * *,\n * Function,\n * SubjectLike,\n * Fuction\n * ]}   [value, setValue, subject, setValueDeferred]\n */\nvar useRxSubject = function useRxSubject(subject, valueModifier, initialValue, allowMerge, allowSubjectUpdate) {\n  var defer = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 100;\n  var onUnmount = arguments.length > 6 ? arguments[6] : undefined;\n  var onError = arguments.length > 7 ? arguments[7] : undefined;\n  var debugTag = arguments.length > 8 ? arguments[8] : undefined;\n  var _valueModifier = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (newValue, value,\n  // previous value\n  subject, unsubscribe) {\n    var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var valueUnmodified // previous value before using `valueModifier()`\n    = arguments.length > 5 ? arguments[5] : undefined;\n    try {\n      if (!allowMerge && !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(valueModifier)) return newValue;\n      newValue = !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(valueModifier) ? newValue : valueModifier(newValue, value, subject, unsubscribe, valueUnmodified);\n      var isAPromise = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPromise)(newValue);\n      if (isAPromise && !wait) return value;\n      var merge = function merge(newValue) {\n        if (newValue === _rx_js__WEBPACK_IMPORTED_MODULE_1__.IGNORE_UPDATE_SYMBOL) return value;\n        newValue = allowMerge ? _objectSpread(_objectSpread({}, (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(value) && value), (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(newValue) && newValue) : newValue;\n        return newValue;\n      };\n      return isAPromise ? newValue.then(merge) : merge(newValue);\n    } catch (err) {\n      (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(onError) && onError(err);\n      return value;\n    }\n  });\n  var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n      var _allowMerge;\n      var isSub = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(subject);\n      var _subject = isSub ? allowSubjectUpdate ? subject : (0,_rx_js__WEBPACK_IMPORTED_MODULE_1__.copyRxSubject)(subject) : new rxjs__WEBPACK_IMPORTED_MODULE_4__/* .BehaviorSubject */ .X(initialValue !== undefined ? initialValue : subject);\n      var setValue = function setValue(newValue) {\n        return _subject.next(newValue);\n      };\n      var isBSub = _subject instanceof rxjs__WEBPACK_IMPORTED_MODULE_4__/* .BehaviorSubject */ .X;\n      var firstValue = _subject.value === undefined ? initialValue // subject doesn\'t have any value. Use initial value instead.\n      : _subject.value;\n      var shouldSubscribe = true;\n      var firstValueUnmodified = firstValue;\n      firstValue = _valueModifier(firstValue, initialValue, _subject, function () {\n        return shouldSubscribe = false;\n      }, false, _subject.value);\n      (_allowMerge = allowMerge) !== null && _allowMerge !== void 0 ? _allowMerge : allowMerge = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(firstValue);\n      if (allowMerge) {\n        // make sure value of the subject is always merged \n        var nextOrg = _subject.next.bind(_subject);\n        _subject.next = function (newValue) {\n          newValue = _objectSpread(_objectSpread({}, (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(_subject.value) && _subject.value), (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(newValue) && newValue);\n          nextOrg(newValue);\n        };\n      }\n      return [_subject, setValue, (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPositiveInteger)(defer) ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.deferred)(setValue, defer) : setValue, {\n        firstValue: firstValue,\n        firstValueUnmodified: firstValueUnmodified,\n        isBSub: isBSub,\n        shouldSubscribe: shouldSubscribe\n      }];\n    }, [subject]),\n    _useMemo2 = _slicedToArray(_useMemo, 4),\n    _subject = _useMemo2[0],\n    setValue = _useMemo2[1],\n    setValueDeferred = _useMemo2[2],\n    data = _useMemo2[3];\n  var firstValue = data.firstValue,\n    firstValueUnmodified = data.firstValueUnmodified,\n    isBSub = data.isBSub,\n    shouldSubscribe = data.shouldSubscribe;\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([firstValue, firstValueUnmodified]),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _slicedToArray(_useState2[0], 2),\n    value = _useState2$[0],\n    valueUnmodified // unmodified value\n    = _useState2$[1],\n    _setValue = _useState2[1];\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    var mounted = true;\n    var ignoreFirst = !isBSub;\n    var unsubscribe = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.deferred)(function () {\n      var _subscription$unsubsc;\n      return subscription === null || subscription === void 0 ? void 0 : (_subscription$unsubsc = subscription.unsubscribe) === null || _subscription$unsubsc === void 0 ? void 0 : _subscription$unsubsc.call(subscription);\n    }, 1);\n    var handleChange = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(newValue) {\n        var newValueUnmodified;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              newValueUnmodified = newValue;\n              if (mounted) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt("return");\n            case 3:\n              if (ignoreFirst) {\n                _context.next = 7;\n                break;\n              }\n              // BehaviorSubject subscription triggers a result immediately with the pre-existing value which is\n              // already captured above and unnecessary to be evaluated again (unless value has changed).\n              // Ignoring first result reduces one extra state update.\n              ignoreFirst = true;\n              if (!(valueUnmodified === newValueUnmodified)) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt("return");\n            case 7:\n              _context.next = 9;\n              return _valueModifier(newValue, value, _subject, unsubscribe, true, valueUnmodified);\n            case 9:\n              newValue = _context.sent;\n              if (!(!mounted || newValueUnmodified === valueUnmodified)) {\n                _context.next = 12;\n                break;\n              }\n              return _context.abrupt("return");\n            case 12:\n              _setValue([newValue, newValueUnmodified]);\n            case 13:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function handleChange(_x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var subscription = shouldSubscribe && _subject.subscribe(handleChange);\n    return function () {\n      mounted = false;\n      unsubscribe();\n    };\n  }, [_subject]);\n  (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(onUnmount) && (0,_useMount__WEBPACK_IMPORTED_MODULE_3__.useUnmount)(function () {\n    return onUnmount(_subject, subject);\n  });\n  return [value, setValue, _subject, setValueDeferred];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRxSubject);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useRxSubject.js\n')},"./src/utils/reactjs/hooks/useRxSubjectOrValue.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useRxSubjectOrValue": () => (/* binding */ useRxSubjectOrValue)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _useRxSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubject.js");\n\n\n\n/**\n * @name    useRxSubjectOrValue\n * @summary sugar for useRxSubject with condition to only use it if a subject is supplied.\n * If no subject is supplied, will return it immediately\n *\n * @param   {*} subject subject or value\n *\n * @returns {*}\n */\nvar useRxSubjectOrValue = function useRxSubjectOrValue(subject, valueModifier) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  return !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isSubjectLike)(subject) ? (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(valueModifier) ? valueModifier(subject) : subject : _useRxSubject__WEBPACK_IMPORTED_MODULE_1__["default"].apply(void 0, [subject, valueModifier].concat(args))[0];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRxSubjectOrValue);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VSeFN1YmplY3RPclZhbHVlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQ7QUFDUjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUcsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FDNUJDLE9BQU8sRUFDUEMsYUFBYTtFQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQ1ZDLElBQUksT0FBQUMsS0FBQSxDQUFBSixJQUFBLE9BQUFBLElBQUEsV0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtJQUFKRixJQUFJLENBQUFFLElBQUEsUUFBQUosU0FBQSxDQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUNOLENBQUNWLHFEQUFhLENBQUNHLE9BQU8sQ0FBQyxHQUNsQkosNENBQUksQ0FBQ0ssYUFBYSxDQUFDLEdBQ2ZBLGFBQWEsQ0FBQ0QsT0FBTyxDQUFDLEdBQ3RCQSxPQUFPLEdBQ1hGLDJEQUFZLFVBQ1ZFLE9BQU8sRUFDUEMsYUFBYSxFQUFBUSxNQUFBLENBQ1ZKLElBQUksQ0FDWCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQUE7QUFFWixpRUFBZU4sbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2hvb2tzL3VzZVJ4U3ViamVjdE9yVmFsdWUuanM/NmQyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0ZuLCBpc1N1YmplY3RMaWtlIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5pbXBvcnQgdXNlUnhTdWJqZWN0IGZyb20gJy4vdXNlUnhTdWJqZWN0J1xuXG4vKipcbiAqIEBuYW1lICAgIHVzZVJ4U3ViamVjdE9yVmFsdWVcbiAqIEBzdW1tYXJ5IHN1Z2FyIGZvciB1c2VSeFN1YmplY3Qgd2l0aCBjb25kaXRpb24gdG8gb25seSB1c2UgaXQgaWYgYSBzdWJqZWN0IGlzIHN1cHBsaWVkLlxuICogSWYgbm8gc3ViamVjdCBpcyBzdXBwbGllZCwgd2lsbCByZXR1cm4gaXQgaW1tZWRpYXRlbHlcbiAqXG4gKiBAcGFyYW0gICB7Kn0gc3ViamVjdCBzdWJqZWN0IG9yIHZhbHVlXG4gKlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSeFN1YmplY3RPclZhbHVlID0gKFxuICAgIHN1YmplY3QsXG4gICAgdmFsdWVNb2RpZmllcixcbiAgICAuLi5hcmdzXG4pID0+ICFpc1N1YmplY3RMaWtlKHN1YmplY3QpXG4gICAgICAgID8gaXNGbih2YWx1ZU1vZGlmaWVyKVxuICAgICAgICAgICAgPyB2YWx1ZU1vZGlmaWVyKHN1YmplY3QpXG4gICAgICAgICAgICA6IHN1YmplY3RcbiAgICAgICAgOiB1c2VSeFN1YmplY3QoXG4gICAgICAgICAgICBzdWJqZWN0LFxuICAgICAgICAgICAgdmFsdWVNb2RpZmllcixcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgKVswXVxuXG5leHBvcnQgZGVmYXVsdCB1c2VSeFN1YmplY3RPclZhbHVlIl0sIm5hbWVzIjpbImlzRm4iLCJpc1N1YmplY3RMaWtlIiwidXNlUnhTdWJqZWN0IiwidXNlUnhTdWJqZWN0T3JWYWx1ZSIsInN1YmplY3QiLCJ2YWx1ZU1vZGlmaWVyIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useRxSubjectOrValue.js\n')},"./src/utils/reactjs/hooks/useRxSubjects.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "useRxSubjects": () => (/* binding */ useRxSubjects)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _useRxSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/hooks/useRxSubject.js");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n/**\n * @name    useRxSubjects\n * @summary custom React hook to observe an array of RxJS subjects and auto-update wehenever any of the value changes\n *\n * @param   {Array}     subjects        RxJS subjects to observe\n * @param   {Function}  valuesModifier  (optional) callback to reduce/alter the subject values into a single value.\n *                                      This will not affect the original subject values.\n *                                      Args: \n *                                      - values    array\n *                                      - subjects  array\n * @param   {Array}     confs           (optional) configuration to be passed on to `useRxSubject` for each subject.\n *                                      Array of objects with one or more of the following properties:\n *                                      - allowMerge         bool\n *                                      - allowSubjectUpdate bool\n *                                      - initialValue       any\n *                                      - valueModifier      function\n * \n * @returns [values, RxJS subjects]\n * \n * @example\n * ```javascript\n * // Observe multiple RxJS subjects\n * const [values, subjects] = useRxSubjects([\n *     new BehaviorSubject(1),\n *     new BehaviorSubject(2),\n * ])\n * console.log(values) // [1,2]\n *\n * // Create new RxJS BehaviorSubjects from the values.\n * const [values, subjects] = useRxSubjects([1, 2])\n * console.log(values) // [1,2]\n * ```\n */\nvar useRxSubjects = function useRxSubjects(subjects, valuesModifier) {\n  var confs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var defer = arguments.length > 3 ? arguments[3] : undefined;\n  var debugTag = arguments.length > 4 ? arguments[4] : undefined;\n  subjects = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(subjects) ? [subjects] : subjects;\n  var results = subjects.map(function (subject, i) {\n    var _confs$i, _confs$i2, _confs$i3, _confs$i4, _confs$i$defer, _confs$i5, _confs$i6, _confs$i7, _confs$i8;\n    return (0,_useRxSubject__WEBPACK_IMPORTED_MODULE_1__["default"])(subject, (_confs$i = confs[i]) === null || _confs$i === void 0 ? void 0 : _confs$i.valueModifier, (_confs$i2 = confs[i]) === null || _confs$i2 === void 0 ? void 0 : _confs$i2.initialValue, (_confs$i3 = confs[i]) === null || _confs$i3 === void 0 ? void 0 : _confs$i3.allowMerge, (_confs$i4 = confs[i]) === null || _confs$i4 === void 0 ? void 0 : _confs$i4.allowSubjectUpdate, (_confs$i$defer = (_confs$i5 = confs[i]) === null || _confs$i5 === void 0 ? void 0 : _confs$i5.defer) !== null && _confs$i$defer !== void 0 ? _confs$i$defer : defer, (_confs$i6 = confs[i]) === null || _confs$i6 === void 0 ? void 0 : _confs$i6.onUnmount, (_confs$i7 = confs[i]) === null || _confs$i7 === void 0 ? void 0 : _confs$i7.onError, (_confs$i8 = confs[i]) === null || _confs$i8 === void 0 ? void 0 : _confs$i8.debugTag);\n  });\n  var values = results.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n      value = _ref2[0];\n    return value;\n  });\n  var _subjects = results.map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 3),\n      _v = _ref4[0],\n      _s = _ref4[1],\n      subject = _ref4[2];\n    return subject;\n  });\n  return [!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(valuesModifier) ? values : valuesModifier(values, subjects), _subjects];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRxSubjects);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9ob29rcy91c2VSeFN1YmplY3RzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFDQTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUcsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUN0QkMsUUFBUSxFQUNSQyxjQUFjLEVBSWI7RUFBQSxJQUhEQyxLQUFLLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLEVBQUU7RUFBQSxJQUNWRyxLQUFLLEdBQUFILFNBQUEsQ0FBQUMsTUFBQSxPQUFBRCxTQUFBLE1BQUFFLFNBQUE7RUFBQSxJQUNMRSxRQUFRLEdBQUFKLFNBQUEsQ0FBQUMsTUFBQSxPQUFBRCxTQUFBLE1BQUFFLFNBQUE7RUFFUkwsUUFBUSxHQUFHLENBQUNKLDZDQUFLLENBQUNJLFFBQVEsQ0FBQyxHQUNyQixDQUFDQSxRQUFRLENBQUMsR0FDVkEsUUFBUTtFQUNkLElBQU1RLE9BQU8sR0FBR1IsUUFBUSxDQUFDUyxHQUFHLENBQUMsVUFBQ0MsT0FBTyxFQUFFQyxDQUFDO0lBQUEsSUFBQUMsUUFBQSxFQUFBQyxTQUFBLEVBQUFDLFNBQUEsRUFBQUMsU0FBQSxFQUFBQyxjQUFBLEVBQUFDLFNBQUEsRUFBQUMsU0FBQSxFQUFBQyxTQUFBLEVBQUFDLFNBQUE7SUFBQSxPQUNwQ3RCLHlEQUFZLENBQ1JZLE9BQU8sR0FBQUUsUUFBQSxHQUNQVixLQUFLLENBQUNTLENBQUMsQ0FBQyxjQUFBQyxRQUFBLHVCQUFSQSxRQUFBLENBQVVTLGFBQWEsR0FBQVIsU0FBQSxHQUN2QlgsS0FBSyxDQUFDUyxDQUFDLENBQUMsY0FBQUUsU0FBQSx1QkFBUkEsU0FBQSxDQUFVUyxZQUFZLEdBQUFSLFNBQUEsR0FDdEJaLEtBQUssQ0FBQ1MsQ0FBQyxDQUFDLGNBQUFHLFNBQUEsdUJBQVJBLFNBQUEsQ0FBVVMsVUFBVSxHQUFBUixTQUFBLEdBQ3BCYixLQUFLLENBQUNTLENBQUMsQ0FBQyxjQUFBSSxTQUFBLHVCQUFSQSxTQUFBLENBQVVTLGtCQUFrQixHQUFBUixjQUFBLElBQUFDLFNBQUEsR0FDNUJmLEtBQUssQ0FBQ1MsQ0FBQyxDQUFDLGNBQUFNLFNBQUEsdUJBQVJBLFNBQUEsQ0FBVVgsS0FBSyxjQUFBVSxjQUFBLGNBQUFBLGNBQUEsR0FBSVYsS0FBSyxHQUFBWSxTQUFBLEdBQ3hCaEIsS0FBSyxDQUFDUyxDQUFDLENBQUMsY0FBQU8sU0FBQSx1QkFBUkEsU0FBQSxDQUFVTyxTQUFTLEdBQUFOLFNBQUEsR0FDbkJqQixLQUFLLENBQUNTLENBQUMsQ0FBQyxjQUFBUSxTQUFBLHVCQUFSQSxTQUFBLENBQVVPLE9BQU8sR0FBQU4sU0FBQSxHQUNqQmxCLEtBQUssQ0FBQ1MsQ0FBQyxDQUFDLGNBQUFTLFNBQUEsdUJBQVJBLFNBQUEsQ0FBVWIsUUFDZCxDQUFDO0VBQUEsQ0FDTCxDQUFDO0VBQ0QsSUFBTW9CLE1BQU0sR0FBR25CLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFVBQUFtQixJQUFBO0lBQUEsSUFBQUMsS0FBQSxHQUFBQyxjQUFBLENBQUFGLElBQUE7TUFBRUcsS0FBSyxHQUFBRixLQUFBO0lBQUEsT0FBTUUsS0FBSztFQUFBLEVBQUM7RUFDOUMsSUFBTUMsU0FBUyxHQUFHeEIsT0FBTyxDQUFDQyxHQUFHLENBQUMsVUFBQXdCLEtBQUE7SUFBQSxJQUFBQyxLQUFBLEdBQUFKLGNBQUEsQ0FBQUcsS0FBQTtNQUFFRSxFQUFFLEdBQUFELEtBQUE7TUFBRUUsRUFBRSxHQUFBRixLQUFBO01BQUV4QixPQUFPLEdBQUF3QixLQUFBO0lBQUEsT0FBTXhCLE9BQU87RUFBQSxFQUFDO0VBRTdELE9BQU8sQ0FDSCxDQUFDYiw0Q0FBSSxDQUFDSSxjQUFjLENBQUMsR0FDZjBCLE1BQU0sR0FDTjFCLGNBQWMsQ0FBQzBCLE1BQU0sRUFBRTNCLFFBQVEsQ0FBQyxFQUN0Q2dDLFNBQVMsQ0FDWjtBQUNMLENBQUM7QUFDRCxpRUFBZWpDLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3RlbS1tZWNjYW5vLXVpLy4vc3JjL3V0aWxzL3JlYWN0anMvaG9va3MvdXNlUnhTdWJqZWN0cy5qcz82N2IwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJyLCBpc0ZuIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5pbXBvcnQgdXNlUnhTdWJqZWN0IGZyb20gJy4vdXNlUnhTdWJqZWN0J1xuXG4vKipcbiAqIEBuYW1lICAgIHVzZVJ4U3ViamVjdHNcbiAqIEBzdW1tYXJ5IGN1c3RvbSBSZWFjdCBob29rIHRvIG9ic2VydmUgYW4gYXJyYXkgb2YgUnhKUyBzdWJqZWN0cyBhbmQgYXV0by11cGRhdGUgd2VoZW5ldmVyIGFueSBvZiB0aGUgdmFsdWUgY2hhbmdlc1xuICpcbiAqIEBwYXJhbSAgIHtBcnJheX0gICAgIHN1YmplY3RzICAgICAgICBSeEpTIHN1YmplY3RzIHRvIG9ic2VydmVcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gIHZhbHVlc01vZGlmaWVyICAob3B0aW9uYWwpIGNhbGxiYWNrIHRvIHJlZHVjZS9hbHRlciB0aGUgc3ViamVjdCB2YWx1ZXMgaW50byBhIHNpbmdsZSB2YWx1ZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIHdpbGwgbm90IGFmZmVjdCB0aGUgb3JpZ2luYWwgc3ViamVjdCB2YWx1ZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJnczogXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB2YWx1ZXMgICAgYXJyYXlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHN1YmplY3RzICBhcnJheVxuICogQHBhcmFtICAge0FycmF5fSAgICAgY29uZnMgICAgICAgICAgIChvcHRpb25hbCkgY29uZmlndXJhdGlvbiB0byBiZSBwYXNzZWQgb24gdG8gYHVzZVJ4U3ViamVjdGAgZm9yIGVhY2ggc3ViamVjdC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheSBvZiBvYmplY3RzIHdpdGggb25lIG9yIG1vcmUgb2YgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gYWxsb3dNZXJnZSAgICAgICAgIGJvb2xcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIGFsbG93U3ViamVjdFVwZGF0ZSBib29sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBpbml0aWFsVmFsdWUgICAgICAgYW55XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB2YWx1ZU1vZGlmaWVyICAgICAgZnVuY3Rpb25cbiAqIFxuICogQHJldHVybnMgW3ZhbHVlcywgUnhKUyBzdWJqZWN0c11cbiAqIFxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIE9ic2VydmUgbXVsdGlwbGUgUnhKUyBzdWJqZWN0c1xuICogY29uc3QgW3ZhbHVlcywgc3ViamVjdHNdID0gdXNlUnhTdWJqZWN0cyhbXG4gKiAgICAgbmV3IEJlaGF2aW9yU3ViamVjdCgxKSxcbiAqICAgICBuZXcgQmVoYXZpb3JTdWJqZWN0KDIpLFxuICogXSlcbiAqIGNvbnNvbGUubG9nKHZhbHVlcykgLy8gWzEsMl1cbiAqXG4gKiAvLyBDcmVhdGUgbmV3IFJ4SlMgQmVoYXZpb3JTdWJqZWN0cyBmcm9tIHRoZSB2YWx1ZXMuXG4gKiBjb25zdCBbdmFsdWVzLCBzdWJqZWN0c10gPSB1c2VSeFN1YmplY3RzKFsxLCAyXSlcbiAqIGNvbnNvbGUubG9nKHZhbHVlcykgLy8gWzEsMl1cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgdXNlUnhTdWJqZWN0cyA9IChcbiAgICBzdWJqZWN0cyxcbiAgICB2YWx1ZXNNb2RpZmllcixcbiAgICBjb25mcyA9IFtdLFxuICAgIGRlZmVyLFxuICAgIGRlYnVnVGFnXG4pID0+IHtcbiAgICBzdWJqZWN0cyA9ICFpc0FycihzdWJqZWN0cylcbiAgICAgICAgPyBbc3ViamVjdHNdXG4gICAgICAgIDogc3ViamVjdHNcbiAgICBjb25zdCByZXN1bHRzID0gc3ViamVjdHMubWFwKChzdWJqZWN0LCBpKSA9PlxuICAgICAgICB1c2VSeFN1YmplY3QoXG4gICAgICAgICAgICBzdWJqZWN0LFxuICAgICAgICAgICAgY29uZnNbaV0/LnZhbHVlTW9kaWZpZXIsXG4gICAgICAgICAgICBjb25mc1tpXT8uaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgY29uZnNbaV0/LmFsbG93TWVyZ2UsXG4gICAgICAgICAgICBjb25mc1tpXT8uYWxsb3dTdWJqZWN0VXBkYXRlLFxuICAgICAgICAgICAgY29uZnNbaV0/LmRlZmVyID8/IGRlZmVyLFxuICAgICAgICAgICAgY29uZnNbaV0/Lm9uVW5tb3VudCxcbiAgICAgICAgICAgIGNvbmZzW2ldPy5vbkVycm9yLFxuICAgICAgICAgICAgY29uZnNbaV0/LmRlYnVnVGFnXG4gICAgICAgIClcbiAgICApXG4gICAgY29uc3QgdmFsdWVzID0gcmVzdWx0cy5tYXAoKFt2YWx1ZV0pID0+IHZhbHVlKVxuICAgIGNvbnN0IF9zdWJqZWN0cyA9IHJlc3VsdHMubWFwKChbX3YsIF9zLCBzdWJqZWN0XSkgPT4gc3ViamVjdClcblxuICAgIHJldHVybiBbXG4gICAgICAgICFpc0ZuKHZhbHVlc01vZGlmaWVyKVxuICAgICAgICAgICAgPyB2YWx1ZXNcbiAgICAgICAgICAgIDogdmFsdWVzTW9kaWZpZXIodmFsdWVzLCBzdWJqZWN0cyksXG4gICAgICAgIF9zdWJqZWN0cyxcbiAgICBdXG59XG5leHBvcnQgZGVmYXVsdCB1c2VSeFN1YmplY3RzXG4iXSwibmFtZXMiOlsiaXNBcnIiLCJpc0ZuIiwidXNlUnhTdWJqZWN0IiwidXNlUnhTdWJqZWN0cyIsInN1YmplY3RzIiwidmFsdWVzTW9kaWZpZXIiLCJjb25mcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImRlZmVyIiwiZGVidWdUYWciLCJyZXN1bHRzIiwibWFwIiwic3ViamVjdCIsImkiLCJfY29uZnMkaSIsIl9jb25mcyRpMiIsIl9jb25mcyRpMyIsIl9jb25mcyRpNCIsIl9jb25mcyRpJGRlZmVyIiwiX2NvbmZzJGk1IiwiX2NvbmZzJGk2IiwiX2NvbmZzJGk3IiwiX2NvbmZzJGk4IiwidmFsdWVNb2RpZmllciIsImluaXRpYWxWYWx1ZSIsImFsbG93TWVyZ2UiLCJhbGxvd1N1YmplY3RVcGRhdGUiLCJvblVubW91bnQiLCJvbkVycm9yIiwidmFsdWVzIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJ2YWx1ZSIsIl9zdWJqZWN0cyIsIl9yZWYzIiwiX3JlZjQiLCJfdiIsIl9zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/hooks/useRxSubjects.js\n')},"./src/utils/reactjs/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Button": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.Button),\n/* harmony export */   "CharacterCount": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.CharacterCount),\n/* harmony export */   "FormBuilder": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.FormBuilder),\n/* harmony export */   "FormInput": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.FormInput),\n/* harmony export */   "Grid": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.Grid),\n/* harmony export */   "IGNORE_UPDATE_SYMBOL": () => (/* reexport safe */ _rx_js__WEBPACK_IMPORTED_MODULE_4__.IGNORE_UPDATE_SYMBOL),\n/* harmony export */   "Memo": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.Memo),\n/* harmony export */   "Message": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.Message),\n/* harmony export */   "ModalBasic": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ModalBasic),\n/* harmony export */   "ModalBuilder": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ModalBuilder),\n/* harmony export */   "ModalService": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ModalService),\n/* harmony export */   "ModalTitle": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ModalTitle),\n/* harmony export */   "ModalsContainer": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ModalsContainer),\n/* harmony export */   "QueueItemStatus": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.QueueItemStatus),\n/* harmony export */   "RecursiveShapeType": () => (/* reexport safe */ _RecursiveShapeType__WEBPACK_IMPORTED_MODULE_3__.RecursiveShapeType),\n/* harmony export */   "RxSubjectView": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.RxSubjectView),\n/* harmony export */   "ScrollIndicator": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ScrollIndicator),\n/* harmony export */   "ScrollbarStyled": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.ScrollbarStyled),\n/* harmony export */   "UseHook": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.UseHook),\n/* harmony export */   "addMissingProps": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.addMissingProps),\n/* harmony export */   "checkInputInvalid": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.checkInputInvalid),\n/* harmony export */   "checkValuesChanged": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.checkValuesChanged),\n/* harmony export */   "copyRxSubject": () => (/* reexport safe */ _rx_js__WEBPACK_IMPORTED_MODULE_4__.copyRxSubject),\n/* harmony export */   "errorMessages": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.errorMessages),\n/* harmony export */   "fillInputs": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.fillInputs),\n/* harmony export */   "findInput": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.findInput),\n/* harmony export */   "getRxInterval": () => (/* reexport safe */ _rx_js__WEBPACK_IMPORTED_MODULE_4__.getRxInterval),\n/* harmony export */   "getValues": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.getValues),\n/* harmony export */   "iUseReducer": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.iUseReducer),\n/* harmony export */   "isMemo": () => (/* reexport safe */ _isMemo__WEBPACK_IMPORTED_MODULE_1__.isMemo),\n/* harmony export */   "reducer": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.reducer),\n/* harmony export */   "setupDefaults": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.setupDefaults),\n/* harmony export */   "statusColors": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.statusColors),\n/* harmony export */   "statusIcons": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.statusIcons),\n/* harmony export */   "statuses": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.statuses),\n/* harmony export */   "styleAScollbar": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.styleAScollbar),\n/* harmony export */   "subjectAsPromise": () => (/* reexport safe */ _rx_js__WEBPACK_IMPORTED_MODULE_4__.subjectAsPromise),\n/* harmony export */   "toProps": () => (/* reexport safe */ _toProps__WEBPACK_IMPORTED_MODULE_5__.toProps),\n/* harmony export */   "unsubscribe": () => (/* reexport safe */ _rx_js__WEBPACK_IMPORTED_MODULE_4__.unsubscribe),\n/* harmony export */   "useCallbackDeferred": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useCallbackDeferred),\n/* harmony export */   "useInverted": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useInverted),\n/* harmony export */   "useIsMobile": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useIsMobile),\n/* harmony export */   "useMount": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useMount),\n/* harmony export */   "useMutationObserver": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useMutationObserver),\n/* harmony export */   "useOptions": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.useOptions),\n/* harmony export */   "usePromise": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.usePromise),\n/* harmony export */   "useQueryBlockchain": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useQueryBlockchain),\n/* harmony export */   "useQueueItemStatus": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.useQueueItemStatus),\n/* harmony export */   "useResizeObserver": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver),\n/* harmony export */   "useRxState": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useRxState),\n/* harmony export */   "useRxStateDeferred": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useRxStateDeferred),\n/* harmony export */   "useRxSubject": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubject),\n/* harmony export */   "useRxSubjectOrValue": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubjectOrValue),\n/* harmony export */   "useRxSubjects": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useRxSubjects),\n/* harmony export */   "useUnmount": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useUnmount),\n/* harmony export */   "useUnsubscribe": () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_2__.useUnsubscribe),\n/* harmony export */   "validateCriteria": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.validateCriteria)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/reactjs/components/index.js");\n/* harmony import */ var _isMemo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/isMemo.js");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/reactjs/hooks/index.js");\n/* harmony import */ var _RecursiveShapeType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/reactjs/RecursiveShapeType.js");\n/* harmony import */ var _rx_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/rx.js");\n/* harmony import */ var _toProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/utils/reactjs/toProps.js");\n\n\n\n\n // for legacy support. ToDo: remove (double check on totem-message-service)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEI7QUFDSjtBQUNEO0FBQ2E7QUFDWixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG90ZW0tbWVjY2Fuby11aS8uL3NyYy91dGlscy9yZWFjdGpzL2luZGV4LmpzP2U1YWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzJ1xuZXhwb3J0ICogZnJvbSAnLi9pc01lbW8nXG5leHBvcnQgKiBmcm9tICcuL2hvb2tzJ1xuZXhwb3J0ICogZnJvbSAnLi9SZWN1cnNpdmVTaGFwZVR5cGUnXG5leHBvcnQgKiBmcm9tICcuLi9yeC5qcycgLy8gZm9yIGxlZ2FjeSBzdXBwb3J0LiBUb0RvOiByZW1vdmUgKGRvdWJsZSBjaGVjayBvbiB0b3RlbS1tZXNzYWdlLXNlcnZpY2UpXG5leHBvcnQgKiBmcm9tICcuL3RvUHJvcHMnXG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/index.js\n')},"./src/utils/reactjs/isMemo.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"isMemo\": () => (/* binding */ isMemo)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * @name    isMemo\n * @summary checks if x is an `Reat.memo` element type\n * @param   {*} x\n *\n * @returns {Boolean}\n */\nvar isMemo = function isMemo(x) {\n  return (x === null || x === void 0 ? void 0 : x['$$typeof']) === /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)('div')['$$typeof'];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isMemo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy9pc01lbW8uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQyxNQUFNLEdBQUcsU0FBVEEsTUFBTUEsQ0FBR0MsQ0FBQztFQUFBLE9BQUksQ0FBQUEsQ0FBQyxhQUFEQSxDQUFDLHVCQUFEQSxDQUFDLENBQUcsVUFBVSxDQUFDLE1BQUssYUFBQUYsMkNBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFBQTtBQUV0RSxpRUFBZUMsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy9pc01lbW8uanM/NzdiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZW1vIH0gZnJvbSAncmVhY3QnXG5cbi8qKlxuICogQG5hbWUgICAgaXNNZW1vXG4gKiBAc3VtbWFyeSBjaGVja3MgaWYgeCBpcyBhbiBgUmVhdC5tZW1vYCBlbGVtZW50IHR5cGVcbiAqIEBwYXJhbSAgIHsqfSB4XG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBpc01lbW8gPSB4ID0+IHg/LlsnJCR0eXBlb2YnXSA9PT0gbWVtbygnZGl2JylbJyQkdHlwZW9mJ11cblxuZXhwb3J0IGRlZmF1bHQgaXNNZW1vIl0sIm5hbWVzIjpbIm1lbW8iLCJpc01lbW8iLCJ4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/reactjs/isMemo.js\n")},"./src/utils/reactjs/toProps.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "toProps": () => (/* binding */ toProps)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n/**\n * @name    toProps\n * @summary extract/generate props object to be supplied to an element\n *\n * @param   {String|Element|Object} elOrProps\n * @param   {String}                childrenProp    (optional) Default: `children`\n * @param   {Boolean}               extractElementProps\n *\n * @returns {Object}\n */\nvar toProps = function toProps() {\n  var _childrenProp;\n  var elOrProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var childrenProp = arguments.length > 1 ? arguments[1] : undefined;\n  var extractElementProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (elOrProps === null) return elOrProps;\n  (_childrenProp = childrenProp) !== null && _childrenProp !== void 0 ? _childrenProp : childrenProp = \'children\';\n  var props = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(elOrProps) ? extractElementProps ? elOrProps.props // react element\n  : _defineProperty({}, childrenProp, elOrProps) : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(elOrProps) ? elOrProps // plain object\n  : _defineProperty({}, childrenProp, elOrProps); // assume string or element\n  return _objectSpread({}, props);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toProps);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvcmVhY3Rqcy90b1Byb3BzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQ047O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQU9BLENBQUEsRUFBa0U7RUFBQSxJQUFBQyxhQUFBO0VBQUEsSUFBOURDLFNBQVMsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBQUEsSUFBRUcsWUFBWSxHQUFBSCxTQUFBLENBQUFDLE1BQUEsT0FBQUQsU0FBQSxNQUFBRSxTQUFBO0VBQUEsSUFBRUUsbUJBQW1CLEdBQUFKLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLEtBQUs7RUFDaEYsSUFBSUQsU0FBUyxLQUFLLElBQUksRUFBRSxPQUFPQSxTQUFTO0VBRXhDLENBQUFELGFBQUEsR0FBQUssWUFBWSxjQUFBTCxhQUFBLGNBQUFBLGFBQUEsR0FBWkssWUFBWSxHQUFLLFVBQVU7RUFDM0IsSUFBTUUsS0FBSyxHQUFHLGFBQUFWLHFEQUFjLENBQUNJLFNBQVMsQ0FBQyxHQUNwQ0ssbUJBQW1CLEdBQ2xCTCxTQUFTLENBQUNNLEtBQUssQ0FBQztFQUFBLEVBQUFDLGVBQUEsS0FDYkgsWUFBWSxFQUFHSixTQUFTLENBQUUsR0FDOUJILDZDQUFLLENBQUNHLFNBQVMsQ0FBQyxHQUNmQSxTQUFTLENBQUM7RUFBQSxFQUFBTyxlQUFBLEtBQ1BILFlBQVksRUFBR0osU0FBUyxDQUFFLEVBQUM7RUFDbEMsT0FBQVEsYUFBQSxLQUFZRixLQUFLO0FBQ2xCLENBQUM7QUFFRCxpRUFBZVIsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvcmVhY3Rqcy90b1Byb3BzLmpzPzdjNDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGlzT2JqIH0gZnJvbSAnLi4vdXRpbHMnXG5cbi8qKlxuICogQG5hbWUgICAgdG9Qcm9wc1xuICogQHN1bW1hcnkgZXh0cmFjdC9nZW5lcmF0ZSBwcm9wcyBvYmplY3QgdG8gYmUgc3VwcGxpZWQgdG8gYW4gZWxlbWVudFxuICpcbiAqIEBwYXJhbSAgIHtTdHJpbmd8RWxlbWVudHxPYmplY3R9IGVsT3JQcm9wc1xuICogQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgICAgICAgY2hpbGRyZW5Qcm9wICAgIChvcHRpb25hbCkgRGVmYXVsdDogYGNoaWxkcmVuYFxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgICAgICAgICAgICAgZXh0cmFjdEVsZW1lbnRQcm9wc1xuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCB0b1Byb3BzID0gKGVsT3JQcm9wcyA9IHt9LCBjaGlsZHJlblByb3AsIGV4dHJhY3RFbGVtZW50UHJvcHMgPSBmYWxzZSkgPT4ge1xuXHRpZiAoZWxPclByb3BzID09PSBudWxsKSByZXR1cm4gZWxPclByb3BzXG5cblx0Y2hpbGRyZW5Qcm9wID8/PSAnY2hpbGRyZW4nXG5cdGNvbnN0IHByb3BzID0gaXNWYWxpZEVsZW1lbnQoZWxPclByb3BzKVxuXHRcdD8gZXh0cmFjdEVsZW1lbnRQcm9wc1xuXHRcdFx0PyBlbE9yUHJvcHMucHJvcHMgLy8gcmVhY3QgZWxlbWVudFxuXHRcdFx0OiB7IFtjaGlsZHJlblByb3BdOiBlbE9yUHJvcHMgfVxuXHRcdDogaXNPYmooZWxPclByb3BzKVxuXHRcdFx0PyBlbE9yUHJvcHMgLy8gcGxhaW4gb2JqZWN0XG5cdFx0XHQ6IHsgW2NoaWxkcmVuUHJvcF06IGVsT3JQcm9wcyB9IC8vIGFzc3VtZSBzdHJpbmcgb3IgZWxlbWVudFxuXHRyZXR1cm4geyAuLi5wcm9wcyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvUHJvcHMiXSwibmFtZXMiOlsiaXNWYWxpZEVsZW1lbnQiLCJpc09iaiIsInRvUHJvcHMiLCJfY2hpbGRyZW5Qcm9wIiwiZWxPclByb3BzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiY2hpbGRyZW5Qcm9wIiwiZXh0cmFjdEVsZW1lbnRQcm9wcyIsInByb3BzIiwiX2RlZmluZVByb3BlcnR5IiwiX29iamVjdFNwcmVhZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/reactjs/toProps.js\n')},"./src/utils/rx.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "IGNORE_UPDATE_SYMBOL": () => (/* binding */ IGNORE_UPDATE_SYMBOL),\n/* harmony export */   "copyRxSubject": () => (/* binding */ copyRxSubject),\n/* harmony export */   "getRxInterval": () => (/* binding */ getRxInterval),\n/* harmony export */   "subjectAsPromise": () => (/* binding */ subjectAsPromise),\n/* harmony export */   "unsubscribe": () => (/* binding */ unsubscribe)\n/* harmony export */ });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _languageHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/languageHelper.js");\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\nvar textsCap = {\n  timedout: \'request timed out before an expected value is received.\'\n};\n(0,_languageHelper__WEBPACK_IMPORTED_MODULE_0__.translated)(textsCap, true);\nvar IGNORE_UPDATE_SYMBOL = Symbol(\'ignore-rx-subject-update\');\n/**\n * @name    copyRxSubject\n * @summary creates a new subject that automatically copies the value of the source subject.\n *\n * @description The the changes are applied unidirectionally from the source subject to the destination subject.\n * Changes on the destination subject is NOT applied back into the source subject.\n *\n * @param   {Subscribable|Array}  rxSource  RxJS source subject(s). If Array, value of `rxCopy` will also be Array.\n * @param   {Subscribable}        rxCopy    (optional) RxJS copy/destination subject\n *                                          Default: `new BehaviorSubject()`\n * @param   {Function}            valueModifier (optional) callback to modify the value before copying from `rxSource`.\n *                                              Accepts async functions.\n *                                              Args: `newValue, previousValue, rxCopy`\n *\n * @returns {Subscribable}        rxCopy\n */\nvar copyRxSubject = function copyRxSubject(rxSource, rxCopy, valueModifier, defer) {\n  var sourceIsArr = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isArr)(rxSource);\n  var gotSource = !sourceIsArr ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(rxSource) : rxSource.every(_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike);\n  var gotModifier = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(valueModifier);\n  var isValid = function isValid(value) {\n    return value !== IGNORE_UPDATE_SYMBOL;\n  };\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(rxCopy)) {\n    var initialValue = !gotSource ? undefined : !sourceIsArr ? rxSource.value : rxSource.map(function (x) {\n      return x.value;\n    });\n    rxCopy = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X();\n    if (gotModifier) initialValue = valueModifier(initialValue, undefined, rxCopy);\n    isValid(initialValue) && rxCopy.next(initialValue);\n  }\n  if (!gotSource) return rxCopy;\n  var subscribeOrg = rxCopy.subscribe.bind(rxCopy);\n  rxCopy.subscribe = function () {\n    var unsubscribed = false;\n    var setValue = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(value) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!unsubscribed) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt("return");\n            case 2:\n              _context.prev = 2;\n              if (gotModifier) {\n                _context.next = 7;\n                break;\n              }\n              _context.t0 = value;\n              _context.next = 10;\n              break;\n            case 7:\n              _context.next = 9;\n              return valueModifier(value, rxCopy.value, rxCopy);\n            case 9:\n              _context.t0 = _context.sent;\n            case 10:\n              value = _context.t0;\n              isValid(value) && rxCopy.next(value);\n              _context.next = 16;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t1 = _context["catch"](2);\n            case 16:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[2, 14]]);\n      }));\n      return function setValue(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    if (defer > 0) setValue = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.deferred)(setValue, defer);\n    var values = [];\n    var subs = !sourceIsArr ? rxSource.subscribe(function (value) {\n      return setValue(value);\n    }) : rxSource.map(function (x, i) {\n      return x.subscribe(function (value) {\n        values[i] = value;\n        setValue(values);\n      });\n    });\n    var sub = subscribeOrg.apply(void 0, arguments);\n    var unsubscribeOrg = sub.unsubscribe;\n    sub.unsubscribe = function () {\n      if (unsubscribed) return;\n      unsubscribed = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      unsubscribeOrg.call.apply(unsubscribeOrg, [sub].concat(args));\n      unsubscribe(subs);\n    };\n    return sub;\n  };\n  return rxCopy;\n};\nvar getRxInterval = function getRxInterval() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var autoStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var incrementBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var intervalId;\n  var rxInterval = {};\n  rxInterval = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X(parseInt(initialValue) || 0);\n  rxInterval.autoStart = autoStart;\n  rxInterval.delay = delay;\n  rxInterval.incrementBy = incrementBy;\n  rxInterval.pause = function () {\n    return clearInterval(intervalId);\n  };\n  rxInterval.start = function () {\n    intervalId = setInterval(function () {\n      return rxInterval.next(rxInterval.value + rxInterval.incrementBy);\n    }, delay);\n  };\n  rxInterval.stop = function () {\n    rxInterval.pause();\n    rxInterval.next(0);\n  };\n  autoStart && rxInterval.start();\n  return rxInterval;\n};\n\n/**\n * @name    subjectAsPromise\n * @summary sugar for RxJS subject as promise and, optionally, wait until an expected value is received\n * \n * @param   {Subject}           subject         RxJS subject or similar subscribable\n * @param   {*|Function}        expectedValue   (optional) if undefined, will resolve as soon as any value is received.\n *                      If function, it should return true or false to indicate whether the value should be resolved.\n * @param   {Number|Function}   timeout         (optional) will reject if no value received within given time\n * \n * @returns {[Promise, Function]}   will reject with: \n *                                  - `null` if times out\n *                                  - `undefined` if @subject is not a valid RxJS subject like subscribable\n */\nvar subjectAsPromise = function subjectAsPromise(subject, expectedValue, timeout, modifier) {\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isSubjectLike)(subject)) return;\n  if (modifier) console.warn(\'utils/rx.js => subjectAsPromise: `modifier` deprecated! Use `promise.then()` instead.\');\n  var subscription, timeoutId, unsubscribed;\n  var unsubscribe = function unsubscribe() {\n    return setTimeout(function () {\n      !unsubscribed && subscription.unsubscribe();\n      unsubscribed = true;\n      clearTimeout(timeoutId);\n    }, 50);\n  };\n  var promise = new _PromisE__WEBPACK_IMPORTED_MODULE_1__["default"](function (resolve, reject) {\n    subscription = subject.subscribe(function (value) {\n      var shouldResolve = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(expectedValue) && expectedValue(value)\n      // no expected value set. resolve with first value received\n      || expectedValue === undefined\n      // exact match\n      || value === expectedValue\n      // resolve only when `subject` is NOT empty, null, NaN etc. Check `hasValue` for details.\n      || expectedValue === subjectAsPromise.anyValueSymbol && (0,_utils__WEBPACK_IMPORTED_MODULE_2__.hasValue)(value);\n      if (!shouldResolve) return;\n      unsubscribe();\n      resolve(value);\n    });\n    timeoutId = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPositiveNumber)(timeout) && setTimeout(function () {\n      // prevent rejecting if already unsubscribed\n      if (unsubscribed) return;\n      unsubscribe();\n      reject(textsCap.timedout);\n    }, timeout);\n  });\n  return [promise, unsubscribe];\n};\nsubjectAsPromise.anyValueSymbol = Symbol(\'any-value\');\n\n/**\n * @name    unsubscribe\n * @summary unsubscribe to multiple RxJS subscriptions\n * @param   {Function|Unsubscribable|Array} unsub\n */\nvar unsubscribe = function unsubscribe() {\n  var unsub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // single function supplied\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(unsub)) return unsub();\n\n  // single\n  if (unsub && (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(unsub.unsubscribe)) return unsub.unsubscribe();\n\n  // multi\n  Object.values(unsub).forEach(function (x) {\n    try {\n      if (!x) return;\n      var fn = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(x) ? x : (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(x.unsubscribe) ? x.unsubscribe : null;\n      fn && fn();\n    } catch (e) {} // ignore\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/rx.js\n')},"./src/utils/storageHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"backup\": () => (/* binding */ backup),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"essentialKeys\": () => (/* binding */ essentialKeys),\n/* harmony export */   \"modulesWithTS\": () => (/* binding */ modulesWithTS),\n/* harmony export */   \"rw\": () => (/* binding */ rw)\n/* harmony export */ });\n/* harmony import */ var _DataStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/utils/DataStorage.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/utils/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Storage Helper: helper funtions to handle all interactions with browser's localStorage including backup and restore.\n */\n\n\n\n// Local Storage item key prefix for all items\nvar PREFIX = 'totem_';\nvar PREFIX_STATIC = PREFIX + 'static_';\nvar CACHE_KEY = PREFIX + 'cache';\nvar SETTINGS_KEY = PREFIX + 'settings';\nvar MODULE_SETTINGS_KEY = 'module_settings';\nvar storage = {};\nvar cache = new _DataStorage__WEBPACK_IMPORTED_MODULE_0__[\"default\"](CACHE_KEY, true); // directly read and write from storage\nvar settings = new _DataStorage__WEBPACK_IMPORTED_MODULE_0__[\"default\"](SETTINGS_KEY);\n\n// LocalStorage items that are essential for the applicaiton to run. \nvar essentialKeys = ['totem_chat-history',\n// chat history\n'totem_contacts', 'totem_history',\n// user activity history\n'totem_identities', 'totem_locations',\n// notifications are essential because user may need to respond to them in case they are migrating to a new device.\n'totem_notifications', 'totem_partners', 'totem_settings'];\n\n// Storage items that are to include a timestamp after being backed up\nvar modulesWithTS = ['totem_contacts', 'totem_identities', 'totem_locations', 'totem_partners'];\n\n/**\n * @name    rw\n * @summary Read/write to storage\n * \n * @param   {DataStorage} storage \n * @param   {String}      key       module/item key\n * @param   {String|null} propKey   name of the property to read/write to.\n *                                  If null, will remove all data stored for the @key\n *                                  If not supplied, will return value for the @key\n * @param   {*}           value       If not specified, will return value for @propKey\n *                                  If null, will remove value for @propKey\n *                                  If Map or Set supplied, will be converted to array using `Array.from`.\n *                                  If Object supplied, will merge with existing values.\n * @param   {Boolean}     override  If @value is an Object, whether to override or merge with existing value. \n *                                  Default: false\n * \n * @returns {*} \n */\nvar rw = function rw(storage, key, propKey, value) {\n  var override = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (!storage || !key) return {};\n  var data = storage.get(key) || {};\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(propKey) && propKey !== null) return data;\n  if (propKey === null) {\n    return storage.delete(key);\n  } else if (value === null) {\n    // remove from storage\n    delete data[propKey];\n  } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isMap)(value) || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {\n    // convert map to array. PS: may need to convert back to Map on retrieval\n    data[propKey] = Array.from(value);\n  } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(value)) {\n    // merge with existing value\n    data[propKey] = override ? value : _objectSpread(_objectSpread({}, data[propKey]), value);\n  } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.hasValue)(value)) {\n    data[propKey] = value;\n  } else {\n    // nothing to save | read-only operation\n    return data[propKey];\n  }\n  storage.set(key, data);\n  return data[propKey];\n};\nvar backup = {\n  /**\n   * @name    backup.download\n   * @summary download backup of application data\n   * \n   * @param   {String}    filename        (optional) Default: generated name with domain and timestamp\n   * @param   {Function}  dataModifier    function to modify/encrypt downloadable data/object\n   *                                      Args: Object\n   *                                      Expected return: String/Object\n   * \n   * @returns {Array} \n   * [\n   *     content     String:\n   *     timestamp   String:\n   *     fileName    String:\n   * ]\n   */\n  download: function download(filename) {\n    var _filename;\n    var dataModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var encrypted = arguments.length > 2 ? arguments[2] : undefined;\n    (_filename = filename) !== null && _filename !== void 0 ? _filename : filename = backup.generateFilename(encrypted);\n    var timestamp = backup.filenameToTS(filename);\n    var data = backup.generateData(timestamp);\n    // add filename hash to the backup to force user to upload the exact same file\n    data._file = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.generateHash)(filename, 'blake2', 32).slice(2);\n    data = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(dataModifier) ? dataModifier(data) : data;\n    var content = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(data) ? data : JSON.stringify(data);\n    (0,_utils__WEBPACK_IMPORTED_MODULE_1__.downloadFile)(content, filename, 'application/json');\n    return {\n      data: data,\n      hash: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.generateHash)(content, 'blake2', 256),\n      timestamp: timestamp,\n      filename: filename\n    };\n  },\n  /**\n   * @name    backup.filenameToTS\n   * @summary extract timestamp from the backup filename\n   * \n   * @returns {String}\n   */\n  filenameToTS: function filenameToTS(filename) {\n    return \"\".concat(filename || '').split('backup-')[1].replace('-encrypted', '') // remove encrypted indicator from filename\n    .split('.json')[0];\n  },\n  /**\n   * @name    backup.generateData\n   * @summary generates an object for backup only using essential data from localStorage\n   * \n   * @params  {String}    timestamp\n   * \n   * @returns {Object}\n   */\n  generateData: function generateData() {\n    var timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date().toISOString();\n    // data to be backed up\n    var data = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objClean)(localStorage, essentialKeys);\n    Object.keys(data).forEach(function (key) {\n      data[key] = JSON.parse(data[key]);\n      if (!timestamp) return;\n      if (key === SETTINGS_KEY) {\n        var _ref = data[SETTINGS_KEY].find(function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 1),\n              key = _ref3[0];\n            return key === MODULE_SETTINGS_KEY;\n          })[1] || {},\n          _ref$messaging = _ref.messaging,\n          messaging = _ref$messaging === void 0 ? {} : _ref$messaging;\n        messaging.user = _objectSpread(_objectSpread({}, messaging.user), {}, {\n          fileBackupTS: timestamp\n        });\n      }\n      if (!modulesWithTS.includes(key)) return;\n\n      // update backup timestamp\n      data[key].forEach(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          _ = _ref5[0],\n          entry = _ref5[1];\n        return entry.fileBackupTS = timestamp;\n      });\n    });\n    return data;\n  },\n  /**\n   * @name    backup.generateFileName\n   * @summary generates a backup filename using current timestamp and URL hostname\n   * \n   * @param   {Boolean}   encrypted   whether backup is encrypted\n   * @param   {String}    timestamp\n   * \n   * @returns {String}\n   */\n  generateFilename: function generateFilename() {\n    var encrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date().toISOString();\n    var hostname = window.location.hostname === 'localhost' ? 'totem-localhost' : window.location.hostname;\n    var parts = [hostname, 'backup', timestamp, encrypted && 'encrypted'].filter(Boolean).join('-');\n    var fileName = \"\".concat(parts, \".json\");\n    return fileName;\n  },\n  /**\n   * @name    backup.updateTS\n   * @summary update backup timestamps of module data (eg: identities, partners).\n   *          This should only be invoked after backup download has been confirmed.\n   * \n   * @param   {Object}    data        parsed replica of localStorage with only the keys that are to be backed up\n   * @param   {String}    timestamp   ISO timestamp to be set as the backup datetime\n   * \n   * @returns {Object}    data\n   */\n  updateFileBackupTS: function updateFileBackupTS(timestamp) {\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isValidDate)(timestamp)) throw new Error('invalid timestamp');\n\n    // set timestamp for individual storage entries\n    modulesWithTS.forEach(function (moduleKey) {\n      var moduleStorage = new _DataStorage__WEBPACK_IMPORTED_MODULE_0__[\"default\"](moduleKey);\n      var updated = moduleStorage.map(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n        return [key, _objectSpread(_objectSpread({}, value), {}, {\n          fileBackupTS: timestamp\n        })];\n      });\n      moduleStorage.setAll(new Map(updated), true);\n    });\n\n    // set timestamp on user credentials\n    var user = _objectSpread(_objectSpread({}, storage.settings.module('messaging').user || {}), {}, {\n      fileBackupTS: timestamp\n    });\n    !!user.id && storage.settings.module('messaging', {\n      user: user\n    });\n\n    // update modules\n    _DataStorage__WEBPACK_IMPORTED_MODULE_0__.rxForceUpdateCache.next(modulesWithTS);\n  }\n};\nstorage.backup = backup;\nstorage.countries = new _DataStorage__WEBPACK_IMPORTED_MODULE_0__[\"default\"](PREFIX_STATIC + 'countries', true);\nstorage.settings = {\n  // global settings\n  // \n  // Params: \n  // @itemKey string: unique identifier for target module or item (if not part of any module)\n  // @value   object: (optional) settings/value to replace existing.\n  global: function global(itemKey, value) {\n    return rw(settings, 'global_settings', itemKey, value);\n  },\n  /**\n   * @name    storage.settings.module\n   * @summary read/write module related settings to localStorage\n   * \n   * @param   {String}    moduleKey   a unique identifier for the module\n   * @param   {*}         value\n   * @param   {Boolean}   override    if @value is an Object, whether to override or merge with existing value.\n   *                                  Default: false\n   * \n   * @returns {*} returns the saved value\n   */\n  module: function module(moduleKey, value) {\n    var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return rw(settings, MODULE_SETTINGS_KEY, moduleKey, value, override);\n  }\n};\n\n/**\n * @name    storage.cache\n * @summary read/write to module cache storage\n * \n * @param   {String}        moduleKey \n * @param   {String|null}   itemKey \n * @param   {*|null}        value \n * \n * @returns {*}\n */\nstorage.cache = function (moduleKey, itemKey, value) {\n  return rw(cache, moduleKey, itemKey, value);\n};\n\n/**\n * @name    storage.cacheDelete\n * @summary remove all cached data for a module\n * \n * @param   {String} moduleKey \n */\nstorage.cacheDelete = function (moduleKey) {\n  return rw(cache, moduleKey, null);\n};\n\n// removes cache and static data\n// Caution: can remove \nstorage.clearNonEssentialData = function () {\n  var keys = [CACHE_KEY,\n  //deprecated\n  'totem_service_notifications', 'totem_translations', 'totem_sidebar-items-status'];\n  var partialKeys = ['_static_', '_cache_'];\n  var shouldRemove = function shouldRemove(key) {\n    return !essentialKeys.includes(key) && (\n    // makes sure essential keys are not removed\n    keys.includes(key) || partialKeys.reduce(function (remove, pKey) {\n      return remove || key.includes(pKey);\n    }, false));\n  };\n  Object.keys(localStorage).forEach(function (key) {\n    return shouldRemove(key) && localStorage.removeItem(key);\n  });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (storage);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/storageHelper.js\n")},"./src/utils/substrate/BlockchainHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ BlockchainHelper),\n/* harmony export */   "texts": () => (/* binding */ texts)\n/* harmony export */ });\n/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/number.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _keyringHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/substrate/keyringHelper.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n// Indicates if run on a Browser or console using NodeJS\nvar isBrowser = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isNodeJS)();\nvar texts = {\n  // error messages\n  errAddress404: \'address not found in the keyring\',\n  errConnectionFailed: \'connection failed\',\n  errInvalidApiFunc: \'invalid query API function\',\n  errInvalidMutliArgsMsg: \'failed to process arguments for multi-query\',\n  errInvalidTxFunc: \'invalid transaction API function\',\n  errBlockNumber: \'unexpected error while fetching block number\',\n  // Log messages\n  connected: \'connected\',\n  connecting: \'connecting to\',\n  disconnected: \'disconnected\',\n  reconnecting: \'attempting to reconnect...\',\n  reconnected: \'reconnected\',\n  txInitiating: \'initiating transation\',\n  txFailed: \'transaction failed\',\n  txStatus: \'transaction status\',\n  txCompletedAtBlock: \'transaction completed at block hash\'\n};\n\n/**\n * @name PolkadotHelper\n * \n * @param   {Array}     nodeUrls        blockchain node URLs.\n *                                      Default: `[\'wss://rpc.polkadot.io\']`\n * @param   {String}    title           name of the blockchain for use with logging.\n *                                      Default: `"Polkadot Blockchain Network"`\n * @param   {Number}    disconnectDelay Delay in number of milliseconds to wait before automatically disconnecting\n *                                      from the network after making a query or transaction. If not a positive integer,\n *                                      will not auto-disconnect.\n *                                      Default: `0` (keep connected)\n * @param   {KeyringHelper} keyringHelper1 (optional) if undefined, will use global keyring\n * @param   {Object}        textOverrides   Internal message overrides. Eg: useful when using a different language.\n * @param   {Object}        unit        (optional) token unit display settings.\n * @param   {Number}        unit.amount (optional) number of tokens per unit.\n *                                      Default: 1e10\n * @param   {Number}        unit.decimals (optional) number of decimal places.\n *                                      Default: 4\n * @param   {String}        unit.name   (optional) ticker/unit name.\n *                                      Default: \'DOT\'\n *                                      \n */\nvar BlockchainHelper = /*#__PURE__*/_createClass(function BlockchainHelper(nodeUrls, title) {\n  var _this = this;\n  var disconnectDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var keyringHelper1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0,_keyringHelper__WEBPACK_IMPORTED_MODULE_2__["default"])();\n  var textOverrides = arguments.length > 4 ? arguments[4] : undefined;\n  var unit = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  _classCallCheck(this, BlockchainHelper);\n  /**\n   * @name        calculateFees\n   * @summary     estimate transaction fee for a specific transaction \n   * @description `feeBase` and `feePerbyte` should already be set using `setDefaultConfig()`. \n   *              Otherwise, value `1` will be used for both.\n   * \n   * @param   {String}    txFunc        path to API function. Should start with "api.tx."\n   * @param   {Array}     funcArgs    arguments to be supplied to the API function\n   * @param   {String}    address     (optional) sender address.\n   * \n   * @returns {Number}    estimated transaction fee plus existential deposit\n   */\n  _defineProperty(this, "calculateFees", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(txFunc, funcArgs, address) {\n      var asString,\n        decimals,\n        tx,\n        result,\n        _ref2,\n        partialFee,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            asString = _args.length > 3 && _args[3] !== undefined ? _args[3] : true;\n            decimals = _args.length > 4 && _args[4] !== undefined ? _args[4] : 10;\n            _context.next = 4;\n            return _this.tx(txFunc, funcArgs);\n          case 4:\n            tx = _context.sent;\n            _context.t0 = _this;\n            _context.t1 = tx;\n            if (!_context.t1) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 10;\n            return tx.paymentInfo([address]);\n          case 10:\n            _context.t1 = _context.sent;\n          case 11:\n            _context.t2 = _context.t1;\n            result = _context.t0.sanitise.call(_context.t0, _context.t2);\n            _ref2 = result || {}, partialFee = _ref2.partialFee;\n            return _context.abrupt("return", _this.formatAmount(partialFee, asString, decimals));\n          case 15:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    disconnect\n   * @summary disconnect from Blockchain network\n   */\n  _defineProperty(this, "disconnect", function () {\n    var _this$connection$prov = _this.connection.provider,\n      p = _this$connection$prov === void 0 ? {} : _this$connection$prov;\n    p.isConnected && p.disconnect();\n    return p.isConnected;\n  });\n  /**\n   * @name    disconnectDeferred\n   * @summary deferred disconnect from blockchain only if auto-disconnect is enabled\n   */\n  _defineProperty(this, "disconnectDeferred", (0,_utils__WEBPACK_IMPORTED_MODULE_0__.deferred)(function () {\n    if (!_this.autoDisconnect) return;\n    _this.disconnect() && _this.log(_this.texts.disconnected);\n  }, this.disconnectDelay, this));\n  /**\n   * @name    formatAmount\n   * \n   * @param   {Number}            value  \n   * @param   {Boolean|String}    asString  (optional) whether to format as string. Accepts: true/false/\'shorten\'\n   * @param   {Number}            decimals  (optional) number of decimal places to be formatted.\n   *                                        Default: `this.unit.decimals`\n   * \n   * @returns {String|Number}\n   */\n  _defineProperty(this, "formatAmount", function (value) {\n    var asString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var decimals = arguments.length > 2 ? arguments[2] : undefined;\n    var _this$unit = _this.unit,\n      amount = _this$unit.amount,\n      _decimals = _this$unit.decimals,\n      name = _this$unit.name;\n    value = amount > 1 ? value / amount : value;\n    if (!asString) return value;\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(decimals)) decimals = _decimals;\n    var formatter = asString === \'shorten\' ? _number__WEBPACK_IMPORTED_MODULE_3__.shorten : _number__WEBPACK_IMPORTED_MODULE_3__.formatNumber;\n    return "".concat(formatter(value, decimals), " ").concat(name);\n  });\n  /**\n   * @name    getBalance\n   * @summary get free balance of one or more identities\n   * \n   * @param   {String|Array}  addresses\n   * @param   {Function}      callback    (optional) to subscribe to the balance changes\n   * @param   {String}        apiFunc     (optional) only required if default balance storage is not used.\n   *                                      Default: `\'api.query.system.account\'`\n   * \n   * @returns {Number|Array|Function}\n   */\n  _defineProperty(this, "getBalance", /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(addresses, callback) {\n      var apiFunc,\n        doSubscribe,\n        handleResult,\n        isMulti,\n        result,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            apiFunc = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : \'api.query.system.account\';\n            addresses = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(addresses) ? addresses : [addresses];\n            doSubscribe = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(callback);\n            handleResult = function handleResult(result) {\n              if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(result)) return result.map(handleResult);\n              var data = result.data;\n              // data.free = isStr(data.free)\n              //     ? eval(data.free)\n              //     : data.free\n              data.free = Number(data.free);\n              data.feeFrozen = Number(data.feeFrozen);\n              data.miscFrozen = Number(data.miscFrozen);\n              doSubscribe && callback(data);\n              return data;\n            };\n            isMulti = addresses.length > 1;\n            if (doSubscribe) addresses.push(handleResult);\n            _context2.next = 8;\n            return _this.query(apiFunc, addresses, isMulti);\n          case 8:\n            result = _context2.sent;\n            return _context2.abrupt("return", doSubscribe ? result : handleResult(result));\n          case 10:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name            getConnection\n   * @summary         initiate a new or get exisiting connection to the Blockchain node\n   * \n   * @param {String}  nodeUrls\n   * \n   * @returns {Object} an object with the following properties: api, provider\n   */\n  _defineProperty(this, "getConnection", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _this$connectPromise;\n    var _ref5, api, provider, connectWithoutRetry;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!((_this$connectPromise = _this.connectPromise) !== null && _this$connectPromise !== void 0 && _this$connectPromise.pending)) {\n            _context4.next = 4;\n            break;\n          }\n          _context4.next = 3;\n          return _this.connectPromise;\n        case 3:\n          return _context4.abrupt("return", _context4.sent);\n        case 4:\n          _ref5 = _this.connection || {}, api = _ref5.api, provider = _ref5.provider;\n          connectWithoutRetry = function connectWithoutRetry() {\n            return new _PromisE__WEBPACK_IMPORTED_MODULE_1__["default"](function (resolve, reject) {\n              return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                var _provider, _api, _require, ApiPromise, _require2, WsProvider, unsubscribe;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.prev = 0;\n                      _require = __webpack_require__("./node_modules/@polkadot/api/index.js"), ApiPromise = _require.ApiPromise;\n                      _require2 = __webpack_require__("./node_modules/@polkadot/rpc-provider/index.js"), WsProvider = _require2.WsProvider;\n                      (_provider = provider) !== null && _provider !== void 0 ? _provider : provider = new WsProvider(_this.nodeUrls, false);\n                      if (provider.isConnected) {\n                        _context3.next = 10;\n                        break;\n                      }\n                      _this.log(_this.texts.connecting, _this.nodeUrls.length > 1 ? _this.nodeUrls : _this.nodeUrls[0]);\n                      unsubscribe = provider.on(\'error\', function () {\n                        _this.log(_this.texts.errConnectionFailed);\n                        unsubscribe();\n                        reject("".concat(_this.title, ": ").concat(_this.texts.errConnectionFailed));\n                      });\n                      _context3.next = 9;\n                      return provider.connect();\n                    case 9:\n                      unsubscribe();\n                    case 10:\n                      if (!((_api = api) !== null && _api !== void 0)) {\n                        _context3.next = 14;\n                        break;\n                      }\n                      _api;\n                      _context3.next = 17;\n                      break;\n                    case 14:\n                      _context3.next = 16;\n                      return ApiPromise.create({\n                        provider: provider\n                      });\n                    case 16:\n                      api = _context3.sent;\n                    case 17:\n                      _context3.next = 19;\n                      return api.ready;\n                    case 19:\n                      _this.connection.api = api;\n                      _this.connection.provider = provider;\n                      resolve(_this.connection);\n                      _context3.next = 27;\n                      break;\n                    case 24:\n                      _context3.prev = 24;\n                      _context3.t0 = _context3["catch"](0);\n                      reject(_context3.t0);\n                    case 27:\n                    case "end":\n                      return _context3.stop();\n                  }\n                }, _callee3, null, [[0, 24]]);\n              }))();\n            });\n          };\n          _this.connectPromise = connectWithoutRetry();\n          _context4.next = 9;\n          return _this.connectPromise;\n        case 9:\n          return _context4.abrupt("return", _context4.sent);\n        case 10:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4);\n  })));\n  /**\n   * @name    getCurrentBlock\n   * @summary get the current block number\n   * \n   * @param   {Function}  callback (optional) supply a callback function to subscribe to block nubmer changes\n   * \n   * @returns {Number|Function} result or unsubscribe function\n   */\n  _defineProperty(this, "getCurrentBlock", /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(callback) {\n      var res;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(callback)) {\n              _context5.next = 12;\n              break;\n            }\n            _context5.next = 3;\n            return _this.query(\'api.rpc.chain.getBlock\');\n          case 3:\n            res = _context5.sent;\n            _context5.prev = 4;\n            return _context5.abrupt("return", res.block.header.number);\n          case 8:\n            _context5.prev = 8;\n            _context5.t0 = _context5["catch"](4);\n            _this.log(_this.texts.errBlockNumber, _context5.t0);\n            return _context5.abrupt("return", 0);\n          case 12:\n            _context5.next = 14;\n            return _this.query(\'api.rpc.chain.subscribeNewHeads\', [function (res) {\n              return callback(res.number);\n            }]);\n          case 14:\n            return _context5.abrupt("return", _context5.sent);\n          case 15:\n          case "end":\n            return _context5.stop();\n        }\n      }, _callee5, null, [[4, 8]]);\n    }));\n    return function (_x6) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    log\n   * @param   {String} message \n   * @returns \n   */\n  _defineProperty(this, "log", function () {\n    var _console;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return (_console = console).log.apply(_console, ["".concat(_this.title, ":")].concat(args));\n  });\n  /**\n   * @name    query\n   * @summary Make storage API calls using PolkadotJS. All values returned will be sanitised.\n   * \n   * \n   * @summary retrieve data from Blockchain storage using PolkadotJS API. All values returned will be sanitised.\n   *\n   * @param   {Function}    func    Path to the PolkadotJS API function as a string.\n   *                                Eg: \'api.rpc.system.health\'\n   * @param   {Array}       args    Arguments to be supplied when invoking the API function.\n   *                                To subscribe to the query, include a callback function as the last item.\n   * @param   {Boolean}     multi   (optional) Whether to construct a multi-query.\n   *                                Only used if `func` is a string and does not end with \'.multi\'.\n   * @param   {Boolean}     print   (optional) If true, will print the sanitised result of the query\n   *\n   * @returns {Function|*}  If function is supplied in as the last item in `args`, will subscribe to the query.\n   *                        For a subscription, will return the `unsubscribe` function.\n   *                        Otherwise, sanitised value of the query result will be returned.\n   */\n  _defineProperty(this, "query", /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(func) {\n      var args,\n        multi,\n        print,\n        connection,\n        api,\n        provider,\n        fn,\n        cb,\n        isSubscribe,\n        len,\n        interceptor,\n        result,\n        _args6 = arguments;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            args = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : [];\n            multi = _args6.length > 2 ? _args6[2] : undefined;\n            print = _args6.length > 3 ? _args6[3] : undefined;\n            _context6.next = 5;\n            return _this.getConnection();\n          case 5:\n            connection = _context6.sent;\n            api = connection.api, provider = connection.provider;\n            if (!(!api || !(provider !== null && provider !== void 0 && provider.isConnected))) {\n              _context6.next = 9;\n              break;\n            }\n            throw new Error(_this.texts.errConnectionFailed);\n          case 9:\n            if (func) {\n              _context6.next = 11;\n              break;\n            }\n            return _context6.abrupt("return", api);\n          case 11:\n            // add .multi if required\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(func) && multi && !func.endsWith(\'.multi\')) func += \'.multi\';\n            fn = eval(func);\n            if (fn) {\n              _context6.next = 15;\n              break;\n            }\n            throw new Error(_this.texts.errInvalidApiFunc);\n          case 15:\n            args = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(args) || !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(args) ? args : [args];\n            multi = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(fn) && !!multi;\n            cb = args[args.length - 1];\n            isSubscribe = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(cb) && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(fn);\n            if (isSubscribe) {\n              // only add interceptor to process result\n              args[args.length - 1] = function (result) {\n                var sanitised = _this.sanitise(result);\n                print && _this.log(func, sanitised);\n                cb(sanitised, result);\n              };\n            }\n\n            // For multi query arguments needs to be constructs as 2D Array.\n            // If only one argument in @args is supplied, assume that it is a 2D array.\n            // Otherwise, construct a 2D array as required by \n            len = isSubscribe ? 2 : 1;\n            if (!(multi && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(args[0]) && args.length > len)) {\n              _context6.next = 31;\n              break;\n            }\n            _context6.prev = 22;\n            // remove subscription callback before processing arguments\n\n            if (isSubscribe) {\n              interceptor = args.slice(-1)[0];\n              args = args.slice(0, -1);\n            }\n            // construct a 2D array\n            args = !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr2D)(args) ? [args] : [args[0].map(function (_, i) {\n              return args.map(function (ar) {\n                return ar[i];\n              });\n            })];\n            // re-add subscription callback\n            if (isSubscribe) args.push(interceptor);\n            _context6.next = 31;\n            break;\n          case 28:\n            _context6.prev = 28;\n            _context6.t0 = _context6["catch"](22);\n            throw "".concat(_this.texts.errInvalidMutliArgsMsg, ": ").concat(_context6.t0.message);\n          case 31:\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(fn)) {\n              _context6.next = 37;\n              break;\n            }\n            _context6.next = 34;\n            return fn.apply(null, args);\n          case 34:\n            _context6.t1 = _context6.sent;\n            _context6.next = 38;\n            break;\n          case 37:\n            _context6.t1 = fn;\n          case 38:\n            result = _context6.t1;\n            !isSubscribe && print && _this.log(_this.sanitise(result));\n\n            // auto disconnect, only if delay duration is specified\n            _this.disconnectDeferred();\n            return _context6.abrupt("return", isSubscribe ? result : _this.sanitise(result));\n          case 42:\n          case "end":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[22, 28]]);\n    }));\n    return function (_x7) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    sanitise\n   * @summary get rid of jargon from PolkadotJS results\n   * \n   * @param   {*} value \n   * \n   * @returns {*}\n   */\n  _defineProperty(this, "sanitise", function (value) {\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(value) && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(value.toJSON)) {\n      return value.toJSON();\n    }\n    return JSON.parse(JSON.stringify(value));\n  });\n  /**\n   * @name    signAndSend\n   * @summary initiate a transaction on the blockchain\n   * \n   * @param   {String} address    Identity address to send the transaction with.\n   * @param   {String} txFunc     Prepared transactin or path to unprepared transactin API function to be prepared \n   *                              before execution. If path, it must start with "api.tx.".\n   * @param   {Array}  txArgs     For unprepared transction, arguments to be suppiled to the transaction function.\n   * @param   {*}      rxUpdater  (optional) RxJS subject to keep track of transaction progress.\n   * @param   {*}      signer     (optional) to sign a transaction using an external signer (eg: PolkadotJS Extension)\n   * \n   * @returns {Array}  [blockHash, eventErrors]\n   */\n  _defineProperty(this, "signAndSend", function (address, txFunc) {\n    var txArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var rxUpdater = arguments.length > 3 ? arguments[3] : undefined;\n    var signer = arguments.length > 4 ? arguments[4] : undefined;\n    return new Promise( /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(resolve, reject) {\n        var sender, isASubject, _yield$_this$getConne, _api2, tx, _handleResult, args;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              sender = !!signer ? address : _this.keyringHelper.getPair(address);\n              _this.log(_this.texts.txInitiating);\n              isASubject = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isSubjectLike)(rxUpdater) && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(rxUpdater.complete);\n              if (sender) {\n                _context7.next = 6;\n                break;\n              }\n              throw new Error(\'Sender identity not found in the keyring\');\n            case 6:\n              _context7.next = 8;\n              return _this.getConnection();\n            case 8:\n              _yield$_this$getConne = _context7.sent;\n              _api2 = _yield$_this$getConne.api;\n              _context7.next = 12;\n              return _this.tx(txFunc, txArgs);\n            case 12:\n              tx = _context7.sent;\n              _handleResult = function _handleResult(result) {\n                var events = result.events,\n                  status = result.status;\n                var isFuture = status.type !== \'Future\';\n                var blockHash = \'\';\n                _this.log(_this.texts.txStatus, status.type);\n\n                // notify\n                isASubject && rxUpdater.next(result);\n\n                // status.type = \'Future\' means transaction will be executed in the future. \n                // there is a transaction in the pool that hasn\'t finished execution. \n                if (!status.isFinalized && isFuture) return;\n                try {\n                  // if status is "Future" block hash is not assigned yet!\n                  blockHash = status.asFinalized.toHex();\n                } catch (e) {} // ignore error\n\n                // Extract custom errors from events\n                var eventErrors = events.filter(function (e) {\n                  return _api2.events.system.ExtrinsicFailed.is(e.event);\n                }).map(function (_ref10) {\n                  var _ref10$event$data = _slicedToArray(_ref10.event.data, 1),\n                    error = _ref10$event$data[0];\n                  if (error.isModule) {\n                    // for module errors, we have the section indexed, lookup\n                    var decoded = _api2.registry.findMetaError(error.asModule);\n                    var docs = decoded.docs,\n                      method = decoded.method,\n                      section = decoded.section;\n                    return "".concat(section, " (").concat(method, "): ").concat(docs.join(\' \'));\n                  }\n                  // Other, CannotLookup, BadOrigin, no extra info\n                  return error.toString();\n                }).filter(Boolean);\n                var success = eventErrors.length === 0;\n                _this.log(success ? _this.texts.txCompletedAtBlock : _this.texts.txFailed, blockHash, isBrowser && {\n                  eventErrors: eventErrors\n                } || \'\');\n\n                // mark updater subject as completed\n                isASubject && rxUpdater.complete();\n                success ? resolve([blockHash, eventErrors, result]) : reject(eventErrors.join(\' | \'));\n              };\n              args = [sender, signer && {\n                signer: signer\n              }, _handleResult].filter(Boolean);\n              _context7.next = 17;\n              return tx.signAndSend.apply(tx, _toConsumableArray(args));\n            case 17:\n              return _context7.abrupt("return", _context7.sent);\n            case 20:\n              _context7.prev = 20;\n              _context7.t0 = _context7["catch"](0);\n              reject(_context7.t0);\n            case 23:\n            case "end":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[0, 20]]);\n      }));\n      return function (_x8, _x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n  });\n  /**\n   * @name    tx\n   * @summary connects to blcokchain and prepares a transction to be executed\n   * \n   * @param   {String}    txFunc  API function to execute. Must start with "api.tx."\n   * @param   {Array}     txArgs  Arguments to be supplied to the `apiFunc`\n   * \n   * @returns {*} signed transaction\n   */\n  _defineProperty(this, "tx", /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(txFunc, txArgs) {\n      var _yield$_this$getConne2, api, tx;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!((0,_utils__WEBPACK_IMPORTED_MODULE_0__.hasValue)(txFunc) && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(txFunc))) {\n              _context8.next = 2;\n              break;\n            }\n            return _context8.abrupt("return", txFunc);\n          case 2:\n            _context8.next = 4;\n            return _this.getConnection();\n          case 4:\n            _yield$_this$getConne2 = _context8.sent;\n            api = _yield$_this$getConne2.api;\n            // DO NOT REMOVE. If txFunc is string this is used to extract the function from API instance\n            eval(api);\n            txFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(txFunc) && txFunc.startsWith(\'api.tx.\') ? eval(txFunc) : txFunc;\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(txFunc)) {\n              _context8.next = 10;\n              break;\n            }\n            throw new Error(_this.texts.errInvalidTxFunc);\n          case 10:\n            _context8.next = 12;\n            return txFunc.apply(void 0, _toConsumableArray(txArgs));\n          case 12:\n            tx = _context8.sent;\n            return _context8.abrupt("return", tx);\n          case 14:\n          case "end":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return function (_x10, _x11) {\n      return _ref11.apply(this, arguments);\n    };\n  }());\n  var _unit$amount = unit.amount,\n    _amount = _unit$amount === void 0 ? 1e10 : _unit$amount,\n    _unit$decimals = unit.decimals,\n    _decimals2 = _unit$decimals === void 0 ? 4 : _unit$decimals,\n    _unit$name = unit.name,\n    _name = _unit$name === void 0 ? \'DOT\' : _unit$name;\n  this.autoDisconnect = disconnectDelay > 0;\n  this.connection = {};\n  this.disconnectDelay = this.autoDisconnect && disconnectDelay;\n  this.keyringHelper = keyringHelper1;\n  this.nodeUrls = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.hasValue)(nodeUrls) ? nodeUrls : [\'wss://rpc.polkadot.io\'];\n  this.texts = _objectSpread(_objectSpread({}, texts), textOverrides);\n  this.title = title || \'Polkadot Blockchain Network\';\n  this.unit = {\n    amount: _amount,\n    decimals: _decimals2,\n    name: _name\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/substrate/BlockchainHelper.js\n')},"./src/utils/substrate/CrowdloanHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ CrowdloanHelper)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _BlockchainHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/substrate/BlockchainHelper.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n/**\n * @name    CrowdloanHelper\n * \n * @param   {BlockchainHelper} blockchainHelper \n */\nvar CrowdloanHelper = /*#__PURE__*/_createClass(function CrowdloanHelper(blockchainHelper, _parachainId, title) {\n  var _this = this;\n  _classCallCheck(this, CrowdloanHelper);\n  /**\n   * @name    getFunds\n   * @summary get total funds raised by the parachain and other info\n   * \n   * @param   {Boolean}   formatted whether to convert amounts to correct units.\n   *                      Default: `true`\n   * \n   * @returns {Object} result\n   * \n   * @example ```javascript\n   * \n   * // Example result: (unformatted)\n   * {\n   *     "depositor": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n   *     "verifier": null,\n   *     "deposit": 100000000000000,\n   *     "raised": 233000000000000,\n   *     "end": 70000,\n   *     "cap": "0x0000000000000000008e1bc9bf040000",\n   *     "lastContribution": {\n   *         "preEnding": 0\n   *     },\n   *     "firstPeriod": 5,\n   *     "lastPeriod": 13,\n   *     "trieIndex": 0\n   * }\n   * \n   * // Example result: (formatted)\n   * {\n   *     "depositor": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n   *     "verifier": null,\n   *     "deposit": 100,\n   *     "raised": 233,\n   *     "end": 70000,\n   *     "cap": 40000,\n   *     "lastContribution": {\n   *         "preEnding": 0\n   *     },\n   *     "firstPeriod": 5,\n   *     "lastPeriod": 13,\n   *     "trieIndex": 0\n   * }\n   * ```\n   */\n  _defineProperty(this, "getFunds", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callback) {\n      var formatted,\n        isSubscribe,\n        handleResult,\n        result,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            formatted = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n            isSubscribe = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(callback);\n            handleResult = function handleResult() {\n              var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n              if (result && formatted) {\n                [\'cap\', \'deposit\', \'raised\'].forEach(function (key) {\n                  var _this$blockchainHelpe, _this$blockchainHelpe2;\n                  result[key] = _this.formatAmount(Number(result[key]), false, ((_this$blockchainHelpe = _this.blockchainHelper) === null || _this$blockchainHelpe === void 0 ? void 0 : (_this$blockchainHelpe2 = _this$blockchainHelpe.unit) === null || _this$blockchainHelpe2 === void 0 ? void 0 : _this$blockchainHelpe2.decimals) || 4);\n                });\n              }\n              isSubscribe && callback(result);\n              return result;\n            };\n            _context.next = 5;\n            return _this.query(\'api.query.crowdloan.funds\', [_this.parachainId, isSubscribe && handleResult].filter(Boolean));\n          case 5:\n            result = _context.sent;\n            return _context.abrupt("return", isSubscribe ? result // unsubscribe function\n            : handleResult(result));\n          case 7:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    getContributions\n   * @summary fetch user contributions by identities\n   * \n   * @param   {String|Array}  addresses \n   * @param   {Boolean}       asString        (optional) Defaut: `false`\n   * @param   {Number}        decimals        (optional) Default: `this.blockchainHelper.unit.decimals`\n   * @param   {Number}        parachainId     (optional) Default: `this.parachainId`\n   * @param   {Function}      callback        (optional)\n   * @param   {Boolean}       includeParallel (optional) whether to include contributions made through Parallel\n   *                                          Finance Crowdloan DApp.\n   *                                          Default: `true`\n   * \n   * @returns {Number|Map}    \n   */\n  _defineProperty(this, "getUserContributions", /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(addresses, asString, decimals, parachainId, callback) {\n      var _parachainId2;\n      var includeParallel,\n        multi,\n        resultsParallel,\n        idHexes,\n        handleResult,\n        result,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            includeParallel = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : true;\n            multi = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isArr)(addresses);\n            (_parachainId2 = parachainId) !== null && _parachainId2 !== void 0 ? _parachainId2 : parachainId = _this.parachainId;\n            if (!multi) addresses = [addresses];\n\n            // fetch user contributions made through Parallel Finance\n            if (includeParallel) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.t0 = [];\n            _context2.next = 11;\n            break;\n          case 8:\n            _context2.next = 10;\n            return Promise.all(addresses.map(function (address) {\n              return _this.getUserContributionsParallel(address, parachainId, false).then(function (_ref3) {\n                var _ref4 = _slicedToArray(_ref3, 2),\n                  _ = _ref4[0],\n                  amount = _ref4[1];\n                return amount;\n              }).catch(function (err) {\n                console.error("Failed to retreive contributions from parallel for ".concat(address, "."), err);\n                return 0;\n              });\n            }));\n          case 10:\n            _context2.t0 = _context2.sent;\n          case 11:\n            resultsParallel = _context2.t0;\n            // convert addresses to hexes\n            idHexes = addresses.map(function (address) {\n              return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isHex)(address) ? address : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isUint8Arr)(address) ? address : (0,_convert__WEBPACK_IMPORTED_MODULE_0__.ss58Decode)(address));\n            });\n            handleResult = function handleResult(contributions) {\n              var result = new Map(resultsParallel.map(function () {\n                var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                var i = arguments.length > 1 ? arguments[1] : undefined;\n                return [addresses[i], amount];\n              }));\n              // include on-chain contributions to the results map\n              Object.keys(contributions).forEach(function (idHex, i) {\n                // convert hex amounts to number\n                var amountOnChain = Number(contributions[idHex]);\n                var address = addresses[i];\n                var amountParallel = result.get(address) || 0;\n                result.set(address, amountParallel + amountOnChain);\n              });\n\n              // format amounts to correct unit and decimal values\n              result = new Map(Array.from(result).map(function (_ref5) {\n                var _ref6 = _slicedToArray(_ref5, 2),\n                  address = _ref6[0],\n                  amount = _ref6[1];\n                return [address, _this.formatAmount(amount, asString, decimals)];\n              }));\n              result = multi ? result : (Array.from(result)[0] || {})[1];\n              return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(callback) ? callback(result) : result;\n            }; // fetch user contributions made directly to the relay chain\n            _context2.next = 16;\n            return _this.query(\'api.derive.crowdloan.ownContributions\', [parachainId, idHexes, (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(callback) && handleResult].filter(Boolean));\n          case 16:\n            result = _context2.sent;\n            return _context2.abrupt("return", (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(callback) ? result : handleResult(result));\n          case 18:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x2, _x3, _x4, _x5, _x6) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    getUserContributionsParallel\n   * @summary fetch user contributions made through Parallel Finance crowdloan DApp\n   * \n   * @param   {String} address \n   * @param   {Nubmer} parachainId \n   * \n   * @returns {Array} [Array, Number]\n   */\n  _defineProperty(this, "getUserContributionsParallel", /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address, parachainId) {\n      var _parachainId3, _result$data, _result$data$dotContr;\n      var formatted,\n        apiUrl,\n        body,\n        options,\n        result,\n        contributions,\n        sum,\n        _args3 = arguments;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            formatted = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n            (_parachainId3 = parachainId) !== null && _parachainId3 !== void 0 ? _parachainId3 : parachainId = _this.parachainId;\n            // convert address to Polkadot format (required for the API to work)\n            address = (0,_convert__WEBPACK_IMPORTED_MODULE_0__.ss58Encode)(address, 0);\n            apiUrl = \'https://api.subquery.network/sq/parallel-finance/auction-subquery\';\n            body = {\n              query: "query {\\n                dotContributions(filter: {\\n                    account: { equalTo: \\"".concat(address, "\\" },\\n                    paraId: { equalTo: ").concat(parachainId, " }\\n                }) {\\n                    nodes {\\n                        id\\n                        blockHeight\\n                        paraId\\n                        account\\n                        amount\\n                        isValid\\n                        transactionExecuted\\n                    } \\n                } \\n            }")\n            };\n            options = {\n              body: JSON.stringify(body),\n              method: \'post\'\n            };\n            _context3.next = 8;\n            return _PromisE__WEBPACK_IMPORTED_MODULE_1__["default"].fetch(apiUrl, options);\n          case 8:\n            result = _context3.sent;\n            contributions = (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$dotContr = _result$data.dotContributions) === null || _result$data$dotContr === void 0 ? void 0 : _result$data$dotContr.nodes) || [];\n            sum = contributions.filter(function (x) {\n              return x.isValid && x.transactionExecuted;\n            }).reduce(function (sum, next) {\n              next.amount = formatted ? _this.formatAmount(next.amount, false) : parseInt(next.amount);\n              return sum + next.amount;\n            }, 0);\n            return _context3.abrupt("return", [contributions, sum]);\n          case 12:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x7, _x8) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    getContributors\n   * @summary fetch list of all contributors of a specific parachain\n   * \n   * @param   {Nubmer} parachainId    Default: `this.parachainId`\n   * \n   * @returns {Array} addresses\n   */\n  _defineProperty(this, "getContributors", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var parachainId,\n      _yield$_this$query,\n      _yield$_this$query$co,\n      contributorsHex,\n      _args4 = arguments;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          parachainId = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : _this.parachainId;\n          _context4.next = 3;\n          return _this.query(\'api.derive.crowdloan.contributions\', parachainId);\n        case 3:\n          _yield$_this$query = _context4.sent;\n          _yield$_this$query$co = _yield$_this$query.contributorsHex;\n          contributorsHex = _yield$_this$query$co === void 0 ? [] : _yield$_this$query$co;\n          return _context4.abrupt("return", contributorsHex.map(function (idHex) {\n            return (0,_convert__WEBPACK_IMPORTED_MODULE_0__.ss58Encode)((0,_convert__WEBPACK_IMPORTED_MODULE_0__.ss58Encode)(idHex));\n          }));\n        case 7:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4);\n  })));\n  if (!(blockchainHelper instanceof _BlockchainHelper__WEBPACK_IMPORTED_MODULE_3__["default"])) throw new Error(\'Invalid BlockchainHelper!\');\n  this.blockchainHelper = blockchainHelper;\n  this.formatAmount = blockchainHelper.formatAmount;\n  this.query = blockchainHelper.query;\n  this.parachainId = _parachainId;\n  this.title = title;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/substrate/CrowdloanHelper.js\n')},"./src/utils/substrate/ExtensionHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ ExtensionHelper)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n/**\n * @name    ExtensionHelper\n * @summary class container commonly used helper functions to interact with PolkadotJS Browser Extension\n * \n * @param   {String}    dAppName    A name for your DApp\n */\nvar ExtensionHelper = /*#__PURE__*/_createClass(function ExtensionHelper(dAppName) {\n  var _this = this;\n  _classCallCheck(this, ExtensionHelper);\n  /**\n   * @name    accounts\n   * @summary retrieve or subscribe to PolkadotJS extension accounts/identities\n   * \n   * @param   {Function} callback (optional) if function, will subscribe to changes on the list of PolkadotJS \n   *                              extension accounts.\n   *                              Functions arguments:\n   *                              - result\n   * @returns {Array|Function}\n   */\n  _defineProperty(this, "accounts", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callback) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isFn)(callback)) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 3;\n            return _this.web3.web3Accounts();\n          case 3:\n            return _context.abrupt("return", _context.sent);\n          case 4:\n            _context.next = 6;\n            return _this.web3.web3AccountsSubscribe(callback);\n          case 6:\n            return _context.abrupt("return", _context.sent);\n          case 7:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    checkInjected\n   * @summary check if PolkadotJS extension injection was successful\n   * \n   * @returns {Boolean}\n   */\n  _defineProperty(this, "checkInjected", function () {\n    return _this.web3.isWeb3Injected;\n  });\n  /**\n   * @name    enable\n   * @summary enable PolkadotJS extension\n   * \n   * @returns {*} result\n   */\n  _defineProperty(this, "enable", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _this.web3.web3Enable(_this.dAppName || \'Unnamed DApp\');\n        case 2:\n          return _context2.abrupt("return", _context2.sent);\n        case 3:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  })));\n  /**\n   * @name    fromAddress\n   * @summary get injector from extension\n   * \n   * @param   {String} address \n   * \n   * @returns {Object}\n   */\n  _defineProperty(this, "fromAddress", /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address) {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _this.web3.web3FromAddress(address);\n          case 3:\n            return _context3.abrupt("return", _context3.sent);\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3["catch"](0);\n          case 8:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[0, 6]]);\n    }));\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    getSigner\n   * @summary get transaction signer for an injected identity by address\n   * \n   * @param   {String} address \n   * \n   * @returns {*} signer\n   */\n  _defineProperty(this, "getSigner", /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address) {\n      var _ref5, signer;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _this.fromAddress(address);\n          case 2:\n            _context4.t0 = _context4.sent;\n            if (_context4.t0) {\n              _context4.next = 5;\n              break;\n            }\n            _context4.t0 = {};\n          case 5:\n            _ref5 = _context4.t0;\n            signer = _ref5.signer;\n            return _context4.abrupt("return", signer);\n          case 8:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, "listRpcProviders", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _this.web3.web3ListRpcProviders();\n        case 2:\n          return _context5.abrupt("return", _context5.sent);\n        case 3:\n        case "end":\n          return _context5.stop();\n      }\n    }, _callee5);\n  })));\n  /**\n   * @name    signature\n   * @summary create a signature using an identity from PolkadotJS extension. (User approval required)\n   * \n   * @param   {String|Uint8Array} address \n   * @param   {String|Uint8Array} message \n   * \n   * @returns {String} hex string\n   */\n  _defineProperty(this, "signature", /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(address, message) {\n      var signer, _ref8, signRaw, _yield$signRaw, signature;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _this.getSigner(address);\n          case 2:\n            signer = _context6.sent;\n            _ref8 = signer || {}, signRaw = _ref8.signRaw;\n            if (signRaw) {\n              _context6.next = 6;\n              break;\n            }\n            return _context6.abrupt("return", null);\n          case 6:\n            _context6.next = 8;\n            return signRaw({\n              address: address,\n              data: message\n            });\n          case 8:\n            _yield$signRaw = _context6.sent;\n            signature = _yield$signRaw.signature;\n            return _context6.abrupt("return", signature);\n          case 11:\n          case "end":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return function (_x4, _x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isNodeJS)()) throw new Error(\'PolkadotJS ExtensionHelper can only be used from a browser!\');\n  this.dAppName = dAppName;\n  this.web3 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module \'@polkadot/extension-dapp\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()));\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/substrate/ExtensionHelper.js\n')},"./src/utils/substrate/SubscanHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ SubscanHelper)\n/* harmony export */ });\n/* harmony import */ var _PromisE__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/PromisE.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar SubscanHelper = /*#__PURE__*/_createClass(function SubscanHelper(apiBaseURL, apiKey) {\n  var _this = this;\n  _classCallCheck(this, SubscanHelper);\n  _defineProperty(this, "query", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, data, options) {\n      var _options$method, _data, _data2;\n      var protocol, slash, url;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            protocol = _this.apiBaseURL.startsWith(\'https://\') ? \'\' : \'https://\';\n            slash = _this.apiBaseURL.endsWith(\'/\') ? \'\' : \'/\';\n            url = "".concat(protocol).concat(_this.apiBaseURL).concat(slash).concat(path);\n            (_options$method = options.method) !== null && _options$method !== void 0 ? _options$method : options.method = \'post\';\n            data = _objectSpread(_objectSpread({}, data), {}, {\n              page: ((_data = data) === null || _data === void 0 ? void 0 : _data.page) || 1,\n              // no idea what it is but query fails without it! no explanation in the subscan.io docs! \n              row: ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.row) || 1\n            });\n            options.body = JSON.stringify(data);\n            options.headers = _objectSpread({\n              \'Content-Type\': \'application/json\',\n              \'X-API-Key\': _this.apiKey\n            }, options.headers);\n            _context.next = 9;\n            return _PromisE__WEBPACK_IMPORTED_MODULE_0__["default"].fetch(url, options);\n          case 9:\n            return _context.abrupt("return", _context.sent);\n          case 10:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    parachainGetList\n   * @summary get a list of parachains. \n   * @description API documentation can be found here: https://docs.api.subscan.io/#parachain-list\n   * \n   * @returns {Array}\n   */\n  _defineProperty(this, "parachainGetList", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _result$data;\n    var result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _this.query(\'api/scan/parachain/list\');\n        case 2:\n          result = _context2.sent;\n          return _context2.abrupt("return", (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.chains) || []);\n        case 4:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  })));\n  /**\n   * @name    parachainGetFunds\n   * @summary get contribution information including funds raised.\n   * @description API documentation can be found here: https://docs.api.subscan.io/#funds\n   * \n   * @param   {Number} parachainId \n   * \n   * @returns {Array}\n   */\n  _defineProperty(this, "parachainGetFunds", /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(parachainId) {\n      var _result$data2;\n      var result;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _this.query(\'api/scan/parachain/funds\', {\n              para_id: parachainId\n            });\n          case 2:\n            result = _context3.sent;\n            return _context3.abrupt("return", (result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : _result$data2.funds) || []);\n          case 4:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  var valid = !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isValidURL)(this.apiBaseURL) || !"".concat(this.apiBaseURL).contains(\'subscan.io\');\n  if (!valid) throw new Error(\'Invalid subscan.io API endpoint\');\n  this.apiBaseURL = "".concat(apiBaseURL);\n  this.apiKey = apiKey;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/substrate/SubscanHelper.js\n')},"./src/utils/substrate/identityHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "IdentityHelper": () => (/* binding */ IdentityHelper),\n/* harmony export */   "REQUIRED_KEYS": () => (/* binding */ REQUIRED_KEYS),\n/* harmony export */   "USAGE_TYPES": () => (/* binding */ USAGE_TYPES),\n/* harmony export */   "VALID_KEYS": () => (/* binding */ VALID_KEYS),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@polkadot/util-crypto/index.js");\n/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _DataStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/DataStorage.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\n/* harmony import */ var _keyringHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/utils/substrate/keyringHelper.js");\n/* harmony import */ var _ExtensionHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/utils/substrate/ExtensionHelper.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\nvar USAGE_TYPES = Object.freeze({\n  PERSONAL: \'personal\',\n  BUSINESS: \'business\'\n});\nvar REQUIRED_KEYS = Object.freeze([\'address\', \'name\']);\n// list of all properties used in idenities\nvar VALID_KEYS = Object.freeze([].concat(_toConsumableArray(REQUIRED_KEYS), [\'cloudBackupStatus\',\n// undefined: never backed up, in-progress, done\n\'cloudBackupTS\',\n// most recent successful backup timestamp\n\'fileBackupTS\',\n// most recent file backup timestamp\n\'locationId\', \'selected\', \'source\', \'tags\', \'type\', \'uri\', \'usageType\']));\nvar IdentityHelper = /*#__PURE__*/_createClass(function IdentityHelper(keyring) {\n  var _this = this;\n  var _type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'sr25519\';\n  var storageKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'totem_identities\';\n  _classCallCheck(this, IdentityHelper);\n  /**\n   * @name\taddFromUri\n   * \n   * @param\t{String} uri\tmnemonic/seed\n   * @param\t{String} type\taddress type. Default: \'sr25519\'\n   * \n   * @returns {Object} keypair. If undefined, try again with short delay.\n   */\n  _defineProperty(this, "addFromUri", function (uri) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.type;\n    try {\n      return _this.keyring.addFromUri(uri, null, type).toJson();\n    } catch (err) {\n      // error will occur if wasm-crypto is not initialised or invalid URI passed\n      // console.log(\'services.identity.addFromUri()\', err)\n    }\n  });\n  /**\n   * @name\tenableExtionsion\n   * @summary enables use of PolkadotJS Extension and automatically inject identities.\n   * @description requires node module: \'@polkadot/extension-dapp\'\n   */\n  _defineProperty(this, "enableExtionsion", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dAppName) {\n      var result, removeInjected;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isNodeJS)()) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt("return");\n          case 2:\n            _this.extension = new _ExtensionHelper__WEBPACK_IMPORTED_MODULE_4__["default"](dAppName);\n            _context.next = 5;\n            return _this.extension.enable();\n          case 5:\n            result = _context.sent;\n            removeInjected = function removeInjected(ignoreAddresses) {\n              var removed = [];\n              _this.map(function (_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 2),\n                  address = _ref3[0],\n                  uri = _ref3[1].uri;\n                // if injected identity was removed from PolkadotJS extension,\n                // remove from identity storage as well\n                var shouldRemove = uri === null && !ignoreAddresses.includes(address);\n                if (!shouldRemove) return;\n                _this.remove(address);\n                removed.push(address);\n              });\n\n              // if removed item was selected, set the first item as selected identity\n              var _ref4 = _this.getSelected() || {},\n                selected = _ref4.address;\n              _this.rxSelected.next(selected);\n            };\n            if (result.length) {\n              _context.next = 10;\n              break;\n            }\n            removeInjected([]);\n            return _context.abrupt("return", result);\n          case 10:\n            // extension is enabled\n            _this.extension.accounts(function (accounts) {\n              var addresses = accounts.map(function (account) {\n                var address = account.address,\n                  _account$meta = account.meta,\n                  name = _account$meta.name,\n                  source = _account$meta.source,\n                  type = account.type;\n                var existingItem = _this.get(address);\n                if (!!existingItem && existingItem.uri !== null) return address;\n\n                // inject external identity without uri\n                var entry = {\n                  address: address,\n                  name: name,\n                  source: source,\n                  type: type,\n                  uri: null\n                };\n                _this.set(address, entry);\n                return address;\n              });\n              removeInjected(addresses);\n            });\n            return _context.abrupt("return", result);\n          case 12:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name find\n   * @summary find an identity by name or address\n   * \n   * @param\t{String} addressOrName \n   * \n   * @returns {Object}\n   */\n  _defineProperty(this, "find", function (addressOrName) {\n    return _this.storage.find({\n      address: addressOrName,\n      name: addressOrName\n    }, true, false, true);\n  });\n  /**\n   * @name\tgenerateUri\n   * @summary generate random mnemonic\n   * \n   * @returns {String} If undefined, try again with short delay.\n   */\n  _defineProperty(this, "generateUri", function () {\n    try {\n      return (__webpack_require__("./node_modules/bip39/src/index.js")/* .generateMnemonic */ .OF)();\n    } catch (err) {\n      // error will occur if wasm-crypto is not initialised or invalid URI passed\n      console.warn(\'Failed to generate URI\', err);\n    }\n  });\n  /**\n   * @name\tget\n   * @summary get identity by address\n   * \n   * @param\t{String} address \n   * \n   * @returns {Object}\n   */\n  _defineProperty(this, "get", function (address) {\n    return _this.storage.get(address);\n  });\n  /**\n   * @name\tget\n   * @summary get all identities\n   * \n   * @param\t{String} address \n   * \n   * @returns {Object}\n   */\n  _defineProperty(this, "getAll", function () {\n    return _this.storage.map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        _ = _ref6[0],\n        x = _ref6[1];\n      return _objectSpread({}, x);\n    });\n  });\n  /**\n   * @name    getSelected\n   * @summary get selected identity\n   *\n   * @returns {Object}\n   */\n  _defineProperty(this, "getSelected", function () {\n    return _this.storage.find({\n      selected: true\n    }, true, true) || _this.getAll()[0];\n  });\n  // return first identity if none selected\n  /**\n   * @name\tinit\n   * @summary create first identity if none created already\n   */\n  _defineProperty(this, "init", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var retries,\n      seed,\n      uri,\n      _ref8,\n      address,\n      identity,\n      _ref9,\n      selected,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          retries = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 10;\n          _context2.next = 3;\n          return (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_0__.cryptoWaitReady)();\n        case 3:\n          if (!(retries < 0)) {\n            _context2.next = 5;\n            break;\n          }\n          return _context2.abrupt("return");\n        case 5:\n          if (_this.getAll().length) {\n            _context2.next = 21;\n            break;\n          }\n          _context2.prev = 6;\n          // generate a new seed\n          seed = _this.generateUri();\n          if (seed) {\n            _context2.next = 10;\n            break;\n          }\n          throw 1;\n        case 10:\n          uri = "".concat(seed, "/totem/0/0");\n          _ref8 = _this.addFromUri(uri, _this.type) || {}, address = _ref8.address; // in case `wasm-crypto` hasn\'t been initiated yet, try again after a second\n          if (address) {\n            _context2.next = 14;\n            break;\n          }\n          throw 1;\n        case 14:\n          identity = {\n            address: address,\n            name: \'Default\',\n            usageType: USAGE_TYPES.PERSONAL,\n            uri: uri\n          };\n          _this.set(address, identity);\n          _context2.next = 21;\n          break;\n        case 18:\n          _context2.prev = 18;\n          _context2.t0 = _context2["catch"](6);\n          return _context2.abrupt("return", _context2.t0 !== 1 ? Promise.reject(_context2.t0) : setTimeout(function () {\n            return _this.init(retries - 1);\n          }, 1000));\n        case 21:\n          _ref9 = _this.getSelected() || {}, selected = _ref9.address;\n          _this.rxSelected.next(selected);\n        case 23:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[6, 18]]);\n  })));\n  _defineProperty(this, "map", function () {\n    var _this$storage;\n    return (_this$storage = _this.storage).map.apply(_this$storage, arguments);\n  });\n  /**\n   * @name    remove\n   * @summary Permanent remove identity from storage\n   *\n   * @param   {String} address\n   */\n  _defineProperty(this, "remove", function (address) {\n    _this.storage.delete(address);\n  });\n  /**\n   * @name\tsearch\n   * @summary partial or fulltext search on storage data\n   *\n   * @param   {Object}  keyValues  Object with property names and the the value to match\n   * @param   {Boolean} matchExact (optional) fulltext or partial search. Default: false\n   * @param   {Boolean} matchAll   (optional) AND/OR operation for keys in @keyValues. Default: false\n   * @param   {Boolean} ignoreCase (optional) case-sensitivity of the search. Default: false.\n   * @param   {Number}  limit      (optional) limits number of results. Default: 0 (no limit)\n   *\n   * @returns {Map}     result\n   */\n  _defineProperty(this, "search", function (keyValues, matchExact, matchAll, ignoreCase, limit) {\n    return _this.storage.search(keyValues, matchExact, matchAll, ignoreCase, limit);\n  });\n  /**\n   * @name    set\n   * @summary add or update identity\n   *\n   * @param   {String} address\n   * @param   {Object} identity In case of update, will be merged with existing values.\n   *                            See `VALID_KEYS` for a list of accepted properties\n   * \n   * @param\t{String}  identity.address\t\tSS58 decoded address\n   * @param\t{String}  identity.name\t\t\tname of the identity\n   * @param\t{String}  identity.type\t\t\t(optional) identity type\n   * \t\t\t\t\t\t\t\t\t\t\tDefault: `\'sr25519\'`\n   * @param\t{Object}  identity.uri\t\t\tFull seed including mnemonic and derivation path.\n   * \t\t\t\t\t\t\t\t\t\t\tUse `null` if identity is imported from PolkadotJS extension.\n   * @param\t{String}  identity.usageType\t(optional) Accepted values: \'personal\' or \'business\'\n   * \t\t\t\t\t\t\t\t\t\t\tDefault: `\'personal\'`\n   * @param\t{String}  identity.locationId\t(optional)\n   * @param\t{Boolean} identity.selected\t\t(optional)\t\n   * \t\t\t\t\t\t\t\t\t\t\tDefault: `false`\n   * @param\t{Array}\t  identity.tags\t\t\t(optional) tags for categorisation. \n   * \t\t\t\t\t\t\t\t\t\t\tDefault: `[]`\n   *\n   * @returns {Object} returns the identity added/updated. If undefined, identity add/update failed.\n   */\n  _defineProperty(this, "set", function (address, identity) {\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(address) || !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isObj)(identity)) return;\n    var existingItem = _this.get(address);\n    // check if identity object contains all the required properties\n    var valid = !!existingItem || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.objHasKeys)(identity, REQUIRED_KEYS.filter(function (key) {\n      return key !== \'uri\' || identity.uri !== null;\n    }), true);\n    if (!valid) return;\n    var _ref10 = identity || {},\n      selected = _ref10.selected,\n      type = _ref10.type,\n      usageType = _ref10.usageType;\n    var isUsageTypeValid = Object.values(USAGE_TYPES).includes(usageType);\n    identity.type = type || _this.type;\n    identity.selected = !!selected;\n    identity.usageType = !isUsageTypeValid ? USAGE_TYPES.PERSONAL : usageType;\n    //  merge with existing values and get rid of any unwanted properties\n    identity = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.objClean)(_objectSpread(_objectSpread({}, existingItem), identity), VALID_KEYS);\n    // save to the storage\n    _this.storage.set(address, identity);\n    return identity;\n  });\n  /**\n   * @name    setSelected\n   * @summary set default/selected identity\n   *\n   * @param {String} address identity/wallet address\n   */\n  _defineProperty(this, "setSelected", function (address) {\n    var identity = _this.get(address);\n    // cannot set non-existent identity as selected\n    if (!identity) return;\n    var arrSelected = _this.search({\n      selected: true\n    }, true, true);\n    // unselected previously selected\n    Array.from(arrSelected).forEach(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n        address = _ref12[0],\n        identity = _ref12[1];\n      identity.selected = false;\n      _this.storage.set(address, identity);\n    });\n    identity.selected = true;\n    _this.set(address, identity);\n    _this.rxSelected.next(address);\n  });\n  /**\n   * @name    signature\n   * @summary create a new signature using an idenitity from local storage or PolkadotJS extension\n   * \n   * @param   {String|Uint8Array} address \n   * @param   {String|Uint8Array} message \n   * \n   * @returns {String} hex string\n   */\n  _defineProperty(this, "signature", /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address, message) {\n      var identity, exists;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isStr)(message)) message = JSON.stringify(message);\n            identity = _this.get(address);\n            if (identity) {\n              _context3.next = 4;\n              break;\n            }\n            return _context3.abrupt("return", null);\n          case 4:\n            if (!identity.uri) {\n              _context3.next = 8;\n              break;\n            }\n            // local identity\n            exists = _this.keyringHelper.contains(address);\n            if (!exists) _this.keyringHelper.add([identity.uri]);\n            return _context3.abrupt("return", _this.keyringHelper.signature(address, message));\n          case 8:\n            if (!_this.extension) {\n              _context3.next = 12;\n              break;\n            }\n            _context3.next = 11;\n            return _this.extension.signature(address, message);\n          case 11:\n            return _context3.abrupt("return", _context3.sent);\n          case 12:\n            return _context3.abrupt("return", null);\n          case 13:\n          case "end":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x2, _x3) {\n      return _ref13.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, "signatureVerify", /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(message, signature, address) {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _this.keyringHelper.signatureVerify(message, signature, address);\n          case 2:\n            return _context4.abrupt("return", _context4.sent);\n          case 3:\n          case "end":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function (_x4, _x5, _x6) {\n      return _ref14.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, "sort", function () {\n    var _this$storage2;\n    return (_this$storage2 = _this.storage).sort.apply(_this$storage2, arguments);\n  });\n  _defineProperty(this, "toArray", function () {\n    var _this$storage3;\n    return (_this$storage3 = _this.storage).toArray.apply(_this$storage3, arguments);\n  });\n  _defineProperty(this, "toString", function () {\n    var _this$storage4;\n    return (_this$storage4 = _this.storage).toString.apply(_this$storage4, arguments);\n  });\n  this.extension = null;\n  this.storage = new _DataStorage__WEBPACK_IMPORTED_MODULE_1__["default"](storageKey);\n  this.keyringHelper = !keyring ? (0,_keyringHelper__WEBPACK_IMPORTED_MODULE_3__["default"])() : new _keyringHelper__WEBPACK_IMPORTED_MODULE_3__.KeyringHelper(_type, keyring);\n  this.keyring = this.keyringHelper.keyring;\n  this.rxIdentities = this.storage.rxData;\n  this.rxSelected = new rxjs__WEBPACK_IMPORTED_MODULE_5__/* .BehaviorSubject */ .X();\n  this.type = this.keyringHelper.type;\n  setTimeout(function () {\n    return _this.init(10);\n  });\n});\n\n// default/global identities\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new IdentityHelper());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/substrate/identityHelper.js\n')},"./src/utils/substrate/keyringHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "KeyringHelper": () => (/* binding */ KeyringHelper),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/convert.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/utils.js");\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n/**\n * @name    KeyringHelper\n * @summary A helper class with most commonly used functions for managing identities using the PolkadotJS Keyring.\n * \n * @param   {String}    type    (optional) Default: \'sr25519\'\n * @param   {Object}    keyring (optional) Default: new Keyring({type})\n */\nvar KeyringHelper = /*#__PURE__*/_createClass(function KeyringHelper() {\n  var _this = this;\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'sr25519\';\n  var keyring = arguments.length > 1 ? arguments[1] : undefined;\n  _classCallCheck(this, KeyringHelper);\n  /**\n   * @name    add\n   * @summary add identities to the keyring\n   * \n   * @param   {Array} seeds   array of uri/seeds or objects with properties: secretKey & publicKey\n   * \n   * @returns {Array} array of keypairs\n   */\n  _defineProperty(this, "add", function () {\n    var seeds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return seeds.map(function (seed) {\n      try {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isUint8Arr)(seed)) {\n          seed = (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(seed);\n        } else if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObj)(seed) && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objHasKeys)(seed, [\'secretKey\', \'publicKey\'])) {\n          var _seed = seed,\n            secretKey = _seed.secretKey,\n            publicKey = _seed.publicKey;\n          var pair = (__webpack_require__("./node_modules/@polkadot/keyring/index.js").createPair)(_this.type, {\n            secretKey: secretKey,\n            publicKey: publicKey\n          });\n          return _this.keyring.addPair(pair);\n        }\n        return _this.keyring.addFromUri(seed);\n      } catch (error) {\n        console.log(\'Failed to add seed to keyring\', error);\n      }\n    });\n  });\n  /**\n   * @name    contains\n   * @summary contains checks if identity exists in the keyring\n   *\n   * @param   {String|Uint8Array} address \n   *\n   * @returns {Boolean}\n   */\n  _defineProperty(this, "contains", function (address) {\n    return !!_this.getPair(address);\n  });\n  /**\n   * @name    getPair\n   * @summary get keypair from address without throwing error if not found\n   * \n   * @param   {String} address \n   * @param   {String} create\n   * \n   * @returns {Object}\n   */\n  _defineProperty(this, "getPair", function (address) {\n    var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    try {\n      // test if @secretKey is an address already added to the keyring\n      return _this.keyring.getPair(address);\n    } catch (_) {\n      if (create) return _this.keyring.addFromAddress(address);\n    }\n  });\n  /**\n   * @name    remove\n   * @summary remove a pair from the keyring\n   * \n   * @param   {String} address \n   * \n   * @returns {Boolean}   indicates success/failure\n   */\n  _defineProperty(this, "remove", function (address) {\n    return _this.contains(address) && !_this.keyring.removePair(address);\n  });\n  /**\n   * @name    signature\n   * @summary create a new signature using an idenitity from the keyring\n   * \n   * @param   {String|Uint8Array} address Identity to sign the message with. Must be already in the keyring.\n   * @param   {String|Uint8Array} message Message to sign.\n   * \n   * @returns {String} hex signature\n   */\n  _defineProperty(this, "signature", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address, message) {\n      var pair, signature;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            pair = _this.getPair(address);\n            if (address) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt("return", null);\n          case 3:\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(message)) message = JSON.stringify(message);\n            signature = pair.sign(message);\n            return _context.abrupt("return", (0,_convert__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(signature));\n          case 6:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  /**\n   * @name    signatureVerify\n   * @summary verify a signature created using any identity\n   * \n   * @param   {String|Uint8Array} message         Message to verify\n   * @param   {String|Uint8Array} signature       Signature to verify\n   * @param   {String|Uint8Array} signerAddress   Signers identity\n   * \n   * @returns {Boolean}\n   */\n  _defineProperty(this, "signatureVerify", /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(message, signature, signerAddress) {\n      var publicKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            publicKey = (0,_convert__WEBPACK_IMPORTED_MODULE_0__.ss58Decode)(signerAddress);\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isStr)(message)) message = JSON.stringify(message);\n            return _context2.abrupt("return", _this.getPair(signerAddress, true).verify(message, signature, publicKey));\n          case 3:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x3, _x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  var Keyring = (__webpack_require__("./node_modules/@polkadot/keyring/index.js")["default"]);\n  //Instantiate a new keyring instance if not provided\n  this.keyring = keyring || new Keyring({\n    type: type\n  });\n  this.type = type;\n});\n\n// Default/global keyring\nvar instance = null;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function () {\n  instance = instance || new KeyringHelper();\n  return instance;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/substrate/keyringHelper.js\n')},"./src/utils/time.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "BLOCK_DURATION_REGEX": () => (/* binding */ BLOCK_DURATION_REGEX),\n/* harmony export */   "BLOCK_DURATION_SECONDS": () => (/* binding */ BLOCK_DURATION_SECONDS),\n/* harmony export */   "blockToDate": () => (/* binding */ blockToDate),\n/* harmony export */   "dateToBlock": () => (/* binding */ dateToBlock),\n/* harmony export */   "durationToSeconds": () => (/* binding */ durationToSeconds),\n/* harmony export */   "format": () => (/* binding */ format),\n/* harmony export */   "secondsToDuration": () => (/* binding */ secondsToDuration)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/utils.js");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n/*\n * Date formatting etc.\n */\n\nvar BLOCK_DURATION_SECONDS = 4;\nvar BLOCK_DURATION_REGEX = /^(\\d{2}):[0-5][0-9]:[0-5][0-9]$/; // valid duration up to 99:59:59\n\n/**\n * @name    blockToDate\n * @summary converts block number to date relative to the supplied @currentBlock\n * \n * @param   {Number}    block           block number to get the timestamp of\n * @param   {Number}    currentBlock    current block number\n * @param   {Boolean}   asString        (optional) whether to return formatted ISO date string or Date object\n *                                      Default: true\n * @param   {Number}    strLength       (optional) only when asString is true\n * \n * @returns {String|Date}\n */\nvar blockToDate = function blockToDate(block, currentBlock) {\n  var asString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var strLength = arguments.length > 3 ? arguments[3] : undefined;\n  var numSeconds = (block - currentBlock) * BLOCK_DURATION_SECONDS;\n  var date = new Date();\n  // add or substract duration to the @date to get to the timestamp of the @block\n  date.setSeconds(date.getSeconds() + numSeconds);\n  return !asString ? date : "".concat(format(date)).substring(0, strLength);\n};\n\n/**\n * @name    dateToBlock\n * @summary convert date to (estimated) block number\n * \n * @param   {Date|String}   date\n * @param   {Number}        currentBlock \n * \n * @returns {Number}\n */\nvar dateToBlock = function dateToBlock(date, currentBlock) {\n  var dateMS = new Date(date) - new Date();\n  var blockNum = Math.ceil(dateMS / 1000 / BLOCK_DURATION_SECONDS) + currentBlock;\n  return blockNum;\n};\nvar durationToSeconds = function durationToSeconds() {\n  var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n  var _duration$split = duration.split(\':\'),\n    _duration$split2 = _slicedToArray(_duration$split, 3),\n    _duration$split2$ = _duration$split2[0],\n    hours = _duration$split2$ === void 0 ? 0 : _duration$split2$,\n    _duration$split2$2 = _duration$split2[1],\n    minutes = _duration$split2$2 === void 0 ? 0 : _duration$split2$2,\n    _duration$split2$3 = _duration$split2[2],\n    seconds = _duration$split2$3 === void 0 ? 0 : _duration$split2$3;\n  return parseInt(seconds) + parseInt(minutes) * 60 + parseInt(hours) * 60 * 60;\n};\n\n// prepends \'0\' if number is less than 10\nvar fill = function fill(n) {\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.strFill)(n, 2, \'0\');\n};\n\n/**\n * @name format\n * @summary formats date to ISO Date string. Converts \'2019-10-05T16:58:06.093Z\' to \'2019-10-05 16:58\'\n * \n * @param {Date|String} date Date object or UNIX timestamp (\'2099-11-11T11:11:11.111Z\')\n * @param {Boolean}     seconds whether to inlcude seconds\n * @param {Boolean}     ms whether to include milliseonds\n * \n * @returns {String} formatted string\n */\nvar format = function format(date) {\n  var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var amPm = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDate)(date)) {\n    date = date.toISOString();\n  }\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(date)) return \'\';\n  var xDate = new Date(date);\n  var formatted = [xDate.getFullYear(), xDate.getMonth() + 1, xDate.getDate()].map(fill).join(\'-\');\n  var hours = xDate.getHours();\n  formatted += \' \' + [hours, xDate.getMinutes(), seconds && xDate.getSeconds()].filter(function (x) {\n    return x !== false;\n  }).map(fill).join(\':\');\n  if (amPm) formatted += " ".concat(hours >= 12 ? \'PM\' : \'AM\');\n  return !seconds || !ms ? formatted : "".concat(formatted, ".").concat(xDate.getMilliseconds());\n};\nvar secondsToDuration = function secondsToDuration(numSeconds) {\n  numSeconds = parseInt(numSeconds || 0);\n  var seconds = numSeconds % 60;\n  var totalMinutes = parseInt(numSeconds / 60);\n  var hours = parseInt(totalMinutes / 60);\n  return fill(hours) + \':\' + fill(totalMinutes % 60) + \':\' + fill(seconds);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvdGltZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNnRDtBQUV6QyxJQUFNRyxzQkFBc0IsR0FBRyxDQUFDO0FBQ2hDLElBQU1DLG9CQUFvQixHQUFHLGlDQUFpQyxFQUFDOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBSUMsS0FBSyxFQUFFQyxZQUFZLEVBQWlDO0VBQUEsSUFBL0JDLFFBQVEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtFQUFBLElBQUVHLFNBQVMsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtFQUN2RSxJQUFNRSxVQUFVLEdBQUcsQ0FBQ1AsS0FBSyxHQUFHQyxZQUFZLElBQUlKLHNCQUFzQjtFQUNsRSxJQUFNVyxJQUFJLEdBQUcsSUFBSUMsSUFBSSxDQUFDLENBQUM7RUFDdkI7RUFDQUQsSUFBSSxDQUFDRSxVQUFVLENBQUNGLElBQUksQ0FBQ0csVUFBVSxDQUFDLENBQUMsR0FBR0osVUFBVSxDQUFDO0VBQy9DLE9BQU8sQ0FBQ0wsUUFBUSxHQUNWTSxJQUFJLEdBQ0osR0FBQUksTUFBQSxDQUFHQyxNQUFNLENBQUNMLElBQUksQ0FBQyxFQUNaTSxTQUFTLENBQUMsQ0FBQyxFQUFFUixTQUFTLENBQUM7QUFDcEMsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNUyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBSVAsSUFBSSxFQUFFUCxZQUFZLEVBQUs7RUFDL0MsSUFBTWUsTUFBTSxHQUFHLElBQUlQLElBQUksQ0FBQ0QsSUFBSSxDQUFDLEdBQUcsSUFBSUMsSUFBSSxDQUFDLENBQUM7RUFDMUMsSUFBTVEsUUFBUSxHQUFHQyxJQUFJLENBQUNDLElBQUksQ0FBQ0gsTUFBTSxHQUFHLElBQUksR0FBR25CLHNCQUFzQixDQUFDLEdBQUdJLFlBQVk7RUFDakYsT0FBT2dCLFFBQVE7QUFDbkIsQ0FBQztBQUVNLElBQU1HLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUEsRUFBc0I7RUFBQSxJQUFsQkMsUUFBUSxHQUFBbEIsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtFQUMzQyxJQUFBbUIsZUFBQSxHQUlJRCxRQUFRLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFBQUMsZ0JBQUEsR0FBQUMsY0FBQSxDQUFBSCxlQUFBO0lBQUFJLGlCQUFBLEdBQUFGLGdCQUFBO0lBSG5CRyxLQUFLLEdBQUFELGlCQUFBLGNBQUcsQ0FBQyxHQUFBQSxpQkFBQTtJQUFBRSxrQkFBQSxHQUFBSixnQkFBQTtJQUNUSyxPQUFPLEdBQUFELGtCQUFBLGNBQUcsQ0FBQyxHQUFBQSxrQkFBQTtJQUFBRSxrQkFBQSxHQUFBTixnQkFBQTtJQUNYTyxPQUFPLEdBQUFELGtCQUFBLGNBQUcsQ0FBQyxHQUFBQSxrQkFBQTtFQUVmLE9BQU9FLFFBQVEsQ0FBQ0QsT0FBTyxDQUFDLEdBQUdDLFFBQVEsQ0FBQ0gsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHRyxRQUFRLENBQUNMLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO0FBQ2pGLENBQUM7O0FBRUQ7QUFDQSxJQUFNTSxJQUFJLEdBQUcsU0FBUEEsSUFBSUEsQ0FBR0MsQ0FBQztFQUFBLE9BQUl0QywrQ0FBTyxDQUFDc0MsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7QUFBQTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNckIsTUFBTSxHQUFHLFNBQVRBLE1BQU1BLENBQUlMLElBQUksRUFBZ0Q7RUFBQSxJQUE5Q3VCLE9BQU8sR0FBQTVCLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLEtBQUs7RUFBQSxJQUFFZ0MsRUFBRSxHQUFBaEMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsS0FBSztFQUFBLElBQUVpQyxJQUFJLEdBQUFqQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxLQUFLO0VBQ2xFLElBQUlULDhDQUFNLENBQUNjLElBQUksQ0FBQyxFQUFFO0lBQ2RBLElBQUksR0FBR0EsSUFBSSxDQUFDNkIsV0FBVyxDQUFDLENBQUM7RUFDN0I7RUFDQSxJQUFJLENBQUMxQyw2Q0FBSyxDQUFDYSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUU7RUFDM0IsSUFBTThCLEtBQUssR0FBRyxJQUFJN0IsSUFBSSxDQUFDRCxJQUFJLENBQUM7RUFDNUIsSUFBSStCLFNBQVMsR0FBRyxDQUNaRCxLQUFLLENBQUNFLFdBQVcsQ0FBQyxDQUFDLEVBQ25CRixLQUFLLENBQUNHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNwQkgsS0FBSyxDQUFDSSxPQUFPLENBQUMsQ0FBQyxDQUNsQixDQUNJQyxHQUFHLENBQUNWLElBQUksQ0FBQyxDQUNUVyxJQUFJLENBQUMsR0FBRyxDQUFDO0VBRWQsSUFBTWpCLEtBQUssR0FBR1csS0FBSyxDQUFDTyxRQUFRLENBQUMsQ0FBQztFQUM5Qk4sU0FBUyxJQUFJLEdBQUcsR0FBRyxDQUNmWixLQUFLLEVBQ0xXLEtBQUssQ0FBQ1EsVUFBVSxDQUFDLENBQUMsRUFDbEJmLE9BQU8sSUFBSU8sS0FBSyxDQUFDM0IsVUFBVSxDQUFDLENBQUMsQ0FDaEMsQ0FDSW9DLE1BQU0sQ0FBQyxVQUFBQyxDQUFDO0lBQUEsT0FBSUEsQ0FBQyxLQUFLLEtBQUs7RUFBQSxFQUFDLENBQ3hCTCxHQUFHLENBQUNWLElBQUksQ0FBQyxDQUNUVyxJQUFJLENBQUMsR0FBRyxDQUFDO0VBQ2QsSUFBSVIsSUFBSSxFQUFFRyxTQUFTLFFBQUEzQixNQUFBLENBQVFlLEtBQUssSUFBSSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBRTtFQUV0RCxPQUFPLENBQUNJLE9BQU8sSUFBSSxDQUFDSSxFQUFFLEdBQ2hCSSxTQUFTLE1BQUEzQixNQUFBLENBQ04yQixTQUFTLE9BQUEzQixNQUFBLENBQUkwQixLQUFLLENBQUNXLGVBQWUsQ0FBQyxDQUFDLENBQUU7QUFDbkQsQ0FBQztBQUVNLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUczQyxVQUFVLEVBQUk7RUFDM0NBLFVBQVUsR0FBR3lCLFFBQVEsQ0FBQ3pCLFVBQVUsSUFBSSxDQUFDLENBQUM7RUFDdEMsSUFBTXdCLE9BQU8sR0FBR3hCLFVBQVUsR0FBRyxFQUFFO0VBQy9CLElBQU00QyxZQUFZLEdBQUduQixRQUFRLENBQUN6QixVQUFVLEdBQUcsRUFBRSxDQUFDO0VBQzlDLElBQU1vQixLQUFLLEdBQUdLLFFBQVEsQ0FBQ21CLFlBQVksR0FBRyxFQUFFLENBQUM7RUFDekMsT0FBT2xCLElBQUksQ0FBQ04sS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHTSxJQUFJLENBQUNrQixZQUFZLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHbEIsSUFBSSxDQUFDRixPQUFPLENBQUM7QUFDNUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvdGVtLW1lY2Nhbm8tdWkvLi9zcmMvdXRpbHMvdGltZS5qcz9jYWRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBEYXRlIGZvcm1hdHRpbmcgZXRjLlxuICovXG5pbXBvcnQgeyBpc0RhdGUsIGlzU3RyLCBzdHJGaWxsIH0gZnJvbSAnLi91dGlscydcblxuZXhwb3J0IGNvbnN0IEJMT0NLX0RVUkFUSU9OX1NFQ09ORFMgPSA0XG5leHBvcnQgY29uc3QgQkxPQ0tfRFVSQVRJT05fUkVHRVggPSAvXihcXGR7Mn0pOlswLTVdWzAtOV06WzAtNV1bMC05XSQvIC8vIHZhbGlkIGR1cmF0aW9uIHVwIHRvIDk5OjU5OjU5XG5cbi8qKlxuICogQG5hbWUgICAgYmxvY2tUb0RhdGVcbiAqIEBzdW1tYXJ5IGNvbnZlcnRzIGJsb2NrIG51bWJlciB0byBkYXRlIHJlbGF0aXZlIHRvIHRoZSBzdXBwbGllZCBAY3VycmVudEJsb2NrXG4gKiBcbiAqIEBwYXJhbSAgIHtOdW1iZXJ9ICAgIGJsb2NrICAgICAgICAgICBibG9jayBudW1iZXIgdG8gZ2V0IHRoZSB0aW1lc3RhbXAgb2ZcbiAqIEBwYXJhbSAgIHtOdW1iZXJ9ICAgIGN1cnJlbnRCbG9jayAgICBjdXJyZW50IGJsb2NrIG51bWJlclxuICogQHBhcmFtICAge0Jvb2xlYW59ICAgYXNTdHJpbmcgICAgICAgIChvcHRpb25hbCkgd2hldGhlciB0byByZXR1cm4gZm9ybWF0dGVkIElTTyBkYXRlIHN0cmluZyBvciBEYXRlIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQ6IHRydWVcbiAqIEBwYXJhbSAgIHtOdW1iZXJ9ICAgIHN0ckxlbmd0aCAgICAgICAob3B0aW9uYWwpIG9ubHkgd2hlbiBhc1N0cmluZyBpcyB0cnVlXG4gKiBcbiAqIEByZXR1cm5zIHtTdHJpbmd8RGF0ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGJsb2NrVG9EYXRlID0gKGJsb2NrLCBjdXJyZW50QmxvY2ssIGFzU3RyaW5nID0gdHJ1ZSwgc3RyTGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgbnVtU2Vjb25kcyA9IChibG9jayAtIGN1cnJlbnRCbG9jaykgKiBCTE9DS19EVVJBVElPTl9TRUNPTkRTXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKClcbiAgICAvLyBhZGQgb3Igc3Vic3RyYWN0IGR1cmF0aW9uIHRvIHRoZSBAZGF0ZSB0byBnZXQgdG8gdGhlIHRpbWVzdGFtcCBvZiB0aGUgQGJsb2NrXG4gICAgZGF0ZS5zZXRTZWNvbmRzKGRhdGUuZ2V0U2Vjb25kcygpICsgbnVtU2Vjb25kcylcbiAgICByZXR1cm4gIWFzU3RyaW5nXG4gICAgICAgID8gZGF0ZVxuICAgICAgICA6IGAke2Zvcm1hdChkYXRlKX1gXG4gICAgICAgICAgICAuc3Vic3RyaW5nKDAsIHN0ckxlbmd0aClcbn1cblxuLyoqXG4gKiBAbmFtZSAgICBkYXRlVG9CbG9ja1xuICogQHN1bW1hcnkgY29udmVydCBkYXRlIHRvIChlc3RpbWF0ZWQpIGJsb2NrIG51bWJlclxuICogXG4gKiBAcGFyYW0gICB7RGF0ZXxTdHJpbmd9ICAgZGF0ZVxuICogQHBhcmFtICAge051bWJlcn0gICAgICAgIGN1cnJlbnRCbG9jayBcbiAqIFxuICogQHJldHVybnMge051bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGVUb0Jsb2NrID0gKGRhdGUsIGN1cnJlbnRCbG9jaykgPT4ge1xuICAgIGNvbnN0IGRhdGVNUyA9IG5ldyBEYXRlKGRhdGUpIC0gbmV3IERhdGUoKVxuICAgIGNvbnN0IGJsb2NrTnVtID0gTWF0aC5jZWlsKGRhdGVNUyAvIDEwMDAgLyBCTE9DS19EVVJBVElPTl9TRUNPTkRTKSArIGN1cnJlbnRCbG9ja1xuICAgIHJldHVybiBibG9ja051bVxufVxuXG5leHBvcnQgY29uc3QgZHVyYXRpb25Ub1NlY29uZHMgPSAoZHVyYXRpb24gPSAnJykgPT4ge1xuICAgIGNvbnN0IFtcbiAgICAgICAgaG91cnMgPSAwLFxuICAgICAgICBtaW51dGVzID0gMCxcbiAgICAgICAgc2Vjb25kcyA9IDBcbiAgICBdID0gZHVyYXRpb24uc3BsaXQoJzonKVxuICAgIHJldHVybiBwYXJzZUludChzZWNvbmRzKSArIHBhcnNlSW50KG1pbnV0ZXMpICogNjAgKyBwYXJzZUludChob3VycykgKiA2MCAqIDYwXG59XG5cbi8vIHByZXBlbmRzICcwJyBpZiBudW1iZXIgaXMgbGVzcyB0aGFuIDEwXG5jb25zdCBmaWxsID0gbiA9PiBzdHJGaWxsKG4sIDIsICcwJylcblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBzdW1tYXJ5IGZvcm1hdHMgZGF0ZSB0byBJU08gRGF0ZSBzdHJpbmcuIENvbnZlcnRzICcyMDE5LTEwLTA1VDE2OjU4OjA2LjA5M1onIHRvICcyMDE5LTEwLTA1IDE2OjU4J1xuICogXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfSBkYXRlIERhdGUgb2JqZWN0IG9yIFVOSVggdGltZXN0YW1wICgnMjA5OS0xMS0xMVQxMToxMToxMS4xMTFaJylcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgIHNlY29uZHMgd2hldGhlciB0byBpbmxjdWRlIHNlY29uZHNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgIG1zIHdoZXRoZXIgdG8gaW5jbHVkZSBtaWxsaXNlb25kc1xuICogXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmb3JtYXR0ZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtYXQgPSAoZGF0ZSwgc2Vjb25kcyA9IGZhbHNlLCBtcyA9IGZhbHNlLCBhbVBtID0gZmFsc2UpID0+IHtcbiAgICBpZiAoaXNEYXRlKGRhdGUpKSB7XG4gICAgICAgIGRhdGUgPSBkYXRlLnRvSVNPU3RyaW5nKClcbiAgICB9XG4gICAgaWYgKCFpc1N0cihkYXRlKSkgcmV0dXJuICcnXG4gICAgY29uc3QgeERhdGUgPSBuZXcgRGF0ZShkYXRlKVxuICAgIGxldCBmb3JtYXR0ZWQgPSBbXG4gICAgICAgIHhEYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgIHhEYXRlLmdldE1vbnRoKCkgKyAxLFxuICAgICAgICB4RGF0ZS5nZXREYXRlKCksXG4gICAgXVxuICAgICAgICAubWFwKGZpbGwpXG4gICAgICAgIC5qb2luKCctJylcblxuICAgIGNvbnN0IGhvdXJzID0geERhdGUuZ2V0SG91cnMoKVxuICAgIGZvcm1hdHRlZCArPSAnICcgKyBbXG4gICAgICAgIGhvdXJzLFxuICAgICAgICB4RGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgIHNlY29uZHMgJiYgeERhdGUuZ2V0U2Vjb25kcygpLFxuICAgIF1cbiAgICAgICAgLmZpbHRlcih4ID0+IHggIT09IGZhbHNlKVxuICAgICAgICAubWFwKGZpbGwpXG4gICAgICAgIC5qb2luKCc6JylcbiAgICBpZiAoYW1QbSkgZm9ybWF0dGVkICs9IGAgJHtob3VycyA+PSAxMiA/ICdQTScgOiAnQU0nfWBcblxuICAgIHJldHVybiAhc2Vjb25kcyB8fCAhbXNcbiAgICAgICAgPyBmb3JtYXR0ZWRcbiAgICAgICAgOiBgJHtmb3JtYXR0ZWR9LiR7eERhdGUuZ2V0TWlsbGlzZWNvbmRzKCl9YFxufVxuXG5leHBvcnQgY29uc3Qgc2Vjb25kc1RvRHVyYXRpb24gPSBudW1TZWNvbmRzID0+IHtcbiAgICBudW1TZWNvbmRzID0gcGFyc2VJbnQobnVtU2Vjb25kcyB8fCAwKVxuICAgIGNvbnN0IHNlY29uZHMgPSBudW1TZWNvbmRzICUgNjBcbiAgICBjb25zdCB0b3RhbE1pbnV0ZXMgPSBwYXJzZUludChudW1TZWNvbmRzIC8gNjApXG4gICAgY29uc3QgaG91cnMgPSBwYXJzZUludCh0b3RhbE1pbnV0ZXMgLyA2MClcbiAgICByZXR1cm4gZmlsbChob3VycykgKyAnOicgKyBmaWxsKHRvdGFsTWludXRlcyAlIDYwKSArICc6JyArIGZpbGwoc2Vjb25kcylcbn0iXSwibmFtZXMiOlsiaXNEYXRlIiwiaXNTdHIiLCJzdHJGaWxsIiwiQkxPQ0tfRFVSQVRJT05fU0VDT05EUyIsIkJMT0NLX0RVUkFUSU9OX1JFR0VYIiwiYmxvY2tUb0RhdGUiLCJibG9jayIsImN1cnJlbnRCbG9jayIsImFzU3RyaW5nIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic3RyTGVuZ3RoIiwibnVtU2Vjb25kcyIsImRhdGUiLCJEYXRlIiwic2V0U2Vjb25kcyIsImdldFNlY29uZHMiLCJjb25jYXQiLCJmb3JtYXQiLCJzdWJzdHJpbmciLCJkYXRlVG9CbG9jayIsImRhdGVNUyIsImJsb2NrTnVtIiwiTWF0aCIsImNlaWwiLCJkdXJhdGlvblRvU2Vjb25kcyIsImR1cmF0aW9uIiwiX2R1cmF0aW9uJHNwbGl0Iiwic3BsaXQiLCJfZHVyYXRpb24kc3BsaXQyIiwiX3NsaWNlZFRvQXJyYXkiLCJfZHVyYXRpb24kc3BsaXQyJCIsImhvdXJzIiwiX2R1cmF0aW9uJHNwbGl0MiQyIiwibWludXRlcyIsIl9kdXJhdGlvbiRzcGxpdDIkMyIsInNlY29uZHMiLCJwYXJzZUludCIsImZpbGwiLCJuIiwibXMiLCJhbVBtIiwidG9JU09TdHJpbmciLCJ4RGF0ZSIsImZvcm1hdHRlZCIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwibWFwIiwiam9pbiIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImZpbHRlciIsIngiLCJnZXRNaWxsaXNlY29uZHMiLCJzZWNvbmRzVG9EdXJhdGlvbiIsInRvdGFsTWludXRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/time.js\n')},"./src/utils/totem-polkadot-js-types-v3.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  "LockIdentifier": "[u8; 8]",\n  "BalanceLockV1": {\n    "id": "LockIdentifier",\n    "amount": "Balance",\n    "until": "BlockNumber",\n    "reasons": "WithdrawReasons"\n  },\n  "BalanceLockV1<[u8; 8],u64,u64,i8>": "BalanceLockV1",\n  "AcceptAssignedStatus": "bool",\n  "Account": "u64",\n  "AccountOf": "Account",\n  "AccountBalance": "i128",\n  "AccountBalanceOf": "i128",\n  "AccountBalanceOf<T>": "i128",\n  // "ApprovalStatus": "u16",\n  "ApprovalStatus": {\n    "_enum": {\n      "Submitted": "u16",\n      "Accepted": "u16",\n      "Rejected": "u16"\n    }\n  },\n  "Archival": "bool",\n  "Balance": "u128",\n  "BanStatus": "bool",\n  "BoxNonce": "Vec<u8>",\n  "ComparisonAmounts": "u128",\n  "CurrencyBalanceOf": "Balance",\n  "Data": "Vec<u8>",\n  "DeletedProject": "Hash",\n  "Ed25519signature": "H512",\n  "EncryptNonce": "u64",\n  "EncryptPublicKey": "H256",\n  "Indicator": {\n    "_enum": {\n      "Debit": "u8",\n      "Credit": "u8"\n    }\n  },\n  "LedgerBalance": "i128",\n  "LockStatus": "bool",\n  "NumberOfBreaks": "u16",\n  "NumberOfBlocks": "u64",\n  "PostingPeriod": "u16",\n  "PostingIndex": "u128",\n  "ProjectHash": "Hash",\n  "ProjectStatus": "u16",\n  "OrderStatus": "u16",\n  "RandomHashedData": "Hash",\n  "ReasonCode": "u16",\n  "ReasonCodeType": "u16",\n  "RecordType": "u16",\n  "StartOrEndBlockNumber": "u64",\n  "Status": "u16",\n  "StatusOfTimeRecord": {\n    "_enum": {\n      "Draft": "u16",\n      "Submitted": "u16",\n      "Disputed": "u16",\n      "Rejected": "u16",\n      "Accepted": "u16",\n      "Invoiced": "u16",\n      "Blocked": "u16"\n    }\n  },\n  "SignedBy": "H256",\n  "TimeReferenceHash": "Hash",\n  "TimeHash": "TimeReferenceHash",\n  "UnLocked": "bool",\n  "UserNameHash": "Hash",\n  "EncryptedVerificationData": {\n    "key": "EncryptPublicKey",\n    "data": "Data"\n  },\n  "EncryptedVerificationData<EncryptPublicKey, Data>": "EncryptedVerificationData",\n  "ReasonCodeStruct": {\n    "ReasonCodeKey": "ReasonCode",\n    "ReasonCodeTypeKey": "ReasonCodeType"\n  },\n  "ReasonCodeStruct<ReasonCode,ReasonCodeType>": "ReasonCodeStruct",\n  "SignedData": {\n    "user_hash": "UserNameHash",\n    "pub_enc_key": "EncryptPublicKey",\n    "pub_sign_key": "SignedBy",\n    "nonce": "EncryptNonce"\n  },\n  "SignedData<UserNameHash, EncryptPublicKey, SignedBy, EncryptNonce>": "SignedData",\n  "BannedStruct": {\n    "BanStatusKey": "BanStatus",\n    "ReasonCodeStructKey": "ReasonCodeStruct"\n  },\n  "BannedStruct<BanStatus,ReasonCodeStruct>": "BannedStruct",\n  "Timekeeper": {\n    "worker": "AccountId",\n    "project_hash": "Hash",\n    "total_blocks": "NumberOfBlocks",\n    "locked_status": "LockStatus",\n    "locked_reason": "ReasonCodeStruct",\n    "submit_status": "StatusOfTimeRecord",\n    "reason_code": "ReasonCodeStruct",\n    "posting_period": "PostingPeriod",\n    "start_block": "StartOrEndBlockNumber",\n    "end_block": "StartOrEndBlockNumber",\n    "nr_of_breaks": "NumberOfBreaks"\n  },\n  "Timekeeper<AccountId,Hash,NumberOfBlocks,LockStatus,\\nStatusOfTimeRecord,ReasonCodeStruct,PostingPeriod,StartOrEndBlockNumber,\\nNumberOfBreaks>": "Timekeeper",\n  "OrderHeader": {\n    "owner": "AccountId",\n    "fulfiller": "AccountId",\n    "approver": "AccountId",\n    "orderStatus": "u16",\n    "approvalStatus": "u16",\n    "isSell": "u16",\n    "amountXTX": "i128",\n    "isMarket": "bool",\n    "orderType": "u16",\n    "deadline": "u64",\n    "dueDate": "u64"\n  },\n  "OrderHeader<AccountId,AccountId,AccountId,u16,u16,u16,i128,bool,u16,u64,u64>": "OrderHeader",\n  "OrderItem": {\n    "product": "Hash",\n    "unitPrice": "i128",\n    "quantity": "u128",\n    "unitOfMeasure": "u16"\n  },\n  "OrderItem<Hash,i128,u128,u16>": "OrderItem",\n  "TXKeysL": {\n    "recordId": "Hash",\n    "parentId": "Hash",\n    "bonsaiToken": "Hash",\n    "txID": "Hash"\n  },\n  "TXKeysL<Hash,Hash,Hash,Hash>": "TXKeysL",\n  "TXKeysM": {\n    "recordId": "Hash",\n    "bonsaiToken": "Hash",\n    "txID": "Hash"\n  },\n  "TXKeysM<Hash,Hash,Hash>": "TXKeysM",\n  "TXKeysS": {\n    "bonsaiToken": "Hash",\n    "txID": "Hash"\n  },\n  "TXKeysS<Hash,Hash>": "TXKeysS",\n  "TXKeysT": {\n    "txID": \'Hash\'\n  },\n  \'TXKeysT<Hash>\': \'TXKeysT\',\n  "ProjectHashRef": "H256"\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/totem-polkadot-js-types-v3.js\n')},"./src/utils/totem-polkadot-js-types.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Updates to this file should always check the change log for compatibility issues\n// https://raw.githubusercontent.com/polkadot-js/api/master/CHANGELOG.md\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  // "Digest": "Hash",\n  "Vote": "i8",\n  "ReferendumIndex": "u32",\n  "VoteOf": {\n    "referendumIndex": "ReferendumIndex",\n    "account": "AccountId"\n  },\n  "OpenTip": "OpenTipTo225",\n  // ## 1.22.1 Jun 30, 2020\n  "DispatchInfo": "DispatchInfoTo244",\n  // ## 1.14.1 May 14, 2020\n  "Weight": "u32",\n  // ## 1.11.1 Apr 21, 2020\n  "StakingLedger": "StakingLedgerTo240",\n  // ## 1.10.1 Apr 13, 2020\n  // "Address": "AccountId", // Comments in Riot Channel\n  "Address": "GenericAddress",\n  "LookupSource": "GenericAddress",\n  "DispatchResult": "DispatchResultTo198",\n  // from PolkadotJS types\n  "EventRecord": "EventRecordTo76",\n  // from PolkadotJS types\n  // "Event": "Vec<EventRecord>", // Comments in Riot Channel\n  // "Storage": "Vec<StorageKey>", // Comments in Riot Channel\n  WithdrawReasons: {\n    _set: {\n      TransactionPayment: 1,\n      Transfer: 2,\n      Reserve: 4,\n      Fee: 8,\n      Tip: 16\n    }\n  },\n  "LockIdentifier": "[u8; 8]",\n  // Added for compatibility v1\n  BalanceLockV1: {\n    id: \'LockIdentifier\',\n    amount: \'Balance\',\n    until: \'BlockNumber\',\n    reasons: \'WithdrawReasons\'\n  },\n  "BalanceLockV1<[u8; 8],u64,u64,i8>": "BalanceLockV1",\n  // Added for compatibility v1\n  // "Locks": "Vec<BalanceLockV1<Vec<u8>,u64,u64,i8>>", // Added for compatibility v1\n  "AcceptAssignedStatus": "bool",\n  "Account": "u64",\n  "AccountOf": "Account",\n  "AccountBalance": "i128",\n  "AccountBalanceOf": "i128",\n  "AccountBalanceOf<T>": "i128",\n  "ApprovalStatus": "u16",\n  "Archival": "bool",\n  "Balance": "u128",\n  "BanStatus": "bool",\n  "BoxNonce": "Vec<u8>",\n  "ComparisonAmounts": "u128",\n  "CurrencyBalanceOf": "Balance",\n  "Data": "Vec<u8>",\n  "DeletedProject": "Hash",\n  "Ed25519signature": "H512",\n  "EncryptNonce": "u64",\n  "EncryptPublicKey": "H256",\n  "Indicator": "bool",\n  "LedgerBalance": "i128",\n  "LockStatus": "bool",\n  "NumberOfBreaks": "u16",\n  "NumberOfBlocks": "u64",\n  "PostingPeriod": "u16",\n  "PostingIndex": "u128",\n  "ProjectHash": "Hash",\n  "ProjectStatus": "u16",\n  // "buyOrSell": "u16",\n  // "amount": "i128",\n  // "openClosed": "bool",\n  // "orderType": "u16",\n  // "deadline": "u64",\n  // "dueDate": "u64",\n  // "OrderSubHeader": {\n  //     "buy_or_sell": "u16",\n  //     "amount": "i128",\n  //     "open_closed": "bool",\n  //     "order_type": "u16",\n  //     "deadline": "u64",\n  //     "due_date": "u64"\n  // },\n  // "Product": "Hash",\n  // "UnitPrice": "i128",\n  // "Quantity": "u128",\n  // "UnitOfMeasure": "u16",\n  // "ItemDetailsStruct": {\n  //     "Product": "Hash",\n  //     "UnitPrice": "i128",\n  //     "Quantity": "u128",\n  //     "UnitOfMeasure": "u16"\n  // },\n  // "ItemDetailsStruct<Hash,i128,u128,u16>": "ItemDetailsStruct",\n  // "OrderItem": "ItemDetailsStruct",\n  "OrderStatus": "u16",\n  "RandomHashedData": "Hash",\n  "ReasonCode": "u16",\n  "ReasonCodeType": "u16",\n  "RecordType": "u16",\n  "StartOrEndBlockNumber": "u64",\n  "Status": "u16",\n  "StatusOfTimeRecord": "u16",\n  "SignedBy": "H256",\n  "TimeReferenceHash": "Hash",\n  "TimeHash": "TimeReferenceHash",\n  "UnLocked": "bool",\n  "UserNameHash": "Hash",\n  "EncryptedVerificationData": {\n    "key": "EncryptPublicKey",\n    "data": "Data"\n  },\n  "EncryptedVerificationData<EncryptPublicKey, Data>": "EncryptedVerificationData",\n  "ReasonCodeStruct": {\n    "ReasonCodeKey": "ReasonCode",\n    "ReasonCodeTypeKey": "ReasonCodeType"\n  },\n  "ReasonCodeStruct<ReasonCode,ReasonCodeType>": "ReasonCodeStruct",\n  "SignedData": {\n    "user_hash": "UserNameHash",\n    "pub_enc_key": "EncryptPublicKey",\n    "pub_sign_key": "SignedBy",\n    "nonce": "EncryptNonce"\n  },\n  "SignedData<UserNameHash, EncryptPublicKey, SignedBy, EncryptNonce>": "SignedData",\n  "BannedStruct": {\n    "BanStatusKey": "BanStatus",\n    "ReasonCodeStructKey": "ReasonCodeStruct"\n  },\n  "BannedStruct<BanStatus,ReasonCodeStruct>": "BannedStruct",\n  "Timekeeper": {\n    "worker": "AccountId",\n    "project_hash": "Hash",\n    "total_blocks": "NumberOfBlocks",\n    "locked_status": "LockStatus",\n    "locked_reason": "ReasonCodeStruct",\n    "submit_status": "StatusOfTimeRecord",\n    "reason_code": "ReasonCodeStruct",\n    "posting_period": "PostingPeriod",\n    "start_block": "StartOrEndBlockNumber",\n    "end_block": "StartOrEndBlockNumber",\n    "nr_of_breaks": "NumberOfBreaks"\n  },\n  "Timekeeper<AccountId,Hash,NumberOfBlocks,LockStatus,\\nStatusOfTimeRecord,ReasonCodeStruct,PostingPeriod,StartOrEndBlockNumber,\\nNumberOfBreaks>": "Timekeeper",\n  /*\n   * Order + Task related types\n   */\n  OrderHeader: {\n    owner: \'AccountId\',\n    fulfiller: \'AccountId\',\n    approver: \'AccountId\',\n    orderStatus: \'u16\',\n    approvalStatus: \'u16\',\n    isSell: \'u16\',\n    amountXTX: \'i128\',\n    isMarket: \'bool\',\n    orderType: \'u16\',\n    deadline: \'u64\',\n    dueDate: \'u64\'\n  },\n  \'OrderHeader<AccountId,AccountId,AccountId,u16,u16,u16,i128,bool,u16,u64,u64>\': \'OrderHeader\',\n  OrderItem: {\n    product: \'Hash\',\n    unitPrice: \'i128\',\n    quantity: \'u128\',\n    unitOfMeasure: \'u16\'\n  },\n  \'OrderItem<Hash,i128,u128,u16>\': \'OrderItem\',\n  TXKeysL: {\n    recordId: \'Hash\',\n    parentId: \'Hash\',\n    bonsaiToken: \'Hash\',\n    txID: \'Hash\'\n  },\n  \'TXKeysL<Hash,Hash,Hash,Hash>\': \'TXKeysL\',\n  TXKeysM: {\n    recordId: \'Hash\',\n    bonsaiToken: \'Hash\',\n    txID: \'Hash\'\n  },\n  \'TXKeysM<Hash,Hash,Hash>\': \'TXKeysM\',\n  TXKeysS: {\n    bonsaiToken: \'Hash\',\n    txID: \'Hash\'\n  },\n  \'TXKeysS<Hash,Hash>\': \'TXKeysS\',\n  TXKeysT: {\n    txID: \'Hash\'\n  },\n  \'TXKeysT<Hash>\': \'TXKeysT\',\n  // deperecated\n  "ProjectHashRef": "H256"\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/totem-polkadot-js-types.js\n')},"./src/utils/twitterHelper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar TwitterHelper = /*#__PURE__*/function () {\n  function TwitterHelper() {\n    _classCallCheck(this, TwitterHelper);\n    this.config = {\n      version: \'1.1\',\n      // version \'1.1\' is the default (change for v2)\n      extension: true,\n      // true is the default (this must be set to false for v2 endpoints)\n      // for app authentication\n      bearer_token: "MISSING_ENV_VAR".Twitter_Bearer_Token\n      // for user authentication: not implemented\n      // consumer_key: process.env.REACT_APP_Twitter_Consumer_Key,\n      // consumer_secret: process.env.REACT_APP_Twitter_Consumer_Secret,\n      // access_token_key: process.env.REACT_APP_Twitter_Access_Token_Key,\n      // access_token_secret: process.env.REACT_APP_Twitter_Access_Token_Secret,\n    };\n  }\n  _createClass(TwitterHelper, [{\n    key: "getClient",\n    value: function () {\n      var _getClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var Twitter, appClient, isApp;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.client) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt("return", this.client);\n            case 2:\n              Twitter = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module \'twitter-lite\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()));\n              appClient = new Twitter(this.config);\n              isApp = !!this.config.bearer_token;\n              if (!isApp) {\n                _context.next = 8;\n                break;\n              }\n              this.client = appClient;\n              return _context.abrupt("return", this.client);\n            case 8:\n              throw new Error(\'Not implemented\');\n            case 9:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getClient() {\n        return _getClient.apply(this, arguments);\n      }\n      return getClient;\n    }()\n    /**\n     * @name    getFollower\n     * @summary get Twitter follower information\n     * \n     * @param   {String} userHandle     user handle\n     * @param   {String} followerHandle follower handle\n     * \n     * @returns {Boolean}\n     */\n  }, {\n    key: "getFollower",\n    value: function () {\n      var _getFollower = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userHandle, followerHandle) {\n        var params, _yield$this$client$ge, _yield$this$client$ge2, relationship;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getClient();\n            case 2:\n              params = {\n                source_screen_name: userHandle,\n                target_screen_name: followerHandle\n              };\n              _context2.prev = 3;\n              _context2.next = 6;\n              return this.client.get(\'friendships/show\', params);\n            case 6:\n              _yield$this$client$ge = _context2.sent;\n              _yield$this$client$ge2 = _yield$this$client$ge.relationship;\n              relationship = _yield$this$client$ge2 === void 0 ? {} : _yield$this$client$ge2;\n              return _context2.abrupt("return", relationship.target || {});\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2["catch"](3);\n              throw new Error(!_context2.t0.errors ? _context2.t0 : this.joinTwitterErrors(_context2.t0));\n            case 15:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[3, 12]]);\n      }));\n      function getFollower(_x, _x2) {\n        return _getFollower.apply(this, arguments);\n      }\n      return getFollower;\n    }()\n    /**\n     * @name    getAllFollowerIds\n     * @summary get Twitter list of user IDs (not Twitter handles) of followers\n     * \n     * @param   {String} userHandle \n     * \n     * @returns {Boolean}\n     */\n  }, {\n    key: "getAllFollowerIds",\n    value: function () {\n      var _getAllFollowerIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var userHandle,\n          limit,\n          params,\n          followers,\n          result,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              userHandle = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : \'\';\n              _context3.next = 3;\n              return this.getClient();\n            case 3:\n              limit = 5000;\n              params = {\n                count: limit,\n                screen_name: userHandle,\n                stringify_ids: true\n              };\n              followers = [];\n              result = {};\n              _context3.prev = 7;\n            case 8:\n              _context3.next = 10;\n              return this.client.get(\'followers/ids\', params);\n            case 10:\n              result = _context3.sent;\n              params.cursor = result.next_cursor;\n              followers.push.apply(followers, _toConsumableArray(result.ids));\n            case 13:\n              if (result.ids.length === limit) {\n                _context3.next = 8;\n                break;\n              }\n            case 14:\n              _context3.next = 19;\n              break;\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3["catch"](7);\n              throw new Error(!_context3.t0.errors ? _context3.t0 : this.joinTwitterErrors(_context3.t0));\n            case 19:\n              return _context3.abrupt("return", followers);\n            case 20:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[7, 16]]);\n      }));\n      function getAllFollowerIds() {\n        return _getAllFollowerIds.apply(this, arguments);\n      }\n      return getAllFollowerIds;\n    }()\n  }, {\n    key: "getFollowersList",\n    value: function () {\n      var _getFollowersList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(userHanlde) {\n        var count,\n          cursor,\n          skipStatus,\n          include_user_entities,\n          params,\n          result,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              count = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 200;\n              cursor = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : -1;\n              skipStatus = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : true;\n              include_user_entities = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : false;\n              _context4.next = 6;\n              return this.getClient();\n            case 6:\n              params = {\n                count: count,\n                cursor: cursor,\n                include_user_entities: include_user_entities,\n                screen_name: userHanlde,\n                skipStatus: skipStatus\n              };\n              _context4.prev = 7;\n              _context4.next = 10;\n              return this.client.get(\'followers/list\', params);\n            case 10:\n              result = _context4.sent;\n              return _context4.abrupt("return", result || {});\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4["catch"](7);\n              throw new Error(!_context4.t0.errors ? _context4.t0 : this.joinTwitterErrors(_context4.t0));\n            case 17:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[7, 14]]);\n      }));\n      function getFollowersList(_x3) {\n        return _getFollowersList.apply(this, arguments);\n      }\n      return getFollowersList;\n    }()\n    /**\n     * @name    getTweetById\n     * @summary retrieve a tweet with full text by tweet ID\n     * \n     * @param   {String} id \n     * \n     * @returns {Object}\n     */\n  }, {\n    key: "getTweetById",\n    value: function () {\n      var _getTweetById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(id) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.getClient();\n            case 2:\n              params = {\n                id: id,\n                tweet_mode: \'extended\'\n              };\n              _context5.prev = 3;\n              _context5.next = 6;\n              return this.client.get(\'statuses/show\', params);\n            case 6:\n              result = _context5.sent;\n              return _context5.abrupt("return", result);\n            case 10:\n              _context5.prev = 10;\n              _context5.t0 = _context5["catch"](3);\n              throw new Error(!_context5.t0.errors ? _context5.t0 : this.joinTwitterErrors(_context5.t0));\n            case 13:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[3, 10]]);\n      }));\n      function getTweetById(_x4) {\n        return _getTweetById.apply(this, arguments);\n      }\n      return getTweetById;\n    }()\n    /**\n     * @name    getUser\n     * @summary get Twitter user data\n     * \n     * @param   {String} handleOrId\n     * \n     * @returns {Object}\n     */\n  }, {\n    key: "getUser",\n    value: function () {\n      var _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(handleOrId) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.getClient();\n            case 2:\n              params = {\n                \'screen_name\': handleOrId\n              };\n              _context6.prev = 3;\n              _context6.next = 6;\n              return this.client.get(\'users/show\', params);\n            case 6:\n              result = _context6.sent;\n              return _context6.abrupt("return", result);\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6["catch"](3);\n              throw new Error(!_context6.t0.errors ? _context6.t0 : this.joinTwitterErrors(_context6.t0));\n            case 13:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[3, 10]]);\n      }));\n      function getUser(_x5) {\n        return _getUser.apply(this, arguments);\n      }\n      return getUser;\n    }()\n  }, {\n    key: "joinTwitterErrors",\n    value: function joinTwitterErrors(err) {\n      return err.message || (err.errors || []).map(function (e) {\n        return e.message;\n      }).filter(Boolean).join(\' \');\n    }\n  }]);\n  return TwitterHelper;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new TwitterHelper());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/twitterHelper.js\n')},"./src/utils/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "EMAIL_REGEX": () => (/* binding */ EMAIL_REGEX),\n/* harmony export */   "HASH_REGEX": () => (/* binding */ HASH_REGEX),\n/* harmony export */   "HEX_REGEX": () => (/* binding */ HEX_REGEX),\n/* harmony export */   "URL_REGEX": () => (/* binding */ URL_REGEX),\n/* harmony export */   "arrMapSlice": () => (/* binding */ arrMapSlice),\n/* harmony export */   "arrReadOnly": () => (/* binding */ arrReadOnly),\n/* harmony export */   "arrReverse": () => (/* binding */ arrReverse),\n/* harmony export */   "arrSearch": () => (/* binding */ arrSearch),\n/* harmony export */   "arrSort": () => (/* binding */ arrSort),\n/* harmony export */   "arrUnique": () => (/* binding */ arrUnique),\n/* harmony export */   "className": () => (/* binding */ className),\n/* harmony export */   "clearClutter": () => (/* binding */ clearClutter),\n/* harmony export */   "copyToClipboard": () => (/* binding */ copyToClipboard),\n/* harmony export */   "deferred": () => (/* binding */ deferred),\n/* harmony export */   "downloadFile": () => (/* binding */ downloadFile),\n/* harmony export */   "escapeStringRegexp": () => (/* binding */ escapeStringRegexp),\n/* harmony export */   "fallbackIfFails": () => (/* binding */ fallbackIfFails),\n/* harmony export */   "generateHash": () => (/* binding */ generateHash),\n/* harmony export */   "getFuncParams": () => (/* binding */ getFuncParams),\n/* harmony export */   "getKeys": () => (/* binding */ getKeys),\n/* harmony export */   "getUrlParam": () => (/* binding */ getUrlParam),\n/* harmony export */   "hasValue": () => (/* binding */ hasValue),\n/* harmony export */   "icons": () => (/* binding */ icons),\n/* harmony export */   "isAddress": () => (/* binding */ isAddress),\n/* harmony export */   "isArr": () => (/* binding */ isArr),\n/* harmony export */   "isArr2D": () => (/* binding */ isArr2D),\n/* harmony export */   "isArrLike": () => (/* binding */ isArrLike),\n/* harmony export */   "isAsyncFn": () => (/* binding */ isAsyncFn),\n/* harmony export */   "isBond": () => (/* binding */ isBond),\n/* harmony export */   "isBool": () => (/* binding */ isBool),\n/* harmony export */   "isDate": () => (/* binding */ isDate),\n/* harmony export */   "isDefined": () => (/* binding */ isDefined),\n/* harmony export */   "isETHAddress": () => (/* binding */ isETHAddress),\n/* harmony export */   "isError": () => (/* binding */ isError),\n/* harmony export */   "isFn": () => (/* binding */ isFn),\n/* harmony export */   "isHash": () => (/* binding */ isHash),\n/* harmony export */   "isHex": () => (/* binding */ isHex),\n/* harmony export */   "isInteger": () => (/* binding */ isInteger),\n/* harmony export */   "isMap": () => (/* binding */ isMap),\n/* harmony export */   "isNodeJS": () => (/* binding */ isNodeJS),\n/* harmony export */   "isObj": () => (/* binding */ isObj),\n/* harmony export */   "isObjArr": () => (/* binding */ isObjArr),\n/* harmony export */   "isObjMap": () => (/* binding */ isObjMap),\n/* harmony export */   "isPositiveInteger": () => (/* binding */ isPositiveInteger),\n/* harmony export */   "isPositiveNumber": () => (/* binding */ isPositiveNumber),\n/* harmony export */   "isPromise": () => (/* binding */ isPromise),\n/* harmony export */   "isSet": () => (/* binding */ isSet),\n/* harmony export */   "isStr": () => (/* binding */ isStr),\n/* harmony export */   "isSubjectLike": () => (/* binding */ isSubjectLike),\n/* harmony export */   "isTouchable": () => (/* binding */ isTouchable),\n/* harmony export */   "isURL": () => (/* binding */ isURL),\n/* harmony export */   "isUint8Arr": () => (/* binding */ isUint8Arr),\n/* harmony export */   "isValidDate": () => (/* binding */ isValidDate),\n/* harmony export */   "isValidNumber": () => (/* binding */ isValidNumber),\n/* harmony export */   "isValidURL": () => (/* binding */ isValidURL),\n/* harmony export */   "mapFilter": () => (/* binding */ mapFilter),\n/* harmony export */   "mapFindByKey": () => (/* binding */ mapFindByKey),\n/* harmony export */   "mapJoin": () => (/* binding */ mapJoin),\n/* harmony export */   "mapSearch": () => (/* binding */ mapSearch),\n/* harmony export */   "mapSort": () => (/* binding */ mapSort),\n/* harmony export */   "objClean": () => (/* binding */ objClean),\n/* harmony export */   "objCopy": () => (/* binding */ objCopy),\n/* harmony export */   "objCreate": () => (/* binding */ objCreate),\n/* harmony export */   "objHasKeys": () => (/* binding */ objHasKeys),\n/* harmony export */   "objReadOnly": () => (/* binding */ objReadOnly),\n/* harmony export */   "objSetProp": () => (/* binding */ objSetProp),\n/* harmony export */   "objSetPropUndefined": () => (/* binding */ objSetPropUndefined),\n/* harmony export */   "objToFormData": () => (/* binding */ objToFormData),\n/* harmony export */   "objToUrlParams": () => (/* binding */ objToUrlParams),\n/* harmony export */   "objWithoutKeys": () => (/* binding */ objWithoutKeys),\n/* harmony export */   "randomInt": () => (/* binding */ randomInt),\n/* harmony export */   "search": () => (/* binding */ search),\n/* harmony export */   "searchRanked": () => (/* binding */ searchRanked),\n/* harmony export */   "sort": () => (/* binding */ sort),\n/* harmony export */   "strFill": () => (/* binding */ strFill),\n/* harmony export */   "textCapitalize": () => (/* binding */ textCapitalize),\n/* harmony export */   "textEllipsis": () => (/* binding */ textEllipsis),\n/* harmony export */   "toArray": () => (/* binding */ toArray)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/uuid/index.js");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_0__);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/*\n * List of optional node-modules and the functions used by them:\n * Module Name          : Function Name\n * ------------------------------------------------------\n * @polkadot/util-crypto: isAddress, generateHash\n * escapeStringRegexp   : escapeStringRegexp, searchRanked\n * form-data   \t\t\t: objToFormData\n * web3-utils  \t\t\t: isAddress, isETHAddress\n*/\n\nvar EMAIL_REGEX = new RegExp(/^(("[\\w-\\s]+")|([\\w-]+(?:\\.[\\w-]+)*)|("[\\w-\\s]+")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,9}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\nvar HEX_REGEX = /^0x[0-9a-f]+$/i;\nvar HASH_REGEX = /^0x[0-9a-f]{64}$/i;\n// doesn\'t work well on URLs with ports!!! Matches emails too!\nvar URL_REGEX = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/g;\n// default icons used in Message component\n// ToDo: move to `reactjs/components/Message`\nvar icons = {\n  basic: \'\',\n  error: \'exclamation circle\',\n  loading: {\n    name: \'circle notched\',\n    loading: true\n  },\n  info: \'info\',\n  success: \'check circle outline\',\n  warning: \'lightning\'\n};\n\n/**\n * @name\tclearClutter\n * @summary clears clutter from strings\n * \n * @param\t{String} x \n * \n * @returns {String}\n */\nvar clearClutter = function clearClutter(x) {\n  return x.split(\'\\n\').map(function (y) {\n    return y.trim();\n  }).filter(Boolean).join(\' \');\n};\n\n/**\n * @name\tcopyToClipboard\n * @summary copies text to browser clipboard. Not compatible with NodeJS.\n * \n * @param\t{String} str \n */\nvar copyToClipboard = function copyToClipboard(str) {\n  try {\n    window.navigator.clipboard.writeText(url);\n  } catch (e) {\n    var el = document.createElement(\'textarea\');\n    el.value = str;\n    el.setAttribute(\'readonly\', \'\');\n    el.style.position = \'absolute\';\n    el.style.left = \'-9999px\';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand(\'copy\');\n    document.body.removeChild(el);\n  }\n};\nvar downloadFile = function downloadFile(content, fileName, contentType) {\n  var a = document.createElement(\'a\');\n  var file = new Blob([content], {\n    type: contentType\n  });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n};\nvar escapeStringRegexp = function escapeStringRegexp(str) {\n  var fn = __webpack_require__("./node_modules/escape-string-regexp/index.js");\n  return fn(str);\n};\n\n/**\n * @name\tfallbackIfFails\n * @summary a simple try-catch wrapper for invoking functions to catch errors.\n * Ensures a value is always returned by avoiding any unexpected errors.\n * \n * @param\t{*|Function|Promise}\tfunc \n * @param\t{Array|Function}\t\targs\t\t\targuments to be supplied to `func` fuction \n * @param\t{*|Function}\t\t\tfallbackValue\talternative value\n * \n * @returns {*|Promise} if func is a promise the return a promise \n */\nvar fallbackIfFails = function fallbackIfFails(func) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var fallbackValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var result;\n  try {\n    if (!isFn(func)) {\n      result = func;\n      throw 0;\n    }\n    result = func.apply(void 0, _toConsumableArray(isFn(args) ? args() : args));\n    if (!isPromise(result)) return result;\n  } catch (_) {}\n  var getAltVal = function getAltVal() {\n    return isFn(fallbackValue) ? fallbackValue(result) : fallbackValue;\n  };\n  return isPromise(result) ? result.catch(getAltVal) : result !== undefined && !isError(result) ? result : getAltVal();\n};\n\n/**\n * @name\tgenerateHash\n * @summary generate hash using supplied data\n * \n * @param\t{String}\tseed\t\tdata to generate hash of\n * @param\t{String}\talgo\t\tSupported algorithms: blake2 (default), keccak\n * @param\t{Number}\tbitLength \tDefault: 256\n */\nvar generateHash = function generateHash() {\n  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v1)();\n  var algo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'blake2\';\n  var bitLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;\n  var _require = __webpack_require__("./node_modules/@polkadot/util-crypto/index.js"),\n    blake2AsHex = _require.blake2AsHex,\n    keccakAsHex = _require.keccakAsHex;\n  seed = isUint8Arr(seed) ? seed : isStr(seed) ? seed : JSON.stringify(seed);\n  switch ("".concat(algo).toLowerCase()) {\n    case \'keccak\':\n      return keccakAsHex(seed);\n    case \'blake2\':\n    default:\n      return blake2AsHex(seed, bitLength);\n    // ToDo: add support for other algo from Polkadot/utils-crypto\n  }\n\n  return; // unsuporrted\n};\n\n/**\n * @name    isAddress\n * @summary validates if supplied is a valid address\n * \n * @param    {String}\taddress \n * @param    {String}\ttype            (optional) valid types: polkadot (default), ethereum\n * @param    {Number}\tchainId\t\t\t(optional) chainId for Ethereum address, ss58Format for Polkadot.\n * \t\t\t\t\t\t\t\t\t\t\tDefault: 0\n * @param    {Boolean}\tignoreChecksum\t(optional) for Polkadot only.\n * \t\t\t\t\t\t\t\t\t\t\tDefault: false\n */\nvar isAddress = function isAddress(address, type) {\n  var chainId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var ignoreChecksum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  try {\n    switch ("".concat(type).toLowerCase()) {\n      case \'ethereum\':\n        return isETHAddress(address, chainId || 0);\n      case \'polkadot\':\n      default:\n        var _require2 = __webpack_require__("./src/utils/convert.js"),\n          ss58Decode = _require2.ss58Decode;\n        // assume Polkadot/Totem address\n        var account = ss58Decode(address, ignoreChecksum, chainId);\n        // must be 32 bytes length\n        return !!account && account.length === 32;\n    }\n  } catch (e) {\n    return false;\n  }\n};\nisAddress.validTypes = {\n  ethereum: \'ethereum\',\n  polkadot: \'polkadot\'\n};\nvar isArr = function isArr(x) {\n  return Array.isArray(x);\n};\n// isArr2D checks if argument is a 2-dimentional array\nvar isArr2D = function isArr2D(x) {\n  return isArr(x) && x.every(isArr);\n};\n// checks if convertible to an array by using `Array.from(x)`\nvar isArrLike = function isArrLike(x) {\n  return isSet(x) || isMap(x) || isArr(x);\n};\n// check if function is Async. Does not work when Babel/Webpack is used due to code compilation.\nvar isAsyncFn = function isAsyncFn(x) {\n  return x instanceof /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  })).constructor && x[Symbol.toStringTag] === \'AsyncFunction\';\n};\nvar isBool = function isBool(x) {\n  return typeof x === \'boolean\';\n};\nvar isBond = function isBond(x) {\n  try {\n    return isObj(x) && isFn(x.tie) && isFn(x.untie);\n  } catch (e) {\n    return false;\n  }\n};\n// Check if x is a valid Date instance\n// Date object can sometimes be \'Invalid Date\' without any timestamp.\n// Date.getTime() is used to make sure it\'s a valid Date\nvar isDate = function isDate(x) {\n  return x instanceof Date && isValidNumber(x.getTime());\n};\nvar isDefined = function isDefined(x) {\n  return x !== undefined && x !== null;\n};\nvar isError = function isError(x) {\n  return x instanceof Error;\n};\nvar isETHAddress = function isETHAddress(address, chainId) {\n  var _require3 = __webpack_require__("./node_modules/web3-utils/lib/index.js"),\n    isAddress = _require3.isAddress;\n  return isAddress(address, chainId);\n};\nvar isFn = function isFn(x) {\n  return typeof x === \'function\';\n};\nvar isHash = function isHash(x) {\n  return fallbackIfFails(function () {\n    return HASH_REGEX.test(x);\n  }, [], false);\n};\nvar isHex = function isHex(x) {\n  return fallbackIfFails(function () {\n    return HEX_REGEX.test(x);\n  }, [], false);\n};\nvar isInteger = function isInteger(x) {\n  return Number.isInteger(x);\n};\nvar isMap = function isMap(x) {\n  return x instanceof Map;\n};\nvar isNodeJS = function isNodeJS() {\n  return fallbackIfFails(function () {\n    return !(window && localStorage);\n  }, [], true);\n};\nvar isObj = function isObj(x) {\n  var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return !!x // excludes null, NaN, Infinity....\n  && _typeof(x) === \'object\' && (!strict\n  // excludes Array, Map, Set\n  || !isArr(x) && !isMap(x) && !isSet(x));\n};\n// Checks if argument is an Array of Objects. Each element type must be object, otherwise will return false.\nvar isObjArr = function isObjArr(x) {\n  return isArr(x) && x.every(isObj);\n};\n// Checks if argument is a Map of Objects. Each element type must be object, otherwise will return false.\nvar isObjMap = function isObjMap(x) {\n  return isMap(x) && Array.from(x).every(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      _ = _ref3[0],\n      v = _ref3[1];\n    return isObj(v);\n  });\n};\nvar isPositiveInteger = function isPositiveInteger(x) {\n  return isInteger(x) && x > 0;\n};\nvar isPositiveNumber = function isPositiveNumber(x) {\n  return isValidNumber(x) && x > 0;\n};\nvar isPromise = function isPromise(x) {\n  return x instanceof Promise;\n};\nvar isSet = function isSet(x) {\n  return x instanceof Set;\n};\nvar isStr = function isStr(x) {\n  return typeof x === \'string\';\n};\nvar isSubjectLike = function isSubjectLike(x) {\n  return isObj(x) && isFn(x.subscribe) && isFn(x.next);\n};\nvar isTouchable = function isTouchable() {\n  return fallbackIfFails(function () {\n    return \'ontouchstart\' in document.documentElement;\n  }, [], false);\n};\nvar isUint8Arr = function isUint8Arr(arr) {\n  return arr instanceof Uint8Array;\n};\nvar isURL = function isURL(x) {\n  return x instanceof URL;\n};\n// checks if dateOrStr is a valid date\nvar isValidDate = function isValidDate(dateOrStr) {\n  var date = new Date(dateOrStr);\n  if (!isDate(date)) return false;\n\n  // hack to detect & prevent `new Date(dateOrStr)` converting \'2021-02-31\' to \'2021-03-03\'\n  var _map = ["".concat(dateOrStr), date.toISOString()].map(function (y) {\n      return y.replace(\'T\', \'\').replace(\'Z\', \'\').substr(0, 10);\n    }),\n    _map2 = _slicedToArray(_map, 2),\n    original = _map2[0],\n    converted = _map2[1];\n  return original === converted;\n};\nvar isValidNumber = function isValidNumber(x) {\n  return typeof x == \'number\' && !isNaN(x) && isFinite(x);\n};\nvar isValidURL = function isValidURL(x) {\n  var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  try {\n    var isAStr = isStr(x);\n    var _url = isURL(x) ? x : new URL(x);\n    // If strict mode is set to `true` and if a string value provided, it must match resulting value of new URL(x).\n    // This can be used to ensure that a URL can be queried without altering.\n    if (!isAStr || !strict) return true;\n    // catch any auto-correction by `new URL()`. \n    // Eg: spaces in the domain name being replaced by`%20` or missing `/` in protocol being auto added\n    x = "".concat(x);\n    if (x.endsWith(_url.hostname)) x += \'/\';\n    return _url.href == x;\n  } catch (e) {\n    return false;\n  }\n};\nvar hasValue = function hasValue(x) {\n  try {\n    if (!isDefined(x)) return false;\n    switch (_typeof(x)) {\n      case \'string\':\n        return isStr(x) && !!x.trim();\n      case \'number\':\n        return isValidNumber(x);\n      // for both array and object\n      case \'object\':\n        if (isArr(x)) return x.length > 0;\n        if (isMap(x) || isSet(x)) return x.size > 0;\n        return Object.keys(x).length > 0;\n      case \'boolean\':\n      default:\n        return true;\n      // already defined\n    }\n  } catch (_) {\n    return false;\n  }\n};\n\n/**\n * @name\tgetKeys\n * @summary returns an Array of keys or indexes depending on input type\n * \n * @param\t{Array|Map|Object} source \n * \n * @returns {Array}\n */\nvar getKeys = function getKeys(source) {\n  if (isArr(source)) return source.map(function (_, i) {\n    return i;\n  });\n  if (isMap(source)) return Array.from(source).map(function (x) {\n    return x[0];\n  });\n  if (isObj(source)) return Object.keys(source);\n  return [];\n};\n\n/**\n * @name\tarrMapSlice\n * @summary mimics the behaviour of Array.map() with the convenience of only executing callback on range of indexes\n * \n * @param {Array} \t data \n * @param {Number}   startIndex \n * @param {Number}   endIndex \n * @param {Function} callback   to be executed on each item within the set range\n *              \t\t\t\tParams:\n *              \t\t\t\t@currentValue\n *              \t\t\t\t@currentIndex\n *              \t\t\t\t@array\n * \n * @returns {Array} list of all items returned by @callback\n */\nvar arrMapSlice = function arrMapSlice(data, startIndex, endIndex, callback) {\n  var isAMap = isMap(data);\n  if (!isArr(data) && !isAMap) return [];\n  var len = isAMap ? data.size : data.length;\n  data = isAMap ? Array.from(data) : data;\n  startIndex = startIndex || 0;\n  endIndex = !endIndex || endIndex >= len ? len - 1 : endIndex;\n  var result = [];\n  for (var i = startIndex; i <= endIndex; i++) {\n    var key = i,\n      _value = data[i];\n    if (isAMap) {\n      key = data[i][0];\n      _value = data[i][1];\n    }\n    result.push(callback(_value, key, data, isAMap));\n  }\n  return result;\n};\n\n/**\n * @name\tarrReadOnly\n * @summary sugar for `objReadOnly()` for an Array\n * \n * @param\t{Array}\tinput \n * @param\t{Boolean} strict\n * \n * @returns {Array}\n */\nvar arrReadOnly = function arrReadOnly(input, strict, silent) {\n  return objReadOnly(input, strict, silent);\n};\n\n/**\n * @name\tarrReverse\n * @summary Reverse an array conditionally\n * \n * @param\t{Array}\t\tarr\n * @param\t{Boolean}\treverse\t (optional) condition to reverse the array.\n * \t\t\t\t\t\t\t\t Default: true\n * @param\t{Boolean}\tnewArray (optional) whether to cnstruct new array or use input.\n * \t\t\t\t\t\t\t\t Default: true\n * \n * @returns {Array}\n */\nvar arrReverse = function arrReverse(arr) {\n  var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var newArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!isArr(arr)) return [];\n  if (newArray) arr = _toConsumableArray(arr);\n  return reverse ? arr.reverse() : arr;\n};\n\n/**\n * @name\tarrSearch\n * @summary search array of objects\n * \n * @param\t{Array}\t  arr \n * @param\t{Object}  keyValues  specific keys and respective values to search for\n * @param\t{Boolean} matchExact (optional) whether to match the value exactly as specified in @keyValues\n * @param\t{Boolean} matchAll   (optional) whether all or any supplied keys should match\n * @param\t{Boolean} ignoreCase (optional)\n * @param\t{Boolean} asArray    (optional) wheter to return result as Array or Map\n * \n * @returns {Array|Map} Map (key = original index) or Array (index not preserved) if @returnArr == true\n */\nvar arrSearch = function arrSearch(arr, keyValues, matchExact, matchAll, ignoreCase, asArray) {\n  var result = asArray ? new Array() : new Map();\n  if (!isObj(keyValues) || !isObjArr(arr)) return result;\n  var keys = Object.keys(keyValues);\n  for (var index = 0; index < arr.length; index++) {\n    var matched = false;\n    var item = arr[index];\n    for (var i in keys) {\n      var key = keys[i];\n      var keyword = keyValues[key];\n      var _value2 = item[key];\n      if (ignoreCase && isStr(_value2)) {\n        _value2 = _value2.toLowerCase();\n        keyword = isStr(keyword) ? keyword.toLowerCase() : keyword;\n      }\n      matched = !matchExact && (isStr(_value2) || isArr(_value2)) ? _value2.indexOf(keyword) >= 0 : _value2 === keyword;\n      if (matchAll && !matched || !matchAll && matched) break;\n    }\n    matched && (asArray ? result.push(item) : result.set(index, item));\n  }\n  return result;\n};\n\n/**\n * @name\tarrSort\n * @summary sort an array\n * \n * @param\t{Array}\t\tarr array to sort \n * @param\t{String}\tkey (optional) name of the property, if object array\n * @param\t{Boolean}\treverse (optional) reverse sort.\n * \t\t\t\t\t\tDefault: false\n * @param\t{Boolean}\tcaseInsensitive (optional) sort without the side-effects of case-sensitivenes.\n * \t\t\t\t\t\tDefault: true\n * @param\t{Boolean}\tsortOriginal (optional) true => original array, false => keep original array unchanged.\n * \t\t\t\t\t\tDefault: false\n * \n * @returns {Array}\tsorted array\n */\nvar arrSort = function arrSort(arr, key) {\n  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var caseInsensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var sortOriginal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var sortedArr = sortOriginal ? arr : _toConsumableArray(arr);\n  var getValue = function getValue(obj, key) {\n    var value;\n    if (isObj(obj) && isDefined(key)) {\n      value = obj[key];\n    } else {\n      value = obj;\n    }\n    return isStr(value) && caseInsensitive ? value.toLowerCase() : value;\n  };\n  sortedArr = sortedArr.sort(function (a, b) {\n    return getValue(a, key) > getValue(b, key) ? 1 : -1;\n  });\n  return reverse ? arrReverse(sortedArr, true) : sortedArr;\n};\n\n/**\n * @name\tarrUnique\n * @summary constructs a new array of unique values\n * \n * @param\t{...any} args\n * \n * @returns {Array}\n */\nvar arrUnique = function arrUnique() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return Array.from(new Set([].concat(args).flat()));\n};\n\n/**\n * @name\tclassName\n * @summary formats supplied value into CSS class name compatible string for React\n * \n * @param\t{Object|Array} value \n * \n * @returns\t{String}\n * \n * @example ```JavaScript\n * const isSection = false\n * const isIcon = true\n * const withBorder = false\n * const str = className([\n *     \'ui\',\n *     { section: isSection, icon: isIcon },\n *     withBorder && \'bordered\',\n * ])\n * \n * // expected result: \'ui icon\'\n * ```\n */\nvar className = function className(value) {\n  if (isStr(value)) return value;\n  if (isObj(value)) {\n    // convert into an array\n    value = Object.keys(value).map(function (key) {\n      return !!value[key] && key;\n    });\n  }\n  if (!isArr(value)) return \'\';\n  return value.filter(Boolean).map(function (x) {\n    return !isObj(x) ? x : className(x);\n  }).join(\' \');\n};\n\n/**\n * @name\tdeferred\n * @summary returns a function that invokes the callback function after certain delay/timeout\n * \n * @param\t{Function}\tcallback \tfunction to be invoked after timeout\n * @param\t{Number}\tdelay\t\t(optional) timeout duration in milliseconds.\n * \t\t\t\t\t\t\t\t\tDefault: 50\n * @param\t{*}\t\t\tthisArg\t\t(optional) the special `thisArgs` to be used when invoking the callback.\n * \n * @returns {Function}\n */\nvar deferred = function deferred(callback, delay, thisArg) {\n  if (!isFn(callback)) return; // nothing to do!!\n  var timeoutId;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (timeoutId) clearTimeout(timeoutId);\n    timeoutId = setTimeout(function () {\n      return callback.apply(thisArg, args);\n    }, delay || 50);\n    return timeoutId;\n  };\n};\n\n/**\n * @name\tgetFuncParams\n * @summary extracts the parameter names of a given function. \n * \n * @param\t{Function} func \n * \n * @returns {Array}\n */\nvar getFuncParams = function getFuncParams(func) {\n  return func.toString().replace(\'function\', \'\').trim().split(\'(\')[1].split(\')\')[0].split(\', \');\n};\n\n/**\n * @name    getUrlParam\n * @summary read parameters of a given URL\n * \n * @param   {String} name   (optional) if supplied will return a specific paramenter as string.\n *                          Otherwise, will return an object containing all the URL parameters with respective values.\n * @param   {String} url    \n * \n * @returns {String|Object}\n */\nvar getUrlParam = function getUrlParam(name) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fallbackIfFails(function () {\n    return window.location.href;\n  }, [], \'\');\n  var params = {};\n  var regex = /[?&]+([^=&]+)=([^&]*)/gi;\n  url.replace(regex, function (_, key, value) {\n    return params[key] = decodeURIComponent(value);\n  });\n  return name ? params[name] || \'\' : params;\n};\n\n/**\n * @name\tobjCopy\n * @summary deep-copy an object to another object\n * \n * @param\t{Object}\tsource\tsource object\n * @param\t{Object}\tdest\tdestination object\n * @param\t{Array}\t\tignore\t(optional) prevents @dest\'s property to be overriden \n * \t\t\t\t\t\t    \tif @source\'s property value is in the list\n *\t\t\t\t\t\t    \tDefault: [undefined]\n * @returns {Object}\n */\nvar objCopy = function objCopy() {\n  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var dest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ignore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [undefined];\n  var sKeys = Object.keys(source);\n  for (var i = 0; i < sKeys.length; i++) {\n    var key = sKeys[i];\n    if (dest.hasOwnProperty(key) && ignore.includes(source[key])) continue;\n    var _value3 = source[key];\n    if (isArrLike(_value3)) {\n      var newValue = JSON.parse(JSON.stringify(Array.from(_value3)));\n      if (isMap(_value3)) {\n        newValue = new Map(newValue);\n      } else if (isSet(_value3)) {\n        newValue = new Set(_toConsumableArray(newValue));\n      }\n      dest[key] = newValue;\n    } else if (isObj(_value3)) {\n      dest[key] = objCopy(source[key], dest[key], ignore);\n    } else {\n      dest[key] = _value3;\n    }\n  }\n  return dest;\n};\n\n/** \n * @name\tobjClean\n * @summary\tconstructs a new object with only the supplied property names (keys) and their respective values\n * \n * @param\t{Object}\tobj\n * @param\t{Array}\t\tkeys\t\tproperty names\n * @param\t{Boolean}\trecursive\t(optional) Default: `false`\n * @param\t{Boolean}\tignoreIfNotExist (optional) if truthy, only include property if `obj.hasOwnProperty(key)`\n * \t\t\t\t\t\t\t\t\t\t Default: `true`\n * \n * @returns\t{Object}\n */\nvar objClean = function objClean(obj, keys) {\n  var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var ignoreIfNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!isObj(obj) || !isArr(keys)) return {};\n  var result = {};\n  var _loop = function _loop() {\n    var key = keys[i];\n    if (ignoreIfNotExist && !obj.hasOwnProperty(key)) return "continue";\n    var value = obj[key];\n    result[key] = value;\n    // recursively clean up child property with object value\n    if (!recursive || !isObj(value)) return "continue";\n    var childPrefix = "".concat(key, ".");\n    var childKeys = keys.filter(function (k) {\n      return k.startsWith(childPrefix);\n    });\n    if (childKeys.length === 0) return "continue";\n\n    // get rid of child key prefix \n    childKeys = childKeys.map(function (k) {\n      return k.replace(new RegExp(childPrefix), \'\');\n    });\n    result[key] = objClean(value, childKeys, recursive);\n  };\n  for (var i = 0; i < keys.length; i++) {\n    var _ret = _loop();\n    if (_ret === "continue") continue;\n  }\n  return result;\n};\n\n/**\n * @name\tobjCreate\n * @summary constructs a new object with supplied key(s) and value(s)\n * \n * @param\t{Array}\tkeys\n * @param\t{Array}\t\tvalues\t(optional)\n * @param\t{Object}\t\tresult\t(optional)\n * \n * \n * @returns\t{Object}\n */\nvar objCreate = function objCreate() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!isArr(keys) || !isArr(values) || !isObj(result)) return {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var _value4 = values[i];\n    result[key] = _value4;\n  }\n  return result;\n};\n\n/**\n * @name\tobjHasKeys\n * @summary checks if all the supplied keys exists in a object\n * \n * @param\t{Object} \tobj \n * @param\t{Array} \tkeys \n * @param\t{Boolean}\trequireValue (optional) whether each property should have some value.\n * \n * @returns {Boolean}\n */\nfunction objHasKeys() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var requireValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!isObj(obj) || !isArr(keys)) return false;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!obj.hasOwnProperty(key)) return false;\n    if (!requireValue) continue;\n    if (!hasValue(obj[key])) return false;\n  }\n  return true;\n}\n\n/**\n * @name\tobjReadOnly\n * @summary constructs a new read-only object where only new properties can be added.\n * \n * @param\t{Object}\tobj \n * @param\t{Boolean}\tstrict\t(optional) If true, any attempt to add or update property will fail.\n *\t\t\t\t\t \t\t\tOtherwise, only new properties can be added but updates will fail.\n *\t\t\t\t\t\t\t\tDefault: false\n * @param\t{Boolean}\tsilent\t(optional) whether to throw error when property add/update fails.\n * \t\t\t\t\t\t\t\tDefault: false\n * \n * @returns\t{Object}\n */\nvar objReadOnly = function objReadOnly(obj) {\n  var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Proxy(obj || {}, {\n    setProperty: function setProperty(self, key, value) {\n      // prevents adding new or updating existing property\n      var isStrict = !isFn(strict) ? strict === true : strict(self, key, value);\n      if (isStrict) {\n        if (silent) return true;\n        throw new TypeError("Assignment to constant ".concat(Array.isArray(obj) ? \'array\' : \'object\', " key: ").concat(key));\n      } else if (!self.hasOwnProperty(key)) {\n        self[key] = value;\n      }\n      return true;\n    },\n    get: function get(self, key) {\n      return self[key];\n    },\n    set: function set(self, key, value) {\n      return this.setProperty(self, key, value);\n    },\n    defineProperty: function defineProperty(self, key) {\n      return this.setProperty(self, key, value);\n    },\n    // Prevent removal of properties\n    deleteProperty: function deleteProperty() {\n      return false;\n    }\n  });\n};\n\n/**\n * @name\tobjSetProp\n * @summary assign value to specified property\n * \n * @param\t{Object}\tobj \n * @param\t{String}\tkey \n * @param\t{*}\t\t\tvalue\t\t\t\n * @param\t{Boolean}\tcondition\t(optional)\n * @param\t{*}\t\t\tvalueAlt \t(optional) value to use if condition is truthy\n * @returns \n */\nvar objSetProp = function objSetProp(obj, key, val, condition, valAlt) {\n  obj[key] = !condition ? val : valAlt;\n  return obj;\n};\n\n/**\n * @name\tobjSetProp\n * @summary assign value to specified property only if it is undefined\n * \n * @param\t{Object}\tobj \n * @param\t{String}\tkey \n * @param\t{*}\t\t\tvalue\t\t\t\n * @param\t{Boolean}\tcondition\t(optional) \n * @param\t{*}\t\t\tvalueAlt \t(optional) value to use if condition is truthy\n * \n * @returns {Object}\n */\nvar objSetPropUndefined = function objSetPropUndefined(obj, key, v1, condition, v2) {\n  obj[key] === undefined && objSetProp(obj, key, v1, condition, v2);\n  return obj;\n};\n\n/**\n * @name\tobjToUrlParams\n * @summary\tconstructs URL param string from an object, excluding any `undefined` values\n * \n * @param\t{Object} obj\n * \n * @returns\t{String}\n */\nvar objToUrlParams = function objToUrlParams() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var excludeUndefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return Object.keys(obj).map(function (key) {\n    var value = obj[key];\n    if (excludeUndefined && value === undefined) return;\n    var valueEscaped = !isArr(value) ? escape(value)\n    // prevents escaping comma when joining array\n    : value.map(escape).join();\n    return "".concat(key, "=").concat(valueEscaped);\n  }).filter(Boolean).join(\'&\');\n};\nvar objToFormData = function objToFormData() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var excludeUndefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var formData = new FormData();\n  Object.keys(obj).forEach(function (key) {\n    var value = obj[key];\n    if (excludeUndefined && value === undefined) return;\n    if (isArr(value)) value = value.join();\n    formData.append(key, value);\n  });\n  return formData;\n};\n\n/**\n * @name\tobjWithoutKeys\n * @summary constructs a new object excluding specific properties\n * \n * @param\t{Object}\tinput \n * @param\t{Array}\t\tkeys\tproperty names to exclude\n * @param\t{Object}\toutput\t(optional) to delete unwanted props from the original `input` use it here.\n * \t\t\t\t\t\t\t\tDefault: a copy of the `input` object\n * \n * @returns {Object}\n */\nvar objWithoutKeys = function objWithoutKeys(input, keys) {\n  var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _objectSpread({}, input);\n  if (!isObj(input)) return {};\n  if (!isArr(keys) || !keys.length) return input;\n  for (var i = 0; i < keys.length; i++) {\n    delete output[keys[i]];\n  }\n  return output;\n};\n\n/**\n * @name\tmapFilter\n * @summary Array.filter but for Map.\n * \n * @param\t{Map}\t\tmap \n * @param\t{Function}\tcallback \n * \n * @returns {Map}\n */\nvar mapFilter = function mapFilter(map, callback) {\n  var result = new Map();\n  if (!isMap(map)) return result;\n  if (!isFn(callback)) return map;\n  var _iterator = _createForOfIteratorHelper(map.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        key = _step$value[0],\n        _value5 = _step$value[1];\n      if (!callback(_value5, key, map)) return;\n      result.set(key, _value5);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return result;\n};\n\n/**\n * @name\tmapFindByKey\n * @summary finds a specific object by supplied object property/key and value within.\n * \n * Unused??\n * \n * @param\t{Map}\t  map \t\t Map of objects\n * @param\t{*}\t\t  key \t\t object key to match or null if value is not an object\n * @param\t{*}\t\t  value \n * @param\t{Boolean} matchExact \n * \n * @returns {*} first item partial/fully matching @value with supplied @key\n */\nvar mapFindByKey = function mapFindByKey(map, key, value, matchExact) {\n  var _iterator2 = _createForOfIteratorHelper(map.entries()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        _ = _step2$value[0],\n        item = _step2$value[1];\n      var val = key === null ? item : item[key];\n      var found = !matchExact && (isStr(val) || isArr(val)) ? val.indexOf(value) >= 0 : val === value;\n      if (found) return item;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\n\n/**\n * @name\tmapJoin\n * @summary creates a new Map by combining two or more Maps\n * \n * @param\t{Map[]|Array[]} maps...\n * \n * @returns {Map}\n * \n * @example\t`javascript\n * const maps = [\n * \tnew Map([[\'a\', 1]]),\n * \tnew Map([[\'b\', 2]]),\n * ]\n * const joined = mapJoin(...maps) // Map(2) {\'a\' => 1, \'b\' => 2}\n * \n * // use 2D array\n * const maps = [\n * \t[[\'a\', 1]],\n * \t[[\'b\', 2]],\n * ]\n * const joined = mapJoin(...maps) // Map(2) {\'a\' => 1, \'b\' => 2}\n * `\n */\nvar mapJoin = function mapJoin() {\n  for (var _len3 = arguments.length, maps = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    maps[_key3] = arguments[_key3];\n  }\n  return new Map(maps.map(function (map) {\n    var arr = fallbackIfFails(Array.from, [map], []);\n    return isArr2D(arr) ? arr : [];\n  }).flat());\n};\n\n/**\n * @name\tmapSearch\n * @summary search for objects by key-value pairs\n * \n * @param \t{Map}\t\tmap\n * @param \t{Object}\tkeyValues  key-value pairs\n * @param \t{Boolean}\tmatchAll   (optional) match all supplied key-value pairs\n * @param \t{Boolean}\tignoreCase (optional) case-insensitive search for strings\n *\n * @returns {Map}\n */\nvar mapSearch = function mapSearch(map, keyValues, matchExact, matchAll, ignoreCase) {\n  var result = new Map();\n  if (!isObj(keyValues) || !isMap(map)) return result;\n  var keys = Object.keys(keyValues);\n  var _iterator3 = _createForOfIteratorHelper(map.entries()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n        itemKey = _step3$value[0],\n        item = _step3$value[1];\n      var matched = false;\n      for (var i in keys) {\n        var key = keys[i];\n        var keyword = keyValues[key];\n        var _value6 = item[key];\n        if (ignoreCase && isStr(_value6)) {\n          _value6 = _value6.toLowerCase();\n          keyword = isStr(keyword) ? keyword.toLowerCase() : keyword;\n        }\n        if (isValidNumber(_value6)) {\n          // convert to string to enable partial match and avoid string and number type mismatch\n          _value6 = "".concat(_value6);\n        }\n        matched = !matchExact && (isStr(_value6) || isArr(_value6)) ? _value6.indexOf(keyword) >= 0 : _value6 === keyword;\n        // skip item if doesn\'t match according to preference\n        if (matchAll && !matched || !matchAll && matched) break;\n      }\n      matched && result.set(itemKey, item);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return result;\n};\n\n/**\n * @name\tmapSort\n * @summary\tcreate a new map sorted by key. Values must be objects\n * \n * @param\t{Map}\t \tmap \n * @param\t{String}\tkey \n * @param\t{Boolen}\treverse True: accending sort. False: descending sort. Default: `false`\n * \n * @returns {Map}\n */\n// \nvar mapSort = function mapSort(map, key) {\n  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var caseInsensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!isMap(map)) return map;\n  var arr2d = Array.from(map);\n  if (!arr2d[0] || !isObj(arr2d[0][1])) return map;\n  var getValue = function getValue(obj, key1, key2) {\n    var value = fallbackIfFails(function () {\n      return "".concat(obj[key1][key2] || \'\');\n    }, [], \'\');\n    return caseInsensitive ? value.toLowerCase() : value;\n  };\n  return new Map(arrReverse(arr2d.sort(function (a, b) {\n    return getValue(a, 1, key) > getValue(b, 1, key) ? 1 : -1;\n  }), reverse));\n};\n\n/**\n * @name\trandomInt\n * @summary generates random number within a range\n * \n * @param\t{Number} min lowest number\n * @param\t{Number} max highest number\n * \n * @returns {Number}\n */\nvar randomInt = function randomInt(min, max) {\n  return parseInt(Math.random() * (max - min) + min);\n};\n\n/**\n * @name\tsearch\n * @summary Search Array or Map\n * \n * @param\t{Array|Map} data \n * @param\t{String}\tquery search query\n * @param\t{Array}\t\tkeys  property names to search for\n * \n * @returns {Array|Map}\n */\nvar search = function search(data, query) {\n  var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (!query || query.length === 0 || !(isArr(data) || isMap(data))) return data;\n  var searchFunc = isMap(data) ? mapSearch : arrSearch;\n  var keyValues = objCreate(keys, new Array(keys.length).fill(query));\n  return searchFunc(data, keyValues, false, false, true, false);\n};\n\n/**\n * @name\t\t\tsearchRanked\n * @summary \t\tenhanced search for Dropdown\n * @description\t\tSemantic UI Dropdown search defaults to only \'text\' option property.\n * \t\t\t\t\tSee FormInput for usage.\n * @param {Array}\tsearchKeys\tObject properties (keys) to search for.\n * \t\t\t\t\t\t\t\tDefault: [\'text\'] (for Dropdown and similar input fields)\n * @param {Number}  maxResults\tlimits maximum number of results returned.\n * \t\t\t\t\t\t\t\tDefault: `100`\n * \n * @returns\t{Function}\ta callback function. Params:\n *\t\t\t\t\t\t@options \t\tarray of objects\n *\t\t\t\t\t\t@searchQuery\tstring\n *\t\t\t\t\t\treturns array of objects\n */\nvar searchRanked = function searchRanked() {\n  var searchKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\'text\'];\n  var maxResults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  return function (options, searchQuery) {\n    if (!options || options.length === 0) return [];\n    if (!searchQuery) return options.slice(0, maxResults);\n    var uniqueValues = {};\n    var regex = new RegExp(escapeStringRegexp(searchQuery || \'\'), \'i\');\n    if (!searchQuery) return options.slice(0, maxResults);\n    var search = function search(key) {\n      var matches = options.map(function (option, i) {\n        try {\n          if (!option || !hasValue(option[key])) return;\n\n          // catches errors caused by the use of some special characters with .match() below\n          var x = fallbackIfFails(function () {\n            return JSON.stringify(option[key]);\n          }, [], \'\').match(regex);\n          if (!x || uniqueValues[options[i].value]) return;\n          var matchIndex = x.index;\n          uniqueValues[options[i].value] = 1;\n          return {\n            index: i,\n            matchIndex: matchIndex\n          };\n        } catch (e) {\n          console.log(e);\n        }\n      }).filter(Boolean);\n      return arrSort(matches, \'matchIndex\').map(function (x) {\n        return options[x.index];\n      });\n    };\n    return searchKeys.reduce(function (result, key) {\n      return result.concat(search(key));\n    }, []).slice(0, maxResults);\n  };\n};\n\n/**\n * @name\tsort\n * @summary Sort Array or Map\n * \n * @param {Array|Map} data \n * @param {String}\t  key\t\t   (optional) property to sort by\n * @param {Boolean}   reverse\t   (optional)\n * @param {Boolean}\t  caseInsensitive (optional) Default: true\n * @param {Boolean}\t  sortOriginal (optional) for Array only. \n * \n * @returns {Array|Map}\n */\nvar sort = function sort(data, key, reverse, caseInsensitive, sortOriginal) {\n  var sortFunc = isArr(data) ? arrSort : isMap(data) ? mapSort : function () {\n    return data;\n  }; // return as is\n  return sortFunc(data, key, reverse, caseInsensitive, sortOriginal);\n};\n\n/**\n * @name \tstrFill\n * @summary pre/post-fill a string\n * \n * @param\t{String}\tstr\t\ttext to pre/post-fill \n * @param\t{Number}\tmaxLen\tmaximum total length string to fill.\n * \t\t\t\t\t\t\t\tIf string length is higher than `maxLen`, will leave as is.\n * \t\t\t\t\t\t\t\tDefault: 2\n * @param\t{String}\tfiller\tstring to fill\n * @param\t{Boolean}\tafter\twhether to add filler after or before @str.\n * \n * @returns {String}\n */\nvar strFill = function strFill(str) {\n  var maxLen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var filler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \' \';\n  var after = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  str = "".concat(str);\n  filler = "".concat(filler);\n  var count = parseInt((maxLen - str.length) / filler.length);\n  if (count <= 0) return str;\n  return arrReverse([filler.repeat(count), str], after).join(\'\');\n};\n\n/**\n * @name\ttextCapitalize\n * @summary capitalizes the first letter of input\n * \n * @param\t{String|Object|Array} input \t\t\t\n * @param\t{Boolean} \t\tfullSentence   (optional) whether to capitalize every single word or just the first word\n * @param\t{Boolean}\t\tforceLowercase (optional) convert string to lower case before capitalizing\n * @param\t{Object|Array}\toutput\t\t   (optional) create a new object or merge with existing one.\n * \t\t\t\t\t\t\t\t\t\t   Default: `input` (overrides texts)\n * \n * @returns {*}\n */\nvar textCapitalize = function textCapitalize(input) {\n  var fullSentence = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var forceLowercase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var output = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : input;\n  if (!input) return input;\n  if (isStr(input)) {\n    if (forceLowercase) input = input.toLowerCase();\n    if (!fullSentence) return input[0].toUpperCase() + input.slice(1);\n    return input.split(\' \').map(function (word) {\n      return textCapitalize(word, false);\n    }).join(\' \');\n  }\n  if (!input || _typeof(input) !== \'object\') return \'\';\n  Object.keys(input).forEach(function (key) {\n    return output[key] = textCapitalize(input[key], fullSentence, forceLowercase);\n  });\n  return output;\n  // return Object.keys(input)\n  // \t.reduce((obj, key) => {\n  // \t\tobj[key] = textCapitalize(\n  // \t\t\tinput[key],\n  // \t\t\tfullSentence,\n  // \t\t\tforceLowercase,\n  // \t\t)\n  // \t\treturn obj\n  // \t}, isArr(input) ? [] : {})\n};\n\n/**\n * @name\ttextEllipsis\n * @summary shortens string into \'abc...xyz\' or \'abcedf...\' form\n * \n * @param\t{string} text \n * @param\t{Number} maxLen\t maximum length of the shortened text including dots\n * @param\t{Number} numDots (optional) number of dots to be inserted in the middle.\n * \t\t\t\t\t\t\t Default: 3\n * @param\t{Boolean} split  (optional) If false, will add dots at the end, otherwise, in the middle.\n * \t\t\t\t\t\t\t Default: true\n * \n * @returns {String}\n */\nvar textEllipsis = function textEllipsis(text, maxLen, numDots) {\n  var split = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!isStr(text)) return \'\';\n  if (!maxLen || text.length <= maxLen) return text;\n  numDots = numDots || 3;\n  var textLen = maxLen - numDots;\n  var partLen = Math.floor(textLen / 2);\n  var isEven = textLen % 2 === 0;\n  var arr = text.split(\'\');\n  var dots = new Array(numDots).fill(\'.\').join(\'\');\n  var left = arr.slice(0, split ? partLen : maxLen - numDots).join(\'\');\n  var right = !split ? \'\' : arr.slice(text.length - (isEven ? partLen : partLen + 1)).join(\'\');\n  return left + dots + right;\n};\n\n/**\n * @name\ttoArray\n * @summary convert string or other itearables\' values to Array\n * \n * @param\t{String|Array|Map|Set}\tvalue \n * @param\t{String}\t\t\t\tseperator (optional) only used when value is a string\n * \n * @returns {Array}\n */\nvar toArray = function toArray(value) {\n  var seperator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \',\';\n  return isStr(value) ? value.split(seperator).filter(Boolean) : isFn((value || []).values) ? _toConsumableArray(value.values()) : [];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/utils.js\n')},"./src/utils/validator.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TYPES\": () => (/* binding */ TYPES),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"messages\": () => (/* binding */ messages),\n/* harmony export */   \"setMessages\": () => (/* binding */ setMessages),\n/* harmony export */   \"validate\": () => (/* binding */ validate),\n/* harmony export */   \"validateObj\": () => (/* binding */ validateObj)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/utils/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar messages = {\n  accept: 'value not acceptable',\n  array: 'valid array required',\n  boolean: 'boolean value required',\n  date: 'valid date required',\n  dateMax: 'value must be smaller or equal to',\n  dateMin: 'value must be greater or equal to',\n  decimals: 'value exceeds maximum allowed decimals',\n  email: 'valid email address required',\n  function: 'valid function required',\n  hash: 'valid cryptographic hash string required',\n  hex: 'valid hexadecimal string required',\n  identity: 'valid identity required',\n  integer: 'valid integer required (no decimals)',\n  requiredKeys: 'missing one or more required fields',\n  lengthMax: 'maximum length exceeded',\n  lengthMin: 'minimum length required',\n  number: 'valid number required',\n  numberMax: 'value must be smaller or equal to',\n  numberMin: 'value must be greater or euqal to',\n  object: 'valid object required',\n  regex: 'invalid string pattern',\n  regexError: 'regex validation failed',\n  reject: 'value not acceptable',\n  required: 'required field',\n  string: 'valid string required',\n  type: 'invalid data type',\n  unique: 'array must not contain duplicate values',\n  url: 'invalid URL',\n  // non-TYPE specific\n  unexpectedError: 'unexpected validation error occured'\n};\n// Accepted validation types.\n// Any type not listed here will be ignored.\nvar TYPES = Object.freeze({\n  array: 'array',\n  boolean: 'boolean',\n  date: 'date',\n  email: 'email',\n  function: 'function',\n  hash: 'hash',\n  hex: 'hex',\n  identity: 'identity',\n  integer: 'integer',\n  number: 'number',\n  object: 'object',\n  string: 'string',\n  url: 'url'\n});\nvar errorConcat = function errorConcat(message) {\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(message)) return message;\n  for (var _len = arguments.length, suffix = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    suffix[_key - 1] = arguments[_key];\n  }\n  return [message].concat(suffix).join(' ');\n};\n\n/**\n * @name    setMessages\n * @summary Overrides default error messages with custom/translated error messages\n * \n * @param   {Object} messagesOverrides Object with custom/translated messages. Must contain the correct keys.\n */\nvar setMessages = function setMessages() {\n  var messagesOverrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(messagesOverrides) && Object.keys(messagesOverrides).forEach(function (key) {\n    return messages[key] = messagesOverrides[key];\n  });\n  return messages;\n};\n\n// if msg is falsy, returns true\nvar _msgOrTrue = function _msgOrTrue(msg, value) {\n  return !msg || msg === true ? true : \"\".concat(msg).concat((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(value) ? ': ' + value : '');\n};\n\n/**\n * @name    validate\n * @summary validate single value\n * \n * @param   {*} value \n * @param   {Object} config \n * \n * @example \n * <BR>\n *\n * ```javascript\n * validate(123456, { max: 9999, min: 0, required: true, type: TYPES.number})\n * ```\n * \n * @returns {String|Null} null if valid according to supplied config. Otherwise, validation error message.\n */\nvar validate = function validate(value, config) {\n  var customMessages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var errorMsgs = _objectSpread(_objectSpread(_objectSpread({}, messages), customMessages), config.customMessages);\n\n  // If error message is falsy change it to `true`\n  Object.keys(errorMsgs).forEach(function (key) {\n    return errorMsgs[key] = errorMsgs[key] || true;\n  });\n  try {\n    var err;\n    var _ref = config || {},\n      accept = _ref.accept,\n      decimals = _ref.decimals,\n      propertiesAlt = _ref.config,\n      failFast = _ref.failFast,\n      includeLabel = _ref.includeLabel,\n      instanceOf = _ref.instanceOf,\n      requiredKeys = _ref.requiredKeys,\n      max = _ref.max,\n      maxLength = _ref.maxLength,\n      min = _ref.min,\n      minLength = _ref.minLength,\n      _ref$properties = _ref.properties,\n      childConf = _ref$properties === void 0 ? propertiesAlt : _ref$properties,\n      or = _ref.or,\n      regex = _ref.regex,\n      reject = _ref.reject,\n      required = _ref.required,\n      _ref$strict = _ref.strict,\n      strict = _ref$strict === void 0 ? true : _ref$strict,\n      type = _ref.type,\n      _ref$unique = _ref.unique,\n      unique = _ref$unique === void 0 ? false : _ref$unique;\n    var gotValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.hasValue)(value);\n    var typeErrMsg = errorMsgs[type];\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(or) && !!TYPES[or.type]) {\n      var configWithoutOr = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.objWithoutKeys)(config, ['or']);\n      err = validate(value, configWithoutOr, errorMsgs);\n      // primary validation\n      if (!err && gotValue || err !== typeErrMsg) return err;\n      // secondary (or) validation\n      return validate(value, or, errorMsgs);\n    }\n    // if doesn't have any value (undefined/null) and not `required`, assume valid\n    if (!gotValue) return required ? _msgOrTrue(errorMsgs.required) : null;\n    var valueIsArr = false;\n    // validate value type\n    switch (type) {\n      case 'array':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(value)) return _msgOrTrue(errorMsgs.array);\n        if (unique && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.arrUnique)(value).length < value.length) return _msgOrTrue(errorMsgs.unique);\n        valueIsArr = true;\n        break;\n      case 'boolean':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isBool)(value)) return _msgOrTrue(errorMsgs.boolean);\n        break;\n      case 'date':\n        // validates both  string and Date object\n        var date = new Date(value);\n        // const isValidDate = isDate(date)\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidDate)(value)) return _msgOrTrue(errorMsgs.date);\n        // makes sure auto correction didnt occur when using `new Date()`. \n        // Eg: 2020-02-30 is auto corrected to 2021-03-02)\n        var dateInvalid = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(value) && date.toISOString().split('T')[0] !== value.replace(' ', 'T').split('T')[0];\n        if (dateInvalid) return _msgOrTrue(errorMsgs.date);\n        if (max && new Date(max) < date) return _msgOrTrue(errorMsgs.dateMax, max);\n        if (min && new Date(min) > date) return _msgOrTrue(errorMsgs.dateMin, min);\n        break;\n      case 'email':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(value)) return _msgOrTrue(errorMsgs.email);\n        var x = value.split('@')[0];\n        var allowPlus = !x.startsWith('+') && !x.endsWith('+') && (x.match(/\\+/g) || []).length === 1;\n        if (allowPlus) value = value.replace('+', '');\n        if (!_utils__WEBPACK_IMPORTED_MODULE_0__.EMAIL_REGEX.test(value)) return _msgOrTrue(errorMsgs.email);\n        break;\n      case 'function':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isFn)(value)) return _msgOrTrue(errorMsgs.function);\n        break;\n      case 'hash':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isHash)(value)) return _msgOrTrue(errorMsgs.hash);\n        break;\n      case 'hex':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isHex)(value)) return _msgOrTrue(errorMsgs.hex);\n        break;\n      case 'identity':\n        var _ref2 = config || {},\n          chainType = _ref2.chainType,\n          chainId = _ref2.chainId,\n          ignoreChecksum = _ref2.ignoreChecksum;\n        var isIdentityValid = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isAddress)(value, chainType, chainId, ignoreChecksum);\n        if (!isIdentityValid) return _msgOrTrue(errorMsgs.identity);\n        break;\n      case 'integer':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isInteger)(value)) return _msgOrTrue(errorMsgs.integer);\n        break;\n      case 'number':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(value)) return _msgOrTrue(errorMsgs.number);\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(min) && value < min) return _msgOrTrue(errorMsgs.numberMin);\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(max) && value > max) return _msgOrTrue(errorMsgs.numberMax);\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(decimals) && decimals >= 0) {\n          if (decimals === 0) {\n            if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isInteger)(value)) return _msgOrTrue(errorMsgs.integer);\n            break;\n          }\n          var _len2 = (value.toString().split('.')[1] || '').length;\n          if (_len2 > decimals) return _msgOrTrue(errorMsgs.decimals, decimals);\n        }\n        break;\n      case 'object':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(value)) return _msgOrTrue(errorMsgs.object);\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(requiredKeys) && requiredKeys.length > 0 && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.objHasKeys)(value, requiredKeys)) return _msgOrTrue(errorMsgs.requiredKeys);\n        // validate child properties of the `value` object\n        err = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(childConf, strict) && validateObj(value, childConf, failFast, includeLabel, errorMsgs);\n        if (err) return err;\n        break;\n      case 'string':\n        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(value)) return _msgOrTrue(errorMsgs.string);\n        break;\n      case 'url':\n        try {\n          if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(value)) return _msgOrTrue(errorMsgs.url);\n          var url = new URL(value);\n          // Hack to fix comparison failure due to a trailing slash automatically added by `new URL()`\n          if (url.href.endsWith('/') && !value.endsWith('/')) value += '/';\n\n          // catch any auto-correction by `new URL()`. \n          // Eg: spaces in the domain name being replaced by`%20` or missing `//` in protocol being auto added\n          if (strict && url.href.toLowerCase() !== value.toLowerCase()) return _msgOrTrue(errorMsgs.url);\n        } catch (e) {\n          return _msgOrTrue(errorMsgs.url);\n        }\n        break;\n      default:\n        // validation for unlisted types by checking if the value is an instance of `type`\n        // (eg: ApiPromise, BN)\n        try {\n          if (!(value instanceof instanceOf)) return _msgOrTrue(errorMsgs.instanceof || errorMsgs.type);\n        } catch (_) {}\n        // unsupported type\n        return _msgOrTrue(errorMsgs.type);\n    }\n\n    // valid only if value `accept` array includes `value` or items in `value` array\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(accept) && accept.length) {\n      // if `value` is array all items in it must be in the `accept` array\n      var valid = !valueIsArr ? accept.includes(value) : value.every(function (v) {\n        return accept.includes(v);\n      });\n      if (!valid) return _msgOrTrue(errorMsgs.accept);\n    }\n    // valid only if value `reject` array does not include the `value` or items in `value` array\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(reject) && reject.length) {\n      var _valid = !valueIsArr ? !reject.includes(value) : value.every(function (v) {\n        return !reject.includes(v);\n      });\n      if (!_valid) return _msgOrTrue(errorMsgs.reject);\n    }\n\n    // if regex is an Array, assume it as arguments to instantiate `RegExp` object\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isArr)(regex)) regex = _construct(RegExp, _toConsumableArray(regex));\n    // validate regex expression\n    if (regex instanceof RegExp && !regex.test(value)) return _msgOrTrue(errorMsgs.regex);\n\n    // validate array/integer/number/string length\n    var len = (valueIsArr ? value : \"\".concat(value)).length;\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(maxLength) && len > maxLength) return _msgOrTrue(errorMsgs.lengthMax, maxLength);\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.isValidNumber)(minLength) && len < minLength) return _msgOrTrue(errorMsgs.lengthMin, minLength);\n\n    // valid according to the config\n    return null;\n  } catch (err) {\n    return errorConcat(errorMsgs.unexpectedError, '\\n', err);\n  }\n};\n\n/**\n * @name    validateObj\n * @summary validate object property values\n * \n * @param   {Object}  obj         object with values to validate\n * @param   {Object}  config      configuration to validate specific keys in the object\n * @param   {Boolean} failFast    whether to return on first error\n * @param   {Boolean} includeLabel whether to include property name in the error\n * \n * @example\n * <BR>\n *\n * ```javascript\n * const valueObj = { name: 'some name', age: 23 }\n * const config = {\n *      name: {\n *          maxLength: 32,\n *          minLength: 3,\n *          required: true,\n *          type: TYPES.string,\n *      },\n *      age: {\n *          max: 50,\n *          maxLength: 2,\n *          min: 18,\n *          name: 'Minimum age', // alternate name to be used instead of the key with error\n *          required: true,\n *          type: TYPES.integer,\n *      }\n * }\n * validateObj(valueObj, { max: 9999, min: 0, required: true, type: TYPES.number})\n * ```\n * \n * @returns {String|Object|Null} Null if no errors. If @failFast, String otherwise, Object with one or more errors.\n */\nvar validateObj = function validateObj() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var failFast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var includeLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var customMessages = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  try {\n    var errorMsgs = _objectSpread(_objectSpread({}, messages), customMessages);\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObj)(obj, config.strict || false)) return _msgOrTrue(errorMsgs.object);\n    var keys = Object.keys(config);\n    var errors = {};\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      var keyConf = config[key];\n      var keyErrMsgs = keyConf.customMessages,\n        label = keyConf.label,\n        name = keyConf.name;\n      var error = validate(value, _objectSpread(_objectSpread({}, keyConf), {}, {\n        failFast: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isBool)(keyConf.failFast) ? keyConf.failFast : failFast,\n        includeLabel: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isBool)(keyConf.includeLabel) ? keyConf.includeLabel : includeLabel\n      }), _objectSpread(_objectSpread({}, errorMsgs), keyErrMsgs));\n      if (!error) continue;\n      if (includeLabel) {\n        var errKey = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isStr)(label) && label // In case used with FormInput and label an element\n        || name || key;\n        error = \"\".concat(errKey, \" => \").concat(error);\n      }\n      if (failFast) return error;\n\n      // combine all errors into a single object\n      errors[key] = error;\n    }\n    return Object.keys(errors).length ? errors : null; // all valid according to config\n  } catch (err) {\n    return err;\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  messages: messages,\n  setMessages: setMessages,\n  TYPES: TYPES,\n  validate: validate,\n  validateObj: validateObj\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/validator.js\n")},"./src/utils/window.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "DESKTOP": () => (/* binding */ DESKTOP),\n/* harmony export */   "MOBILE": () => (/* binding */ MOBILE),\n/* harmony export */   "checkDarkPreferred": () => (/* binding */ checkDarkPreferred),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   "forceLayout": () => (/* binding */ forceLayout),\n/* harmony export */   "getLayout": () => (/* binding */ getLayout),\n/* harmony export */   "getUrlParam": () => (/* binding */ getUrlParam),\n/* harmony export */   "gridClasses": () => (/* binding */ gridClasses),\n/* harmony export */   "gridColumns": () => (/* binding */ gridColumns),\n/* harmony export */   "isBrowser": () => (/* binding */ isBrowser),\n/* harmony export */   "rxGridColumns": () => (/* binding */ rxGridColumns),\n/* harmony export */   "rxInverted": () => (/* binding */ rxInverted),\n/* harmony export */   "rxLayout": () => (/* binding */ rxLayout),\n/* harmony export */   "rxOnline": () => (/* binding */ rxOnline),\n/* harmony export */   "rxVisible": () => (/* binding */ rxVisible),\n/* harmony export */   "setClass": () => (/* binding */ setClass),\n/* harmony export */   "setInvertedBrowser": () => (/* binding */ setInvertedBrowser),\n/* harmony export */   "toggleFullscreen": () => (/* binding */ toggleFullscreen),\n/* harmony export */   "useInverted": () => (/* binding */ useInverted)\n/* harmony export */ });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _storageHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/utils/storageHelper.js");\n/* harmony import */ var _reactjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/utils/reactjs/index.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/utils/utils.js");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\nvar MODULE_KEY = \'window\';\nvar _forcedLayout = \'\';\nvar rw = function rw(value) {\n  return _storageHelper__WEBPACK_IMPORTED_MODULE_0__["default"].settings.module(MODULE_KEY, value) || {};\n};\nvar _document = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.fallbackIfFails)(function () {\n  return document;\n}, [], {});\nvar _window = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.fallbackIfFails)(function () {\n  return window;\n}, [], {});\nvar _navigator = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.fallbackIfFails)(function () {\n  return navigator;\n}, [], {});\nvar checkDarkPreferred = function checkDarkPreferred() {\n  var _window$matchMedia, _window$matchMedia$ca;\n  return !!((_window$matchMedia = _window.matchMedia) !== null && _window$matchMedia !== void 0 && (_window$matchMedia$ca = _window$matchMedia.call(_window, \'(prefers-color-scheme: dark)\')) !== null && _window$matchMedia$ca !== void 0 && _window$matchMedia$ca.matches);\n};\nvar MOBILE = \'mobile\';\nvar DESKTOP = \'desktop\';\nvar gridClasses = [\'\', \'col-2\', \'col-3\', \'col-4\', \'col-5\', \'col-6\'];\nvar isBrowser = !!_document && (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFn)(_document.getElementById);\nvar rxGridColumns = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X(gridColumns());\nvar rxInverted = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X([undefined, true].includes(rw().invertedBrowser) ? !!checkDarkPreferred() : rw().inverted);\nvar rxLayout = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X(getLayout());\nvar rxOnline = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X(_navigator.onLine);\nvar rxVisible = new rxjs__WEBPACK_IMPORTED_MODULE_3__/* .BehaviorSubject */ .X(true);\n\n// forceLayout enforces and reverts a specific layout size and ignores layout change when window resizes\n//\n// Params:\n// @size    string: a valid size name listed in `validSizes`. If not valid will set to dynamic layout base on `_window.innerWidth` value.\nvar forceLayout = function forceLayout(size) {\n  var _window$onresize;\n  _forcedLayout = [DESKTOP, MOBILE].includes(size) ? size : \'\';\n  (_window$onresize = _window.onresize) === null || _window$onresize === void 0 ? void 0 : _window$onresize.call(_window);\n};\nfunction getLayout() {\n  return _forcedLayout || (_window.innerWidth <= 991 ? MOBILE : DESKTOP);\n}\n\n/**\n * @name    getUrlParam\n * @summary read parameters of a given URL\n * \n * @param   {String} name   (optional) if supplied will return a specific paramenter as string.\n *                          Otherwise, will return an object containing all the URL parameters with respective values.\n * @param   {String} url    Default: `window.location.href`\n * \n * @returns {String|Object}\n */\nvar getUrlParam = function getUrlParam(name) {\n  var _window$location;\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _window === null || _window === void 0 ? void 0 : (_window$location = _window.location) === null || _window$location === void 0 ? void 0 : _window$location.href;\n  return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getUrlParam)(name, url);\n};\n\n// gridColumns read/writes main content grid column count\nfunction gridColumns(numCol) {\n  var value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isDefined)(numCol) ? {\n    gridColumns: numCol\n  } : undefined;\n  value && rxGridColumns.next(numCol);\n  return rw(value).gridColumns || 1;\n}\nvar setClass = function setClass(selector, obj) {\n  var _document$querySelect;\n  var retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var el = (_document$querySelect = _document.querySelector) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.call(_document, selector);\n  if (!el) return retry && setTimeout(function () {\n    return setClass(selector, obj, false);\n  }, 100);\n  Object.keys(obj).forEach(function (className) {\n    var func = obj[className] ? \'add\' : \'remove\';\n    el.classList[func](className);\n  });\n};\n\n/**\n * @summary user browser dark more settings\n * \n * @param {Boolean} useBrowser \n */\nvar setInvertedBrowser = function setInvertedBrowser(useBrowser) {\n  if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isBool)(useBrowser)) return rw().invertedBrowser;\n  var inverted = useBrowser ? checkDarkPreferred() : rxInverted.value;\n  rxInverted.next(inverted);\n  setTimeout(function () {\n    return rw({\n      invertedBrowser: !!useBrowser\n    });\n  });\n  return false;\n};\n\n/**\n * @name toggleFullscreen\n * @summary fullscreen enters/exits an element into fullscreen mode.\n * @description If the target element is already in fullscreen mode will simply exit fullscreen.\n * If another element is in fullscreen mode, will exit it from fullscreen and enter target into full screen with a \n * slight delay. If no/invalid selector supplied, will exit any fullscreen element.\n * \n * @param {String} selector (optional) CSS selector of the target element to toggle fullscreen\n */\nvar toggleFullscreen = function toggleFullscreen(selector) {\n  var _document$querySelect2;\n  // target element to toggle fullscreen\n  var el = ((_document$querySelect2 = _document.querySelector) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.call(_document, selector)) || {};\n  var fsEl = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  var isFS = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isDefined)(fsEl);\n\n  // function to exit fullscreen\n  var exitFS = _document.exitFullscreen || _document.mozCancelFullScreen || _document.webkitExitFullscreen || _document.msExitFullscreen;\n\n  // exit if already in fullscreen mode\n  if (isFS) {\n    var _exitFS$call;\n    exitFS === null || exitFS === void 0 ? void 0 : (_exitFS$call = exitFS.call) === null || _exitFS$call === void 0 ? void 0 : _exitFS$call.call(exitFS, document);\n    // target element has just been toggled \n    if (fsEl === el) return;\n  }\n\n  // function to enter fullscreen\n  var goFS = el.requestFullscreen || el.mozRequestFullScreen /* Firefox */ || el.webkitRequestFullscreen /* Chrome, Safari, Brave & Opera */ || el.msRequestFullscreen; /* IE/Edge */\n\n  setTimeout(function () {\n    var _goFS$call;\n    return goFS === null || goFS === void 0 ? void 0 : (_goFS$call = goFS.call) === null || _goFS$call === void 0 ? void 0 : _goFS$call.call(goFS, el);\n  }, isFS ? 50 : 0);\n  toggleFullscreen.lastSelector = el && selector || \'\';\n  return el;\n};\ntoggleFullscreen.lastSelector = null;\n\n/**\n * @name    useInverted\n * @summary custom React hook that returns a boolean value indicating whether inverted/dark mode is in use\n * \n * @param   {Boolean|String} reverse whether to reverse the value of inverted\n * \n * @reutrns {Boolean}\n * ToDo: move to reactjs/hooks\n */\nvar useInverted = function useInverted() {\n  var reverse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _useRxSubject = (0,_reactjs__WEBPACK_IMPORTED_MODULE_1__.useRxSubject)(rxInverted, function (inverted) {\n      if (!reverse) return inverted;\n      switch ("".concat(reverse)) {\n        // always reverse the value of inverted\n        case \'true\':\n        case \'always\':\n          return !inverted;\n        // reverse only when inverted\n        case \'inverted\':\n          return inverted ? !inverted : inverted;\n        // reverse only when not inverted\n        case \'not inverted\':\n          return inverted ? inverted : !inverted;\n        default:\n          return inverted;\n      }\n    }),\n    _useRxSubject2 = _slicedToArray(_useRxSubject, 1),\n    inverted = _useRxSubject2[0];\n  return inverted;\n};\nif (isBrowser) {\n  var _window$addEventListe, _window$addEventListe2;\n  // set layout name on window resize \n  _window.onresize = function () {\n    var layout = getLayout();\n    rxLayout.value !== layout && rxLayout.next(layout);\n  };\n  (_window$addEventListe = _window.addEventListener) === null || _window$addEventListe === void 0 ? void 0 : _window$addEventListe.call(_window, \'online\', function () {\n    return rxOnline.next(true);\n  });\n  (_window$addEventListe2 = _window.addEventListener) === null || _window$addEventListe2 === void 0 ? void 0 : _window$addEventListe2.call(_window, \'offline\', function () {\n    return rxOnline.next(false);\n  });\n  var ignoredFirstInverted = false;\n  rxInverted.subscribe(function (inverted) {\n    ignoredFirstInverted && rw({\n      inverted: inverted,\n      invertedBrowser: false\n    });\n    ignoredFirstInverted = true;\n    setClass(\'body\', {\n      inverted: inverted\n    });\n  });\n  rxLayout.subscribe(function (layout) {\n    setClass(\'body\', {\n      desktop: layout === DESKTOP,\n      mobile: layout === MOBILE\n    });\n  });\n  // keeps track of whether window/tab is visible\n  _document.addEventListener(\'visibilitychange\', function () {\n    return rxVisible.next(_document.visibilityState === \'visible\');\n  });\n  rxGridColumns.subscribe(function (numCol) {\n    var _el$classList;\n    var el = _document.getElementById(\'main-content\');\n    if (!el) return;\n    var next = gridClasses[numCol - 1];\n    (_el$classList = el.classList).remove.apply(_el$classList, [\'simple-grid\'].concat(_toConsumableArray(gridClasses.filter(function (c) {\n      return c && c !== next;\n    }))));\n    next && el.classList.add(\'simple-grid\', next);\n  });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  checkDarkPreferred: checkDarkPreferred,\n  MOBILE: MOBILE,\n  DESKTOP: DESKTOP,\n  forceLayout: forceLayout,\n  getLayout: getLayout,\n  getUrlParam: getUrlParam,\n  gridColumns: gridColumns,\n  rxGridColumns: rxGridColumns,\n  rxInverted: rxInverted,\n  rxLayout: rxLayout,\n  rxOnline: rxOnline,\n  rxVisible: rxVisible,\n  toggleFullscreen: toggleFullscreen\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/window.js\n')},"./src/utils/CHANGELOG.md":()=>{}}]);