import { Constructor } from '../types';
import Struct from '../codec/Struct';
import Tuple from '../codec/Tuple';
import U8aFixed from '../codec/U8aFixed';
import { TypeDef } from '../codec/createType';
import Metadata from '../Metadata';
import { EventMetadata as EventMetadataV5 } from '../Metadata/v5/Events';
import Null from './Null';
import U32 from './U32';
/**
 * @name EventIndex
 * @description
 * The Substrate EventIndex representation as a [[U32]].
 */
export declare class EventIndex extends U32 {
}
/**
 * @name EventData
 * @description
 * Wrapper for the actual data that forms part of an [[Event]]
 */
export declare class EventData extends Tuple {
    private _meta;
    private _method;
    private _section;
    private _typeDef;
    constructor(Types: Array<Constructor>, value: Uint8Array, typeDef: Array<TypeDef>, meta: EventMetadataV5, section: string, method: string);
    /**
     * @description The wrapped [[EventMetadata]]
     */
    readonly meta: EventMetadataV5;
    /**
     * @description The method as a string
     */
    readonly method: string;
    /**
     * @description The section as a string
     */
    readonly section: string;
    /**
     * @description The [[TypeDef]] for this event
     */
    readonly typeDef: Array<TypeDef>;
}
/**
 * @name EventId
 * @description
 * This follows the same approach as in [[Method]], we have the `[sectionIndex, methodIndex]` pairing
 * that indicates the actual event fired
 */
export declare class EventId extends U8aFixed {
    constructor(value?: any);
}
/**
 * @name Event
 * @description
 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
 * specific to a specific Substrate runtime
 */
export default class Event extends Struct {
    constructor(_value?: Uint8Array);
    static decodeEvent(value?: Uint8Array): {
        DataType: typeof Null;
        value?: undefined;
    } | {
        DataType: Constructor<EventData>;
        value: {
            index: Uint8Array;
            data: Uint8Array;
        };
    };
    static injectMetadata(metadata: Metadata): void;
    /**
     * @description The wrapped [[EventData]]
     */
    readonly data: EventData;
    /**
     * @description The [[EventId]], identifying the raw event
     */
    readonly index: EventId;
    /**
     * @description The [[EventMetadata]] with the documentation
     */
    readonly meta: EventMetadataV5;
    /**
     * @description The method string identifying the event
     */
    readonly method: string;
    /**
     * @description The section string identifying the event
     */
    readonly section: string;
    /**
     * @description The [[TypeDef]] for the event
     */
    readonly typeDef: Array<TypeDef>;
}
