import { AnyNumber, AnyU8a } from '../types';
import Struct from '../codec/Struct';
import Vector from '../codec/Vector';
import Bytes from '../primitive/Bytes';
import Hash from '../primitive/Hash';
import U32 from '../primitive/U32';
import { BftAuthoritySignature, BftAuthoritySignatureValue } from './Bft';
export declare type RhdJustificationValue = {
    roundNumber?: AnyNumber;
    hash?: AnyU8a;
    signatures?: Array<BftAuthoritySignatureValue>;
};
/**
 * @name Justification
 * @description
 * A generic justification as a stream of [[Bytes]], this is specific per consensus implementation
 */
export default class Justification extends Bytes {
}
/**
 * @name RhdJustification
 * @description
 * [[Justification]] for the Rhododendron consensus algorithm
 */
export declare class RhdJustification extends Struct {
    constructor(value?: RhdJustificationValue | Uint8Array);
    /**
     * @description The justification [[Hash]]
     */
    readonly hash: Hash;
    /**
     * @description The round this justification wraps as a [[U32]]
     */
    readonly roundNumber: U32;
    /**
     * @description The [[BftAuthoritySignature]] array
     */
    readonly signatures: Vector<BftAuthoritySignature>;
}
