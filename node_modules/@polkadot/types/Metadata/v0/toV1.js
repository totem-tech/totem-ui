"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toV1;

var _util = require("@polkadot/util");

var _codec = require("../../codec");

var _Calls = require("../v1/Calls");

var _Events = require("../v1/Events");

var _Metadata = _interopRequireWildcard(require("../v1/Metadata"));

var _Storage = require("../v1/Storage");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
function toV1Calls(modul) {
  return modul.module.call.functions.length === 0 ? new _codec.Option(_codec.Vector.with(_Calls.FunctionMetadata)) : new _codec.Option(_codec.Vector.with(_Calls.FunctionMetadata), modul.module.call.functions);
}

function toV1Events(metadataV0, prefix) {
  const events = metadataV0.events.find(event => event.name.eq(prefix));
  return events ? new _codec.Option(_codec.Vector.with(_Events.EventMetadata), events.events) : new _codec.Option(_codec.Vector.with(_Events.EventMetadata));
}

function toV1Storage(modul) {
  return modul.storage.isNone ? new _codec.Option(_codec.Vector.with(_Storage.StorageFunctionMetadata)) : new _codec.Option(_codec.Vector.with(_Storage.StorageFunctionMetadata), modul.storage.unwrap().functions);
}
/**
 * Function that converts MetadataV0 to MetadataV1
 */


function toV1(metadataV0) {
  return new _Metadata.default({
    modules: metadataV0.modules.map(modul => {
      // The prefix of this module (capitalized)
      const prefix = modul.storage.isSome ? modul.storage.unwrap().prefix.toString() : (0, _util.stringUpperFirst)(modul.prefix.toString()); // If this module doesn't have storage, we just assume the prefix is the name capitalized

      return new _Metadata.ModuleMetadata({
        name: modul.prefix,
        // Not capitalized
        prefix,
        // Capitalized
        storage: toV1Storage(modul),
        calls: toV1Calls(modul),
        events: toV1Events(metadataV0, modul.prefix)
      });
    })
  });
}