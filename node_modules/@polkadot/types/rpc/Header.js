"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utilCrypto = require("@polkadot/util-crypto");

var _Compact = _interopRequireDefault(require("../codec/Compact"));

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _BlockNumber = _interopRequireDefault(require("../type/BlockNumber"));

var _Digest = _interopRequireDefault(require("./Digest"));

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Header
 * @description
 * A [[Block]] header
 */
class Header extends _Struct.default {
  constructor(value) {
    super({
      parentHash: _Hash.default,
      number: _Compact.default.with(_BlockNumber.default),
      stateRoot: _Hash.default,
      extrinsicsRoot: _Hash.default,
      digest: _Digest.default
    }, value || {});
  }
  /**
   * @description The wrapped [[BlockNumber]]
   */


  get blockNumber() {
    return this.get('number').toBn();
  }
  /**
   * @description The wrapped [[Digest]]
   */


  get digest() {
    return this.get('digest');
  }
  /**
   * @description The wrapped extrisics root as a [[Hash]]
   */


  get extrinsicsRoot() {
    return this.get('extrinsicsRoot');
  }
  /**
   * @description Convenience method, encodes the header and calculates the [[Hash]]
   */


  get hash() {
    return new _Hash.default((0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));
  }
  /**
   * @description Alias for `blockNumber` (this is displayed in JSON)
   */


  get number() {
    return this.blockNumber;
  }
  /**
   * @description The wrapped parent as a [[Hash]]
   */


  get parentHash() {
    return this.get('parentHash');
  }
  /**
   * @description The wrapped state root as a [[Hash]]
   */


  get stateRoot() {
    return this.get('stateRoot');
  }

}

exports.default = Header;