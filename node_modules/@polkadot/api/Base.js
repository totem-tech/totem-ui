"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventemitter = _interopRequireDefault(require("eventemitter3"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _apiDerive = _interopRequireDefault(require("@polkadot/api-derive"));

var _fromMetadata = _interopRequireDefault(require("@polkadot/extrinsics/fromMetadata"));

var _rpcCore = _interopRequireDefault(require("@polkadot/rpc-core"));

var _rpcRx = _interopRequireDefault(require("@polkadot/rpc-rx"));

var _fromMetadata2 = _interopRequireDefault(require("@polkadot/storage/fromMetadata"));

var _types = require("@polkadot/types");

var _Linkage = require("@polkadot/types/codec/Linkage");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _nodeCompat = _interopRequireDefault(require("./nodeCompat"));

var _SubmittableExtrinsic = _interopRequireDefault(require("./SubmittableExtrinsic"));

// Copyright 2017-2019 @polkadot/api authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const INIT_ERROR = "Api needs to be initialised before using, listen on 'ready'";
const KEEPALIVE_INTERVAL = 15000;
const l = (0, _util.logger)('api/decorator');
let pkgJson;

try {
  pkgJson = require('./package.json');
} catch (error) {
  // development environment
  pkgJson = {
    name: '@polkadot/api',
    version: '-'
  };
}
/**
 * Put the `this.onCall` function of ApiRx here, because it is needed by
 * `api._rx`.
 */


function rxOnCall(method) {
  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  let _callback = arguments.length > 2 ? arguments[2] : undefined;

  return method(...params);
}

class ApiBase {
  // FIXME These two could be merged
  // FIXME These two could be merged

  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHead((header) => {
   *   console.log(`new block #${header.blockNumber.toNumber()}`);
   * });
   * ```
   */
  constructor() {
    let provider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let type = arguments.length > 1 ? arguments[1] : undefined;
    this._derive = void 0;
    this._eventemitter = void 0;
    this._extrinsics = void 0;
    this._genesisHash = void 0;
    this._isReady = false;
    this._options = void 0;
    this._query = void 0;
    this._queryMulti = void 0;
    this._rpc = void 0;
    this._rpcBase = void 0;
    this._rpcRx = void 0;
    this._runtimeMetadata = void 0;
    this._runtimeVersion = void 0;
    this._rx = {};
    this._type = void 0;
    const options = (0, _util.isObject)(provider) && (0, _util.isFunction)(provider.send) ? {
      provider
    } : provider;
    const thisProvider = options.source ? options.source._rpcBase._provider.clone() : options.provider;
    this._options = options;
    this._type = type;
    this._eventemitter = new _eventemitter.default();
    this._rpcBase = new _rpcCore.default(thisProvider);
    (0, _util.assert)(this.hasSubscriptions, 'Api can only be used with a provider supporting subscriptions');
    this._rpcRx = new _rpcRx.default(this._rpcBase._provider);
    this._rpc = this.decorateRpc(this._rpcRx, this.onCall); // FIXME 3.4.1

    this._rx.rpc = this.decorateRpc(this._rpcRx, rxOnCall);
    this._queryMulti = this.decorateMulti(this.onCall); // as above :(

    this._rx.queryMulti = this.decorateMulti(rxOnCall);
    this._rx.signer = options.signer; // we only re-register the types (global) if this is not a cloned instance

    if (!options.source) {
      this.registerTypes(options.types);
    }

    this.init();
  }
  /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */


  get genesisHash() {
    (0, _util.assert)(!(0, _util.isUndefined)(this._genesisHash), INIT_ERROR);
    return this._genesisHash;
  }
  /**
   * @description `true` when subscriptions are supported
   */


  get hasSubscriptions() {
    return this._rpcBase._provider.hasSubscriptions;
  }
  /**
   * @description The library information name & version (from package.json)
   */


  get libraryInfo() {
    return "".concat(pkgJson.name, " v").concat(pkgJson.version);
  }
  /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */


  get runtimeMetadata() {
    (0, _util.assert)(!(0, _util.isUndefined)(this._runtimeMetadata), INIT_ERROR);
    return this._runtimeMetadata;
  }
  /**
   * @description Contains the version information for the current runtime.
   */


  get runtimeVersion() {
    (0, _util.assert)(!(0, _util.isUndefined)(this._runtimeVersion), INIT_ERROR);
    return this._runtimeVersion;
  }
  /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */


  get type() {
    return this._type;
  }
  /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */


  setSigner(signer) {
    this._rx.signer = signer;
  }
  /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */


  get derive() {
    (0, _util.assert)(!(0, _util.isUndefined)(this._derive), INIT_ERROR);
    return this._derive;
  }
  /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.accountNonce(<accountId>)` (retrieving the associated nonce for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.balances.freeBalance(<accountId>, (balance) => {
   *   console.log('new balance', balance);
   * });
   * ```
   */


  get query() {
    (0, _util.assert)(!(0, _util.isUndefined)(this._query), INIT_ERROR);
    return this._query;
  }
  /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.existentialDeposit,
   *     // or you can pass parameters to the storage query
   *     [api.query.balances.freeBalance, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, balance]) => {
   *     console.log(`You have ${balance.sub(existential)} more than the existential deposit`);
   *   }
   * );
   * ```
   */


  get queryMulti() {
    return this._queryMulti;
  }
  /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (usine known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHead((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */


  get rpc() {
    return this._rpc;
  }
  /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transfer(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */


  get tx() {
    (0, _util.assert)(!(0, _util.isUndefined)(this._extrinsics), INIT_ERROR);
    return this._extrinsics;
  }
  /**
   * @description Disconnect from the underlying provider, halting all comms
   */


  disconnect() {
    this._rpcBase.disconnect();
  }
  /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', () => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', () => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */


  on(type, handler) {
    this._eventemitter.on(type, handler);

    return this;
  }
  /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = () => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */


  off(type, handler) {
    this._eventemitter.removeListener(type, handler);

    return this;
  }
  /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', () => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', () => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */


  once(type, handler) {
    this._eventemitter.once(type, handler);

    return this;
  }
  /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */


  registerTypes(types) {
    if (types) {
      (0, _types.getTypeRegistry)().register(types);
    }
  }

  emit(type) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    this._eventemitter.emit(type, ...args);
  }

  init() {
    let healthTimer = null;

    this._rpcBase._provider.on('disconnected', () => {
      this.emit('disconnected');

      if (healthTimer) {
        clearInterval(healthTimer);
        healthTimer = null;
      }
    });

    this._rpcBase._provider.on('error', error => {
      this.emit('error', error);
    });

    this._rpcBase._provider.on('connected', async () => {
      this.emit('connected');

      try {
        const [hasMeta, cryptoReady] = await Promise.all([this.loadMeta(), (0, _utilCrypto.cryptoWaitReady)()]);

        if (hasMeta && !this._isReady && cryptoReady) {
          this._isReady = true;
          this.emit('ready', this);
        }

        healthTimer = setInterval(() => {
          this._rpcRx.system.health().toPromise().catch(() => {// ignore
          });
        }, KEEPALIVE_INTERVAL);
      } catch (_error) {
        const error = new Error("FATAL: Unable to initialize the API: ".concat(_error.message));
        l.error(error);
        this.emit('error', error);
      }
    });
  }

  async loadMeta() {
    const {
      metadata = {}
    } = this._options; // only load from on-chain if we are not a clone (default path), alternatively
    // just use the values from the source instance provided

    if (!this._options.source || !this._options.source._isReady) {
      [this._genesisHash, this._runtimeVersion] = await Promise.all([this._rpcBase.chain.getBlockHash(0), this._rpcBase.chain.getRuntimeVersion()]);
      const metadataKey = "".concat(this._genesisHash, "-").concat(this._runtimeVersion.specVersion);

      if (metadataKey in metadata) {
        this._runtimeMetadata = new _types.Metadata(metadata[metadataKey]);
      } else {
        this._runtimeMetadata = await this._rpcBase.state.getMetadata();
      } // get unique types & validate


      this.runtimeMetadata.getUniqTypes(false);
    } else {
      this._runtimeMetadata = this._options.source.runtimeMetadata;
      this._runtimeVersion = this._options.source.runtimeVersion;
      this._genesisHash = this._options.source.genesisHash;
    }

    (0, _nodeCompat.default)(this._runtimeVersion);
    const extrinsics = (0, _fromMetadata.default)(this.runtimeMetadata);
    const storage = (0, _fromMetadata2.default)(this.runtimeMetadata);
    this._extrinsics = this.decorateExtrinsics(extrinsics, this.onCall);
    this._query = this.decorateStorage(storage, this.onCall); // FIXME 3.4.1

    this._derive = this.decorateDerive(this._rx, this.onCall); // FIXME 3.4.1

    this._rx.genesisHash = this._genesisHash;
    this._rx.runtimeVersion = this._runtimeVersion;
    this._rx.tx = this.decorateExtrinsics(extrinsics, rxOnCall);
    this._rx.query = this.decorateStorage(storage, rxOnCall);
    this._rx.derive = this.decorateDerive(this._rx, rxOnCall); // only inject if we are not a clone (global init)

    if (!this._options.source) {
      _types.Event.injectMetadata(this.runtimeMetadata);

      _types.Method.injectMethods(extrinsics);
    }

    return true;
  }

  decorateFunctionMeta(input, output) {
    output.meta = input.meta;
    output.method = input.method;
    output.section = input.section;
    output.toJSON = input.toJSON;

    if (input.callIndex) {
      output.callIndex = input.callIndex;
    }

    return output;
  }

  decorateRpc(rpc, onCall) {
    return ['author', 'chain', 'state', 'system'].reduce((result, _sectionName) => {
      const sectionName = _sectionName;
      result[sectionName] = Object.keys(rpc[sectionName]).reduce((section, methodName) => {
        // FIXME Find a better way to know if a particular method is a subscription or not
        const needsCallback = methodName.includes('subscribe'); // These signatures are allowed and exposed here (bit or a stoopid way, but checked
        // RPCs and we have 3 max args, with subs max one arg... YMMV) -
        //   (arg1?: CodecArg, arg2?: CodecArg, arg3?: CodecArg): CodecResult;
        //    (arg1: CodecArg, callback: CodecCallback): SubscriptionResult;
        //    (callback: CodecCallback): SubscriptionResult;

        const method = function method() {
          let callback;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          let params = args;

          if (args.length && (0, _util.isFunction)(args[args.length - 1])) {
            callback = args[args.length - 1];
            params = args.slice(0, args.length - 1);
          }

          return onCall(rpc[sectionName][methodName], params, callback, needsCallback);
        };

        section[methodName] = method;
        return section;
      }, {});
      return result;
    }, {});
  }

  decorateMulti(onCall) {
    return (calls, callback) => {
      const mapped = calls.map(arg => // the input is a QueryableStorageFunction, convert to StorageFunction
      Array.isArray(arg) ? [arg[0].creator, ...arg.slice(1)] : [arg.creator]);
      return onCall(() => this._rpcRx.state.subscribeStorage(mapped).pipe((0, _operators.map)(results => new _types.VectorAny(...results))), [], callback);
    };
  }

  decorateExtrinsics(extrinsics, onCall) {
    const creator = value => (0, _SubmittableExtrinsic.default)(this.type, this._rx, onCall, value);

    return Object.keys(extrinsics).reduce((result, sectionName) => {
      const section = extrinsics[sectionName];
      result[sectionName] = Object.keys(section).reduce((result, methodName) => {
        result[methodName] = this.decorateExtrinsicEntry(section[methodName], onCall);
        return result;
      }, {});
      return result;
    }, creator);
  }

  decorateExtrinsicEntry(method, onCall) {
    var _this = this;

    const decorated = function decorated() {
      return (0, _SubmittableExtrinsic.default)(_this.type, _this._rx, onCall, method(...arguments));
    };

    return this.decorateFunctionMeta(method, decorated);
  }

  decorateStorage(storage, onCall) {
    return Object.keys(storage).reduce((result, sectionName) => {
      const section = storage[sectionName];
      result[sectionName] = Object.keys(section).reduce((result, methodName) => {
        result[methodName] = this.decorateStorageEntry(section[methodName], onCall);
        return result;
      }, {});
      return result;
    }, {});
  }

  decorateStorageEntry(creator, onCall) {
    var _this2 = this;

    // These signatures are allowed and exposed here -
    //   (arg?: CodecArg): CodecResult;
    //   (arg: CodecArg, callback: CodecCallback): SubscriptionResult;
    //   (callback: CodecCallback): SubscriptionResult;
    const decorated = function decorated() {
      let callback;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      let params = args;

      if (args.length && (0, _util.isFunction)(args[args.length - 1])) {
        callback = args[args.length - 1];
        params = args.slice(0, args.length - 1);
      }

      if (creator.headKey && params.length === 0) {
        return _this2.decorateStorageEntryLinked(creator, onCall, callback);
      }

      return onCall(function () {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return _this2._rpcRx.state.subscribeStorage([creator.meta.type.isDoubleMap ? [creator, args] : [creator, ...args]]).pipe( // state_storage returns an array of values, since we have just subscribed to
        // a single entry, we pull that from the array and return it as-is
        (0, _operators.map)(result => result[0]));
      }, params, callback);
    };

    decorated.creator = creator;

    decorated.at = (hash, arg1, arg2) => onCall((arg1, arg2) => this._rpcRx.state.getStorage(creator.meta.type.isDoubleMap ? [creator, [arg1, arg2]] : [creator, arg1], hash), [arg1, arg2]); // FIXME The unknown cast is needed since the onCall result, `C | S` cannot
    // be converted from C to the actual result required


    decorated.hash = (arg1, arg2) => onCall((arg1, arg2) => this._rpcRx.state.getStorageHash(creator.meta.type.isDoubleMap ? [creator, [arg1, arg2]] : [creator, arg1]), [arg1, arg2]);

    decorated.key = (arg1, arg2) => (0, _util.u8aToHex)((0, _util.compactStripLength)(creator(creator.meta.type.isDoubleMap ? [arg1, arg2] : arg1))[1]); // When using double map storage function, user need to path double map key as an array


    decorated.multi = (args, callback) => onCall(() => this._rpcRx.state.subscribeStorage(args.map(arg => [creator, arg])).pipe((0, _operators.map)(results => new _types.VectorAny(...results))), [], callback);

    decorated.size = (arg1, arg2) => onCall((arg1, arg2) => this._rpcRx.state.getStorageSize(creator.meta.type.isDoubleMap ? [creator, [arg1, arg2]] : [creator, arg1]), [arg1, arg2]);

    return this.decorateFunctionMeta(creator, decorated);
  }

  decorateStorageEntryLinked(method, onCall, callback) {
    const result = new Map();
    let subject;
    let head = null; // retrieve a value based on the key, iterating if it has a next entry. Since
    // entries can be re-linked in the middle of a list, we subscribe here to make
    // sure we catch any updates, no matter the list position

    const getNext = key => {
      return this._rpcRx.state.subscribeStorage([[method, key]]).pipe((0, _operators.switchMap)((_ref) => {
        let [data] = _ref;
        const linkage = data[1];
        result.set(key, data); // iterate from this key to the children, constructing
        // entries for all those found and available

        if (linkage.next.isSome) {
          return getNext(linkage.next.unwrap());
        }

        const keys = [];
        const values = [];
        let nextKey = head; // loop through the results collected, starting at the head an re-creating
        // the list. Our map may have old entries, based on the linking these will
        // not be returned in the final result

        while (nextKey) {
          const entry = result.get(nextKey);

          if (!entry) {
            break;
          }

          const [item, linkage] = entry;
          keys.push(nextKey);
          values.push(item);
          nextKey = linkage.next && linkage.next.unwrapOr(null);
        }

        const nextResult = values.length ? new _Linkage.LinkageResult([keys[0].constructor, keys], [values[0].constructor, values]) : new _Linkage.LinkageResult([_types.Null, []], [_types.Null, []]); // we set our result into a subject so we have a single observable for
        // which the value changes over time. Initially create, follow-up next

        if (subject) {
          subject.next(nextResult);
        } else {
          subject = new _rxjs.BehaviorSubject(nextResult);
        }

        return subject;
      }));
    }; // this handles the case where the head changes effectively, i.e. a new entry
    // appears at the top of the list, the new getNext gets kicked off


    return onCall(arg => this._rpcRx.state.subscribeStorage([arg]).pipe((0, _operators.switchMap)((_ref2) => {
      let [key] = _ref2;
      head = key;
      return getNext(key);
    })), [method.headKey], callback);
  }

  decorateDerive(apiRx, onCall) {
    const derive = (0, _apiDerive.default)(apiRx, this._options.derives);
    return Object.keys(derive).reduce((result, _sectionName) => {
      const sectionName = _sectionName;
      result[sectionName] = Object.keys(derive[sectionName]).reduce((section, methodName) => {
        // FIXME The callback extraction we do way too much - de-dupe
        const method = function method() {
          let callback;

          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          let params = args;

          if (args.length && (0, _util.isFunction)(args[args.length - 1])) {
            callback = args[args.length - 1];
            params = args.slice(0, args.length - 1);
          }

          return onCall(derive[sectionName][methodName], params, callback, !!callback);
        };

        section[methodName] = method; // CodecCallback or CodecArg form

        return section;
      }, {});
      return result;
    }, {});
  }

}

exports.default = ApiBase;