import { AnyNumber, AnyU8a } from '../types';
import Struct from '../codec/Struct';
import Hash from '../primitive/Hash';
import BlockNumber from '../type/BlockNumber';
import Digest, { DigestItem } from './Digest';
export declare type HeaderValue = {
    digest?: Digest | {
        logs: DigestItem[];
    };
    extrinsicsRoot?: AnyU8a;
    number?: AnyNumber;
    parentHash?: AnyU8a;
    stateRoot?: AnyU8a;
};
/**
 * @name Header
 * @description
 * A [[Block]] header
 */
export default class Header extends Struct {
    constructor(value?: HeaderValue | Uint8Array | null);
    /**
     * @description The wrapped [[BlockNumber]]
     */
    readonly blockNumber: BlockNumber;
    /**
     * @description The wrapped [[Digest]]
     */
    readonly digest: Digest;
    /**
     * @description The wrapped extrisics root as a [[Hash]]
     */
    readonly extrinsicsRoot: Hash;
    /**
     * @description Convenience method, encodes the header and calculates the [[Hash]]
     */
    readonly hash: Hash;
    /**
     * @description Alias for `blockNumber` (this is displayed in JSON)
     */
    readonly number: BlockNumber;
    /**
     * @description The wrapped parent as a [[Hash]]
     */
    readonly parentHash: Hash;
    /**
     * @description The wrapped state root as a [[Hash]]
     */
    readonly stateRoot: Hash;
}
