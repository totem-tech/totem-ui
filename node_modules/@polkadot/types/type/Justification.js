"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RhdJustification = exports.default = void 0;

var _Struct = _interopRequireDefault(require("../codec/Struct"));

var _Vector = _interopRequireDefault(require("../codec/Vector"));

var _Bytes = _interopRequireDefault(require("../primitive/Bytes"));

var _Hash = _interopRequireDefault(require("../primitive/Hash"));

var _U = _interopRequireDefault(require("../primitive/U32"));

var _Bft = require("./Bft");

// Copyright 2017-2019 @polkadot/types authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name Justification
 * @description
 * A generic justification as a stream of [[Bytes]], this is specific per consensus implementation
 */
class Justification extends _Bytes.default {}
/**
 * @name RhdJustification
 * @description
 * [[Justification]] for the Rhododendron consensus algorithm
 */


exports.default = Justification;

class RhdJustification extends _Struct.default {
  constructor(value) {
    super({
      roundNumber: _U.default,
      hash: _Hash.default,
      signatures: _Vector.default.with(_Bft.BftAuthoritySignature)
    }, value);
  }
  /**
   * @description The justification [[Hash]]
   */


  get hash() {
    return this.get('hash');
  }
  /**
   * @description The round this justification wraps as a [[U32]]
   */


  get roundNumber() {
    return this.get('roundNumber');
  }
  /**
   * @description The [[BftAuthoritySignature]] array
   */


  get signatures() {
    return this.get('signatures');
  }

}

exports.RhdJustification = RhdJustification;