import { ProviderInterface } from '@polkadot/rpc-provider/types';
import { CodecArg, CodecCallback, RegistryTypes } from '@polkadot/types/types';
import { RxResult } from './rx/types';
import { ApiBaseInterface, ApiInterface$Events, ApiOptions, ApiType, DecoratedRpc, Derive, OnCallFunction, QueryableStorage, QueryableStorageMulti, SubmittableExtrinsics, Signer } from './types';
import RpcBase from '@polkadot/rpc-core';
import RpcRx from '@polkadot/rpc-rx';
import { Hash, Metadata, RuntimeVersion } from '@polkadot/types';
export default abstract class ApiBase<CodecResult, SubscriptionResult> implements ApiBaseInterface<CodecResult, SubscriptionResult> {
    private _derive?;
    private _eventemitter;
    private _extrinsics?;
    private _genesisHash?;
    private _isReady;
    protected readonly _options: ApiOptions;
    private _query?;
    private _queryMulti;
    private _rpc;
    protected _rpcBase: RpcBase;
    protected _rpcRx: RpcRx;
    private _runtimeMetadata?;
    private _runtimeVersion?;
    private _rx;
    private _type;
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHead((header) => {
     *   console.log(`new block #${header.blockNumber.toNumber()}`);
     * });
     * ```
     */
    constructor(provider: ProviderInterface | ApiOptions | undefined, type: ApiType);
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */
    readonly genesisHash: Hash;
    /**
     * @description `true` when subscriptions are supported
     */
    readonly hasSubscriptions: boolean;
    /**
     * @description The library information name & version (from package.json)
     */
    readonly libraryInfo: string;
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */
    readonly runtimeMetadata: Metadata;
    /**
     * @description Contains the version information for the current runtime.
     */
    readonly runtimeVersion: RuntimeVersion;
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */
    readonly type: ApiType;
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */
    setSigner(signer: Signer): void;
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */
    readonly derive: Derive<CodecResult, SubscriptionResult>;
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.accountNonce(<accountId>)` (retrieving the associated nonce for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.balances.freeBalance(<accountId>, (balance) => {
     *   console.log('new balance', balance);
     * });
     * ```
     */
    readonly query: QueryableStorage<CodecResult, SubscriptionResult>;
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.existentialDeposit,
     *     // or you can pass parameters to the storage query
     *     [api.query.balances.freeBalance, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, balance]) => {
     *     console.log(`You have ${balance.sub(existential)} more than the existential deposit`);
     *   }
     * );
     * ```
     */
    readonly queryMulti: QueryableStorageMulti<CodecResult, SubscriptionResult>;
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (usine known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHead((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */
    readonly rpc: DecoratedRpc<CodecResult, SubscriptionResult>;
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transfer(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */
    readonly tx: SubmittableExtrinsics<CodecResult, SubscriptionResult>;
    /**
     * @description Disconnect from the underlying provider, halting all comms
     */
    disconnect(): void;
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', () => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', () => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    on(type: ApiInterface$Events, handler: (...args: Array<any>) => any): this;
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = () => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */
    off(type: ApiInterface$Events, handler: (...args: Array<any>) => any): this;
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', () => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', () => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */
    once(type: ApiInterface$Events, handler: (...args: Array<any>) => any): this;
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */
    registerTypes(types?: RegistryTypes): void;
    protected abstract onCall(method: OnCallFunction<RxResult, RxResult>, params?: Array<CodecArg>, callback?: CodecCallback, needsCallback?: boolean): CodecResult | SubscriptionResult;
    private emit;
    private init;
    private loadMeta;
    private decorateFunctionMeta;
    private decorateRpc;
    private decorateMulti;
    private decorateExtrinsics;
    private decorateExtrinsicEntry;
    private decorateStorage;
    private decorateStorageEntry;
    private decorateStorageEntryLinked;
    private decorateDerive;
}
