"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _types = require("@polkadot/types");

// Copyright 2017-2019 @polkadot/api-derive authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name HeaderExtended
 * @description
 * A [[Block]] header with an additional `author` field that indicates the block author
 */
class HeaderExtended extends _types.Header {
  constructor() {
    let header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    let sessionValidators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(header);
    this._author = void 0;

    if (!header || !header.digest || !sessionValidators.length) {
      return;
    }

    let slot;
    const [pitem] = header.digest.logsWith('PreRuntime'); // extract from the substrate 2.0 PreRuntime digest

    if (pitem) {
      const preRuntime = pitem.asPreRuntime;

      if (preRuntime.engine.isAura) {
        slot = preRuntime.slot;
      }
    } else {
      const [citem] = header.digest.logsWith('Consensus'); // extract author from the consensus (substrate 1.0, digest)

      if (citem) {
        const consensus = citem.asConsensus;

        if (consensus.engine.isAura) {
          slot = consensus.slot;
        }
      } else {
        const [sitem] = header.digest.logsWith('SealV0'); // extract author from the seal (pre substrate 1.0, backwards compat)

        if (sitem) {
          slot = sitem.asSealV0.slot;
        }
      }
    } // found a slot? Great, extract the validator


    if (slot) {
      this._author = sessionValidators[slot.modn(sessionValidators.length)];
    }
  }
  /**
   * @description Convenience method, returns the author for the block
   */


  get author() {
    return this._author;
  }
  /**
   * @description Creates the JSON representation
   */


  toJSON() {
    return (0, _objectSpread2.default)({}, super.toJSON(), {
      author: this.author ? this.author.toJSON() : undefined
    });
  }

}

exports.default = HeaderExtended;